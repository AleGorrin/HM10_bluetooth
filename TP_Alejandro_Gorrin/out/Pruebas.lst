
TP_AlejandroG/Pruebas/out/Pruebas.elf:     file format elf32-littlearm
TP_AlejandroG/Pruebas/out/Pruebas.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000931

Program Header:
0x70000001 off    0x000145a8 vaddr 0x1a0045a8 paddr 0x1a0045a8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000001cc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000045b0 memsz 0x000045b0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0045b0 align 2**16
         filesz 0x00000158 memsz 0x00000158 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045a4  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  10000000  1a0045b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020158  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020158  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020158  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020158  2**2
                  CONTENTS
  6 .bss          00000074  10000158  10000158  00000158  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020158  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020158  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020158  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020158  2**2
                  CONTENTS
 11 .init_array   00000004  1a0045a4  1a0045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0045a8  1a0045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020158  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020158  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020158  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020158  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020158  2**2
                  CONTENTS
 18 .noinit       00000000  100001cc  100001cc  00020158  2**2
                  CONTENTS
 19 .debug_info   00028673  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000602f  00000000  00000000  000487cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a15b  00000000  00000000  0004e7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000c70  00000000  00000000  00058955  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000d50  00000000  00000000  000595c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00007ae8  00000000  00000000  0005a315  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000166e6  00000000  00000000  00061dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000290f1  00000000  00000000  000784e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a15d4  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a163c  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002538  00000000  00000000  000a1674  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000158 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0045a4 l    d  .init_array	00000000 .init_array
1a0045a8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001cc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001b4c l     F .text	000000a4 uartProcessIRQ
10000180 l     O .bss	00000004 rxIsrCallbackUART0
10000184 l     O .bss	00000004 rxIsrCallbackUART2
10000188 l     O .bss	00000004 rxIsrCallbackUART3
1000018c l     O .bss	00000004 txIsrCallbackUART0
10000190 l     O .bss	00000004 txIsrCallbackUART2
10000194 l     O .bss	00000004 txIsrCallbackUART3
1a004378 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
1000015c l     O .bss	0000000a uartBuff.13999
10000168 l     O .bss	0000000a uartBuff.14016
00000000 l    df *ABS*	00000000 system.c
10000174 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a000a84 l     F .text	00000044 Board_LED_Init
1a000ac8 l     F .text	00000040 Board_TEC_Init
1a000b08 l     F .text	00000040 Board_GPIO_Init
1a000b48 l     F .text	00000030 Board_ADC_Init
1a000b78 l     F .text	00000038 Board_SPI_Init
1a000bb0 l     F .text	00000024 Board_I2C_Init
1a0041e8 l     O .text	00000008 GpioButtons
1a0041f0 l     O .text	0000000c GpioLeds
1a0041fc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004214 l     O .text	00000004 InitClkStates
1a004218 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000018 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000dd4 l     F .text	0000002c Chip_UART_GetIndex
1a00428c l     O .text	00000008 UART_BClock
1a004294 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000f70 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000f84 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00113c l     F .text	000000a0 pll_calc_divs
1a0011dc l     F .text	0000010c pll_get_frac
1a0012e8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00155c l     F .text	00000022 Chip_Clock_GetDivRate
10000178 l     O .bss	00000008 audio_usb_pll_freq
1a0042a8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a001710 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004314 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00195c l     F .text	00000014 Chip_SSP_GetClockIndex
1a001970 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000050 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sct.c
1a00435c l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_dac.c
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a001d26 l     F .text	0000000c pwmInitTimers
1a001d5c l     F .text	00000034 pwmAttach
1a001d90 l     F .text	0000001c pwmDetach
10000054 l     O .data	0000000b AttachedPWMList
1a0043c0 l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_tick.c
10000198 l     O .bss	00000004 callBackFuncParams
100001a0 l     O .bss	00000008 tickCounter
100001a8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001e9c l     F .text	00000002 errorOcurred
1a001e9e l     F .text	00000002 doNothing
10000068 l     O .data	00000040 timer_dd
1a0043cc l     O .text	00000030 timer_sd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00221c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100001ac l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002590 l     F .text	0000009c enableGPIOIrq
1a00262c l     F .text	00000048 disableGPIOIrq
1a002674 l     F .text	00000010 clearInterrupt
1a002684 l     F .text	0000005c serveInterrupt
1a0026e0 l     F .text	0000000c triggerExpired
1a0026ec l     F .text	0000000c timerExpired
100000a8 l     O .data	00000001 firstTime.11723
100000ac l     O .data	00000048 ultrasonicSensors
1a0044e4 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003038 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003440 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000f8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0045a8 l       .init_array	00000000 __init_array_end
1a0045a4 l       .bss_RAM5	00000000 __preinit_array_end
1a0045a4 l       .init_array	00000000 __init_array_start
1a0045a4 l       .bss_RAM5	00000000 __preinit_array_start
1a001380 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0009d0 g     F .text	00000012 _isatty_r
1a002bc8 g     F .text	000000dc _puts_r
1a002080 g     F .text	00000044 TIMER2_IRQHandler
1a001c20 g     F .text	00000014 uartRxRead
1a0009e2 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a00101c g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001cc4 g     F .text	0000001e uartReadByte
1a002b98 g     F .text	00000030 printf
1a000c6a g     F .text	00000008 __stdio_init
100001c0 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a002550 g     F .text	0000003e delayRead
1a003a52 g     F .text	00000024 __sseek
1a0030e8 g     F .text	00000070 __sinit
1a002d34 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
10000000 g     O .data	00000002 b
1a00308c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0010e4 g     F .text	0000000c Chip_ADC_SetResolution
1a003b2c g     F .text	0000000c __malloc_unlock
1a001e70 g     F .text	0000002c SysTick_Handler
1a000e54 g     F .text	00000040 Chip_UART_SetBaud
100001c1 g     O .bss	00000001 __lock___arc4random_mutex
1a00092c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000c0c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0045b0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1000015a g     O .bss	00000002 muestra
1a00043c g     F .text	0000019c modo_emergencia
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a001760 g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0009c6 g     F .text	0000000a _fstat_r
53ff6f5e g       *ABS*	00000000 __valid_user_code_checksum
1a0045b0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0005d8 g     F .text	00000040 inicializacion_sensor_ultrasonido
1a0020c4 g     F .text	00000044 TIMER3_IRQHandler
1a0015fe g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001748 g     F .text	00000018 Chip_TIMER_Reset
1a0027a4 g     F .text	00000044 ultrasonicSensorGetDistance
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003080 g     F .text	0000000c _cleanup_r
1a002808 g     F .text	00000000 .hidden __aeabi_uldivmod
100001cc g       .noinit	00000000 _noinit
1a002ca4 g     F .text	00000010 puts
1a001cfc g     F .text	00000016 uartWriteString
100001b8 g     O .bss	00000004 SystemCoreClock
1a000e00 g     F .text	00000054 Chip_UART_Init
1a000d2e g     F .text	00000010 Chip_DAC_UpdateValue
10000010 g     O .data	00000008 periodo_normal
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000fc4 g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a0016b0 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000cac g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002b84 g     F .text	00000004 itoa
1a002838 g     F .text	000002d0 .hidden __udivmoddi4
1a000a64 g     F .text	00000020 _sbrk_r
1a0041e4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001abc g     F .text	0000004c Sct_EnablePwmFor
1a0009ec g     F .text	0000004e _read_r
1a0027f2 g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001bf0 g     F .text	00000018 uartRxReady
1a0045a8 g       .ARM.exidx	00000000 __exidx_start
100001c2 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1a000fb6 g     F .text	0000000e setStartMode
100001c3 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00456c g     O .text	00000004 _global_impure_ptr
1a002b0c g     F .text	00000048 __libc_init_array
1a002108 g     F .text	000000bc adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001a64 g     F .text	00000024 Sct_Init
1a000c28 g     F .text	00000030 Board_Init
1a0009ba  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100001cc g       .bss	00000000 _ebss
1a0010f0 g     F .text	0000002a Chip_ADC_EnableChannel
1a002000 g     F .text	00000040 TIMER0_IRQHandler
1a000930 g     F .text	00000088 Reset_Handler
1a001df4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001910 g     F .text	0000004a Chip_SCTPWM_SetRate
1a000d9c g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001334 g     F .text	0000004c Chip_Clock_EnableCrystal
100001c4 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a001032 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001092 g     F .text	00000020 Chip_ADC_SetStartMode
1a002040 g     F .text	00000040 TIMER1_IRQHandler
1a00450c g     O .text	00000020 __sf_fake_stderr
1a000d78 g     F .text	00000024 Chip_I2C_Init
1a003224 g     F .text	00000002 __retarget_lock_release_recursive
1a001d12 g     F .text	0000000a UART2_IRQHandler
1a002b54 g     F .text	00000030 __itoa
1a0014f0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0043fc g     O .text	000000e6 gpioPinsInit
1a001ce2 g     F .text	0000001a uartWriteByte
1a001988 g     F .text	00000012 Chip_SSP_SetClockRate
1a00346e g     F .text	00000024 __sfputs_r
1a0027fc g     F .text	0000000a GPIO2_IRQHandler
1a0030b8 g     F .text	0000000c __sfp_lock_acquire
1a003a80 g     F .text	00000000 memchr
1a001ea0 g     F .text	00000120 Timer_Init
1a0032f0 g     F .text	0000009c _free_r
1a0021c4 g     F .text	00000058 adcRead
1a001fc0 g     F .text	00000008 Timer_microsecondsToTicks
1a0015d8 g     F .text	00000026 Chip_Clock_GetBaseClock
10000158 g       .bss	00000000 _bss
1a00103a g     F .text	00000036 Chip_ADC_ReadStatus
1a0010b2 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002530 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00199a g     F .text	0000003e Chip_SSP_SetBitRate
1a001770 g     F .text	00000002 Chip_GPIO_Init
1a004210 g     O .text	00000004 OscRateIn
1a001c48 g     F .text	0000007c uartInit
100001cc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00173c g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a0009bc g     F .text	0000000a _close_r
1a002250 g     F .text	000001ac gpioInit
1a001dac g     F .text	00000024 pwmInit
1a000618 g     F .text	00000210 configuracion
1a002dd8 g     F .text	000000dc __swsetup_r
1a002b08  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003158 g     F .text	0000008c __sfp
1a0030dc g     F .text	0000000c __sinit_lock_release
1a0039f8 g     F .text	00000022 __sread
1a002468 g     F .text	0000001c USB0_IRQHandler
1a00167c g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003b20 g     F .text	0000000c __malloc_lock
1a000bf8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002fc0 g     F .text	00000078 _fflush_r
1a00452c g     O .text	00000020 __sf_fake_stdin
1a002cb4 g     F .text	00000080 __utoa
1a00139c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003222 g     F .text	00000002 __retarget_lock_acquire_recursive
10000158 g     O .bss	00000001 data
1a000300 g     F .text	0000013c modo_normal
1a002b88 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000828 g     F .text	00000104 main
1a003220 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a003a76 g     F .text	00000008 __sclose
1a001fc8 g     F .text	00000038 Timer_EnableCompareMatch
1a001aa4 g     F .text	00000018 Sct_SetDutyCycle
1a00338c g     F .text	000000b4 _malloc_r
1a001c08 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00160c g     F .text	0000003c Chip_Clock_EnableOpts
1a000c62 g     F .text	00000008 __stdio_getchar
10000004 g     O .data	00000004 d
1a000d24 g     F .text	0000000a Chip_DAC_DeInit
1a0013b8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001470 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001a10 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0024f8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0023fc g     F .text	0000006a gpioWrite
1a0009b8  w    F .text	00000002 _fini
1a002b98 g     F .text	00000030 iprintf
1a000fdc g     F .text	00000040 Chip_ADC_Init
100001bc g     O .bss	00000004 g_pUsbApi
1a000c74 g     F .text	00000038 Board_SetupMuxing
1a000e94 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001dd0 g     F .text	0000000c tickRead
1a000a3a g     F .text	00000028 _write_r
10000060 g     O .data	00000008 tickRateMS
1a00111a g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0026f8 g     F .text	000000ac ultrasonicSensorInit
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0036e4 g     F .text	000000ea _printf_common
100000f4 g     O .data	00000004 _impure_ptr
1a002eb4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001b08 g     F .text	00000044 dacInit
1a001a88 g     F .text	0000001c Sct_Uint8ToTicks
1a001c34 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100001cc g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0019d8 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000d3e g     F .text	00000018 Chip_DAC_SetBias
1a003226 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000bd4 g     F .text	00000024 Board_Debug_Init
1a000c58 g     F .text	0000000a __stdio_putchar
1a001070 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
10000158 g       .data	00000000 _edata
1a000d58 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100001c5 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0018cc g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a001774 g     F .text	00000158 Chip_SetupCoreClock
1a003a1a g     F .text	00000038 __swrite
1a0027e8 g     F .text	0000000a GPIO0_IRQHandler
1a003494 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a0031e4 g     F .text	0000003c _fwalk_reent
1a0016fc g     F .text	00000014 SystemCoreClockUpdate
1a001d34 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0030c4 g     F .text	0000000c __sfp_lock_release
1a00454c g     O .text	00000020 __sf_fake_stdout
1a002b08  w    F .text	00000002 .hidden __aeabi_idiv0
10000008 g     O .data	00000008 periodo_emergencia
1a00017e  w    F .text	00000002 BusFault_Handler
100001c6 g     O .bss	00000001 __lock___dd_hash_mutex
1a003270 g     F .text	00000080 __smakebuf_r
100001c7 g     O .bss	00000001 __lock___tz_mutex
1a0037d0 g     F .text	00000228 _printf_i
1a001648 g     F .text	00000034 Chip_Clock_Enable
1a001d1c g     F .text	0000000a UART3_IRQHandler
100001b4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002484 g     F .text	00000074 boardInit
100001b0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003494 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001ddc g     F .text	00000018 tickPowerSet
1a001580 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001a48 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100001c8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0030d0 g     F .text	0000000c __sinit_lock_acquire
1a000d18 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 31 09 00 1a 79 01 00 1a 7b 01 00 1a     ....1...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 5e 6f ff 53     }...........^o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	71 1e 00 1a                                         q...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	69 24 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     i$..............
1a000070:	01 20 00 1a 41 20 00 1a 81 20 00 1a c5 20 00 1a     . ..A ... ... ..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 13 1d 00 1a 1d 1d 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	e9 27 00 1a f3 27 00 1a fd 27 00 1a bb 01 00 1a     .'...'...'......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0045b0 	.word	0x1a0045b0
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000158 	.word	0x00000158
1a000120:	1a0045b0 	.word	0x1a0045b0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0045b0 	.word	0x1a0045b0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0045b0 	.word	0x1a0045b0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0045b0 	.word	0x1a0045b0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000158 	.word	0x10000158
1a000154:	00000074 	.word	0x00000074
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fcc4 	bl	1a001b4c <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <modo_normal>:
   // directamente sobre un microcontrolador y no es llamado por ningun
   // Sistema Operativo, como en el caso de un programa para PC.
   return 0;
}

void modo_normal(tick_t periodo_normal, tick_t periodo_emergencia, uint32_t d, uint16_t b){
1a000300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000304:	b092      	sub	sp, #72	; 0x48
1a000306:	4606      	mov	r6, r0
1a000308:	460f      	mov	r7, r1
1a00030a:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a00030c:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64

   delay_t delaySensor;
   delay_t delay1;

   delayConfig( &delay1, periodo_emergencia );
1a000310:	a806      	add	r0, sp, #24
1a000312:	f002 f90d 	bl	1a002530 <delayInit>
   delayConfig( &delaySensor, periodo_normal);
1a000316:	4632      	mov	r2, r6
1a000318:	463b      	mov	r3, r7
1a00031a:	a80c      	add	r0, sp, #48	; 0x30
1a00031c:	f002 f908 	bl	1a002530 <delayInit>

   delay_t verificar;
   delayConfig( &verificar, 1000 );
1a000320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000324:	2300      	movs	r3, #0
1a000326:	4668      	mov	r0, sp
1a000328:	f002 f902 	bl	1a002530 <delayInit>

   static char uartBuff[10];
   uint8_t data = 0;
1a00032c:	e004      	b.n	1a000338 <modo_normal+0x38>
               break;
            }
         }
      }
      else if (distanceInCms <= d ){
         if (delayRead(&verificar)){
1a00032e:	4668      	mov	r0, sp
1a000330:	f002 f90e 	bl	1a002550 <delayRead>
1a000334:	2800      	cmp	r0, #0
1a000336:	d152      	bne.n	1a0003de <modo_normal+0xde>
      distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
1a000338:	2100      	movs	r1, #0
1a00033a:	4608      	mov	r0, r1
1a00033c:	f002 fa32 	bl	1a0027a4 <ultrasonicSensorGetDistance>
1a000340:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a000344:	ee17 4a90 	vmov	r4, s15
      if (distanceInCms > d) {
1a000348:	42ac      	cmp	r4, r5
1a00034a:	d9f0      	bls.n	1a00032e <modo_normal+0x2e>
         if (delayRead(&delaySensor)){
1a00034c:	a80c      	add	r0, sp, #48	; 0x30
1a00034e:	f002 f8ff 	bl	1a002550 <delayRead>
1a000352:	2800      	cmp	r0, #0
1a000354:	d0f0      	beq.n	1a000338 <modo_normal+0x38>
            uartWriteString( UART_BLUETOOTH, "Distancia: " );
1a000356:	492e      	ldr	r1, [pc, #184]	; (1a000410 <modo_normal+0x110>)
1a000358:	2005      	movs	r0, #5
1a00035a:	f001 fccf 	bl	1a001cfc <uartWriteString>
            itoa( distanceInCms, uartBuff, 10 );
1a00035e:	4e2d      	ldr	r6, [pc, #180]	; (1a000414 <modo_normal+0x114>)
1a000360:	220a      	movs	r2, #10
1a000362:	4631      	mov	r1, r6
1a000364:	4620      	mov	r0, r4
1a000366:	f002 fc0d 	bl	1a002b84 <itoa>
            uartWriteString( UART_BLUETOOTH, uartBuff );
1a00036a:	4631      	mov	r1, r6
1a00036c:	2005      	movs	r0, #5
1a00036e:	f001 fcc5 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, " cm y un valor de tension : " );
1a000372:	4929      	ldr	r1, [pc, #164]	; (1a000418 <modo_normal+0x118>)
1a000374:	2005      	movs	r0, #5
1a000376:	f001 fcc1 	bl	1a001cfc <uartWriteString>
            muestra = adcRead( CH1 );
1a00037a:	2000      	movs	r0, #0
1a00037c:	f001 ff22 	bl	1a0021c4 <adcRead>
1a000380:	4f26      	ldr	r7, [pc, #152]	; (1a00041c <modo_normal+0x11c>)
1a000382:	8038      	strh	r0, [r7, #0]
            itoa( muestra, uartBuff, 10 );
1a000384:	220a      	movs	r2, #10
1a000386:	4631      	mov	r1, r6
1a000388:	f002 fbfc 	bl	1a002b84 <itoa>
            uartWriteString( UART_BLUETOOTH, uartBuff );
1a00038c:	4631      	mov	r1, r6
1a00038e:	2005      	movs	r0, #5
1a000390:	f001 fcb4 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, " \r\n" );
1a000394:	4922      	ldr	r1, [pc, #136]	; (1a000420 <modo_normal+0x120>)
1a000396:	2005      	movs	r0, #5
1a000398:	f001 fcb0 	bl	1a001cfc <uartWriteString>
            printf( "Distancia: %d cm y valor de tension: %d \r\n", distanceInCms, muestra);
1a00039c:	883a      	ldrh	r2, [r7, #0]
1a00039e:	4621      	mov	r1, r4
1a0003a0:	4820      	ldr	r0, [pc, #128]	; (1a000424 <modo_normal+0x124>)
1a0003a2:	f002 fbf9 	bl	1a002b98 <iprintf>
            if (muestra <= b){
1a0003a6:	883b      	ldrh	r3, [r7, #0]
1a0003a8:	4543      	cmp	r3, r8
1a0003aa:	d8c5      	bhi.n	1a000338 <modo_normal+0x38>
               printf( "Valor bajo de bateria.\r\n");
1a0003ac:	481e      	ldr	r0, [pc, #120]	; (1a000428 <modo_normal+0x128>)
1a0003ae:	f002 fc79 	bl	1a002ca4 <puts>
               muestra = adcRead( CH1 );
1a0003b2:	2000      	movs	r0, #0
1a0003b4:	f001 ff06 	bl	1a0021c4 <adcRead>
1a0003b8:	8038      	strh	r0, [r7, #0]
               uartWriteString( UART_BLUETOOTH, "Valor bajo de bateria de: " );
1a0003ba:	491c      	ldr	r1, [pc, #112]	; (1a00042c <modo_normal+0x12c>)
1a0003bc:	2005      	movs	r0, #5
1a0003be:	f001 fc9d 	bl	1a001cfc <uartWriteString>
               itoa( muestra, uartBuff, 10 );
1a0003c2:	220a      	movs	r2, #10
1a0003c4:	4631      	mov	r1, r6
1a0003c6:	8838      	ldrh	r0, [r7, #0]
1a0003c8:	f002 fbdc 	bl	1a002b84 <itoa>
               uartWriteString( UART_BLUETOOTH, uartBuff );
1a0003cc:	4631      	mov	r1, r6
1a0003ce:	2005      	movs	r0, #5
1a0003d0:	f001 fc94 	bl	1a001cfc <uartWriteString>
               uartWriteString( UART_BLUETOOTH, " \r\n" );
1a0003d4:	4912      	ldr	r1, [pc, #72]	; (1a000420 <modo_normal+0x120>)
1a0003d6:	2005      	movs	r0, #5
1a0003d8:	f001 fc90 	bl	1a001cfc <uartWriteString>
               break;
1a0003dc:	e015      	b.n	1a00040a <modo_normal+0x10a>
            printf( "Se detecto un obstaculo a una distancia: %d cm.\r\n", distanceInCms);
1a0003de:	4621      	mov	r1, r4
1a0003e0:	4813      	ldr	r0, [pc, #76]	; (1a000430 <modo_normal+0x130>)
1a0003e2:	f002 fbd9 	bl	1a002b98 <iprintf>
            uartWriteString( UART_BLUETOOTH, "Se detecto un obstaculo a una distancia: " );
1a0003e6:	4913      	ldr	r1, [pc, #76]	; (1a000434 <modo_normal+0x134>)
1a0003e8:	2005      	movs	r0, #5
1a0003ea:	f001 fc87 	bl	1a001cfc <uartWriteString>
            itoa( distanceInCms, uartBuff, 10 );
1a0003ee:	4d09      	ldr	r5, [pc, #36]	; (1a000414 <modo_normal+0x114>)
1a0003f0:	220a      	movs	r2, #10
1a0003f2:	4629      	mov	r1, r5
1a0003f4:	4620      	mov	r0, r4
1a0003f6:	f002 fbc5 	bl	1a002b84 <itoa>
            uartWriteString( UART_BLUETOOTH, uartBuff );
1a0003fa:	4629      	mov	r1, r5
1a0003fc:	2005      	movs	r0, #5
1a0003fe:	f001 fc7d 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, " cm \r\n" );
1a000402:	490d      	ldr	r1, [pc, #52]	; (1a000438 <modo_normal+0x138>)
1a000404:	2005      	movs	r0, #5
1a000406:	f001 fc79 	bl	1a001cfc <uartWriteString>
            break;
         }
      }
   }
}
1a00040a:	b012      	add	sp, #72	; 0x48
1a00040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000410:	1a0040ec 	.word	0x1a0040ec
1a000414:	1000015c 	.word	0x1000015c
1a000418:	1a0040f8 	.word	0x1a0040f8
1a00041c:	1000015a 	.word	0x1000015a
1a000420:	1a004118 	.word	0x1a004118
1a000424:	1a00411c 	.word	0x1a00411c
1a000428:	1a004148 	.word	0x1a004148
1a00042c:	1a004160 	.word	0x1a004160
1a000430:	1a00417c 	.word	0x1a00417c
1a000434:	1a0041b0 	.word	0x1a0041b0
1a000438:	1a0041dc 	.word	0x1a0041dc

1a00043c <modo_emergencia>:

void modo_emergencia(tick_t periodo_normal, tick_t periodo_emergencia, uint32_t d, uint16_t b){
1a00043c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000440:	b093      	sub	sp, #76	; 0x4c
1a000442:	4690      	mov	r8, r2
1a000444:	4699      	mov	r9, r3
1a000446:	9d1a      	ldr	r5, [sp, #104]	; 0x68
1a000448:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
   delay_t delaySensor;
   delayConfig( &delaySensor, periodo_normal);
1a00044c:	4602      	mov	r2, r0
1a00044e:	460b      	mov	r3, r1
1a000450:	a80c      	add	r0, sp, #48	; 0x30
1a000452:	f002 f86d 	bl	1a002530 <delayInit>

   delay_t delay1;

   delayConfig( &delay1, periodo_emergencia );
1a000456:	4642      	mov	r2, r8
1a000458:	464b      	mov	r3, r9
1a00045a:	a806      	add	r0, sp, #24
1a00045c:	f002 f868 	bl	1a002530 <delayInit>

   delay_t verificar2;
   delayConfig( &verificar2, 1000 );
1a000460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000464:	2300      	movs	r3, #0
1a000466:	4668      	mov	r0, sp
1a000468:	f002 f862 	bl	1a002530 <delayInit>

   static char uartBuff[10];
   uint8_t data = 0;
   uint32_t distanceInCms;
   int p = 5;
1a00046c:	e037      	b.n	1a0004de <modo_emergencia+0xa2>
   while(1){
      distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
      if (distanceInCms <= d || muestra <= 100){
         if (delayRead(&delay1)){
            if ((distanceInCms <= d) && (muestra <= b)){
               printf( "Alerta maxima \r\n");
1a00046e:	484b      	ldr	r0, [pc, #300]	; (1a00059c <modo_emergencia+0x160>)
1a000470:	f002 fc18 	bl	1a002ca4 <puts>
               uartWriteString( UART_BLUETOOTH, "Alerta maxima \r\n" );
1a000474:	494a      	ldr	r1, [pc, #296]	; (1a0005a0 <modo_emergencia+0x164>)
1a000476:	2005      	movs	r0, #5
1a000478:	f001 fc40 	bl	1a001cfc <uartWriteString>
               printf( "Obstaculo visto a una distancia: %d cm y valor bajo de bateria: %d \r\n", distanceInCms, muestra);
1a00047c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1a0005b8 <modo_emergencia+0x17c>
1a000480:	f8b8 2000 	ldrh.w	r2, [r8]
1a000484:	4621      	mov	r1, r4
1a000486:	4847      	ldr	r0, [pc, #284]	; (1a0005a4 <modo_emergencia+0x168>)
1a000488:	f002 fb86 	bl	1a002b98 <iprintf>
               uartWriteString( UART_BLUETOOTH, "Obstaculo visto a una distancia: " );
1a00048c:	4946      	ldr	r1, [pc, #280]	; (1a0005a8 <modo_emergencia+0x16c>)
1a00048e:	2005      	movs	r0, #5
1a000490:	f001 fc34 	bl	1a001cfc <uartWriteString>
               itoa( distanceInCms, uartBuff, 10 );
1a000494:	4f45      	ldr	r7, [pc, #276]	; (1a0005ac <modo_emergencia+0x170>)
1a000496:	220a      	movs	r2, #10
1a000498:	4639      	mov	r1, r7
1a00049a:	4620      	mov	r0, r4
1a00049c:	f002 fb72 	bl	1a002b84 <itoa>
               uartWriteString( UART_BLUETOOTH, uartBuff );
1a0004a0:	4639      	mov	r1, r7
1a0004a2:	2005      	movs	r0, #5
1a0004a4:	f001 fc2a 	bl	1a001cfc <uartWriteString>
               uartWriteString( UART_BLUETOOTH, " cm y un valor de tension bajo de : " );
1a0004a8:	4941      	ldr	r1, [pc, #260]	; (1a0005b0 <modo_emergencia+0x174>)
1a0004aa:	2005      	movs	r0, #5
1a0004ac:	f001 fc26 	bl	1a001cfc <uartWriteString>
               muestra = adcRead( CH1 );
1a0004b0:	2000      	movs	r0, #0
1a0004b2:	f001 fe87 	bl	1a0021c4 <adcRead>
1a0004b6:	f8a8 0000 	strh.w	r0, [r8]
               itoa( muestra, uartBuff, 10 );
1a0004ba:	220a      	movs	r2, #10
1a0004bc:	4639      	mov	r1, r7
1a0004be:	f002 fb61 	bl	1a002b84 <itoa>
               uartWriteString( UART_BLUETOOTH, uartBuff );
1a0004c2:	4639      	mov	r1, r7
1a0004c4:	2005      	movs	r0, #5
1a0004c6:	f001 fc19 	bl	1a001cfc <uartWriteString>
               uartWriteString( UART_BLUETOOTH, " \r\n" );
1a0004ca:	493a      	ldr	r1, [pc, #232]	; (1a0005b4 <modo_emergencia+0x178>)
1a0004cc:	2005      	movs	r0, #5
1a0004ce:	f001 fc15 	bl	1a001cfc <uartWriteString>
            }
            if (distanceInCms <= d){
1a0004d2:	42ac      	cmp	r4, r5
1a0004d4:	d91d      	bls.n	1a000512 <modo_emergencia+0xd6>
               uartWriteString( UART_BLUETOOTH, "Se detecto un obstaculo a una distancia: " );
               itoa( distanceInCms, uartBuff, 10 );
               uartWriteString( UART_BLUETOOTH, uartBuff );
               uartWriteString( UART_BLUETOOTH, " cm \r\n" );
            }
            if (muestra <= b){
1a0004d6:	4b38      	ldr	r3, [pc, #224]	; (1a0005b8 <modo_emergencia+0x17c>)
1a0004d8:	881b      	ldrh	r3, [r3, #0]
1a0004da:	42b3      	cmp	r3, r6
1a0004dc:	d930      	bls.n	1a000540 <modo_emergencia+0x104>
      distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
1a0004de:	2100      	movs	r1, #0
1a0004e0:	4608      	mov	r0, r1
1a0004e2:	f002 f95f 	bl	1a0027a4 <ultrasonicSensorGetDistance>
1a0004e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a0004ea:	ee17 4a90 	vmov	r4, s15
      if (distanceInCms <= d || muestra <= 100){
1a0004ee:	42ac      	cmp	r4, r5
1a0004f0:	d903      	bls.n	1a0004fa <modo_emergencia+0xbe>
1a0004f2:	4b31      	ldr	r3, [pc, #196]	; (1a0005b8 <modo_emergencia+0x17c>)
1a0004f4:	881b      	ldrh	r3, [r3, #0]
1a0004f6:	2b64      	cmp	r3, #100	; 0x64
1a0004f8:	d83e      	bhi.n	1a000578 <modo_emergencia+0x13c>
         if (delayRead(&delay1)){
1a0004fa:	a806      	add	r0, sp, #24
1a0004fc:	f002 f828 	bl	1a002550 <delayRead>
1a000500:	2800      	cmp	r0, #0
1a000502:	d0ec      	beq.n	1a0004de <modo_emergencia+0xa2>
            if ((distanceInCms <= d) && (muestra <= b)){
1a000504:	42ac      	cmp	r4, r5
1a000506:	d8e4      	bhi.n	1a0004d2 <modo_emergencia+0x96>
1a000508:	4b2b      	ldr	r3, [pc, #172]	; (1a0005b8 <modo_emergencia+0x17c>)
1a00050a:	881b      	ldrh	r3, [r3, #0]
1a00050c:	42b3      	cmp	r3, r6
1a00050e:	d8e0      	bhi.n	1a0004d2 <modo_emergencia+0x96>
1a000510:	e7ad      	b.n	1a00046e <modo_emergencia+0x32>
               printf( "Alerta de obstaculo a una distancia: %d cm \r\n", distanceInCms);
1a000512:	4621      	mov	r1, r4
1a000514:	4829      	ldr	r0, [pc, #164]	; (1a0005bc <modo_emergencia+0x180>)
1a000516:	f002 fb3f 	bl	1a002b98 <iprintf>
               uartWriteString( UART_BLUETOOTH, "Se detecto un obstaculo a una distancia: " );
1a00051a:	4929      	ldr	r1, [pc, #164]	; (1a0005c0 <modo_emergencia+0x184>)
1a00051c:	2005      	movs	r0, #5
1a00051e:	f001 fbed 	bl	1a001cfc <uartWriteString>
               itoa( distanceInCms, uartBuff, 10 );
1a000522:	4f22      	ldr	r7, [pc, #136]	; (1a0005ac <modo_emergencia+0x170>)
1a000524:	220a      	movs	r2, #10
1a000526:	4639      	mov	r1, r7
1a000528:	4620      	mov	r0, r4
1a00052a:	f002 fb2b 	bl	1a002b84 <itoa>
               uartWriteString( UART_BLUETOOTH, uartBuff );
1a00052e:	4639      	mov	r1, r7
1a000530:	2005      	movs	r0, #5
1a000532:	f001 fbe3 	bl	1a001cfc <uartWriteString>
               uartWriteString( UART_BLUETOOTH, " cm \r\n" );
1a000536:	4923      	ldr	r1, [pc, #140]	; (1a0005c4 <modo_emergencia+0x188>)
1a000538:	2005      	movs	r0, #5
1a00053a:	f001 fbdf 	bl	1a001cfc <uartWriteString>
1a00053e:	e7ca      	b.n	1a0004d6 <modo_emergencia+0x9a>
               muestra = adcRead( CH1 );
1a000540:	2000      	movs	r0, #0
1a000542:	f001 fe3f 	bl	1a0021c4 <adcRead>
1a000546:	4601      	mov	r1, r0
1a000548:	4f1b      	ldr	r7, [pc, #108]	; (1a0005b8 <modo_emergencia+0x17c>)
1a00054a:	8038      	strh	r0, [r7, #0]
               printf( "Alerta de bateria con un valor: %d \r\n", muestra);
1a00054c:	481e      	ldr	r0, [pc, #120]	; (1a0005c8 <modo_emergencia+0x18c>)
1a00054e:	f002 fb23 	bl	1a002b98 <iprintf>
               uartWriteString( UART_BLUETOOTH, "Valor bajo de bateria de: " );
1a000552:	491e      	ldr	r1, [pc, #120]	; (1a0005cc <modo_emergencia+0x190>)
1a000554:	2005      	movs	r0, #5
1a000556:	f001 fbd1 	bl	1a001cfc <uartWriteString>
               itoa( muestra, uartBuff, 10 );
1a00055a:	4c14      	ldr	r4, [pc, #80]	; (1a0005ac <modo_emergencia+0x170>)
1a00055c:	220a      	movs	r2, #10
1a00055e:	4621      	mov	r1, r4
1a000560:	8838      	ldrh	r0, [r7, #0]
1a000562:	f002 fb0f 	bl	1a002b84 <itoa>
               uartWriteString( UART_BLUETOOTH, uartBuff );
1a000566:	4621      	mov	r1, r4
1a000568:	2005      	movs	r0, #5
1a00056a:	f001 fbc7 	bl	1a001cfc <uartWriteString>
               uartWriteString( UART_BLUETOOTH, " \r\n" );
1a00056e:	4911      	ldr	r1, [pc, #68]	; (1a0005b4 <modo_emergencia+0x178>)
1a000570:	2005      	movs	r0, #5
1a000572:	f001 fbc3 	bl	1a001cfc <uartWriteString>
1a000576:	e7b2      	b.n	1a0004de <modo_emergencia+0xa2>
            }
         }
      }
      else if (distanceInCms > d && ( muestra > b )){
1a000578:	42b3      	cmp	r3, r6
1a00057a:	d9b0      	bls.n	1a0004de <modo_emergencia+0xa2>
         if (delayRead(&verificar2)){
1a00057c:	4668      	mov	r0, sp
1a00057e:	f001 ffe7 	bl	1a002550 <delayRead>
1a000582:	2800      	cmp	r0, #0
1a000584:	d0ab      	beq.n	1a0004de <modo_emergencia+0xa2>
            printf( "Saliendo del estado Emergencia.\r\n");
1a000586:	4812      	ldr	r0, [pc, #72]	; (1a0005d0 <modo_emergencia+0x194>)
1a000588:	f002 fb8c 	bl	1a002ca4 <puts>
            uartWriteString( UART_BLUETOOTH, "Saliendo del estado Emergencia. \r\n" );
1a00058c:	4911      	ldr	r1, [pc, #68]	; (1a0005d4 <modo_emergencia+0x198>)
1a00058e:	2005      	movs	r0, #5
1a000590:	f001 fbb4 	bl	1a001cfc <uartWriteString>
            break;
         }
      }
   }
}
1a000594:	b013      	add	sp, #76	; 0x4c
1a000596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00059a:	bf00      	nop
1a00059c:	1a003f94 	.word	0x1a003f94
1a0005a0:	1a003fa4 	.word	0x1a003fa4
1a0005a4:	1a003fb8 	.word	0x1a003fb8
1a0005a8:	1a004000 	.word	0x1a004000
1a0005ac:	10000168 	.word	0x10000168
1a0005b0:	1a004024 	.word	0x1a004024
1a0005b4:	1a004118 	.word	0x1a004118
1a0005b8:	1000015a 	.word	0x1000015a
1a0005bc:	1a00404c 	.word	0x1a00404c
1a0005c0:	1a0041b0 	.word	0x1a0041b0
1a0005c4:	1a0041dc 	.word	0x1a0041dc
1a0005c8:	1a00407c 	.word	0x1a00407c
1a0005cc:	1a004160 	.word	0x1a004160
1a0005d0:	1a0040a4 	.word	0x1a0040a4
1a0005d4:	1a0040c8 	.word	0x1a0040c8

1a0005d8 <inicializacion_sensor_ultrasonido>:
      delay(1000);
   }
}

void inicializacion_sensor_ultrasonido(uint32_t d)
{
1a0005d8:	b510      	push	{r4, lr}
1a0005da:	4604      	mov	r4, r0
   uint32_t distanceInCms;
   ultrasonicSensorConfig( ULTRASONIC_SENSOR_0, ULTRASONIC_SENSOR_ENABLE );
1a0005dc:	2100      	movs	r1, #0
1a0005de:	4608      	mov	r0, r1
1a0005e0:	f002 f88a 	bl	1a0026f8 <ultrasonicSensorInit>
   delay(100);
1a0005e4:	2064      	movs	r0, #100	; 0x64
1a0005e6:	2100      	movs	r1, #0
1a0005e8:	f001 ff86 	bl	1a0024f8 <delay>
   while(1){
      distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
1a0005ec:	2100      	movs	r1, #0
1a0005ee:	4608      	mov	r0, r1
1a0005f0:	f002 f8d8 	bl	1a0027a4 <ultrasonicSensorGetDistance>
1a0005f4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
      if (d < distanceInCms ){
1a0005f8:	ee10 3a10 	vmov	r3, s0
1a0005fc:	42a3      	cmp	r3, r4
1a0005fe:	d9f5      	bls.n	1a0005ec <inicializacion_sensor_ultrasonido+0x14>
         printf( "Inicializado sensor de ultrasonido\r\n" );
1a000600:	4803      	ldr	r0, [pc, #12]	; (1a000610 <inicializacion_sensor_ultrasonido+0x38>)
1a000602:	f002 fb4f 	bl	1a002ca4 <puts>
         uartWriteString( UART_BLUETOOTH, "Inicializado sensor de ultrasonido\r\n" );
1a000606:	4903      	ldr	r1, [pc, #12]	; (1a000614 <inicializacion_sensor_ultrasonido+0x3c>)
1a000608:	2005      	movs	r0, #5
1a00060a:	f001 fb77 	bl	1a001cfc <uartWriteString>
         break;
      }
   }
}
1a00060e:	bd10      	pop	{r4, pc}
1a000610:	1a003f48 	.word	0x1a003f48
1a000614:	1a003f6c 	.word	0x1a003f6c

1a000618 <configuracion>:
void hm10blePrintATCommands( int32_t uart )
{
   uartWriteString( uart, "AT+HELP?\r\n" );
}
void configuracion(void)
{
1a000618:	b510      	push	{r4, lr}
   uartWriteString( UART_PC, "Que desea configurar?\r\nA. Periodicidad de informacion del supervisor\r\nB. Sensor ultrasonido\r\nC. Sensor de bateria\r\nD. Regresar valores por defecto\r\nE. Salir\r\n" );
1a00061a:	496a      	ldr	r1, [pc, #424]	; (1a0007c4 <configuracion+0x1ac>)
1a00061c:	2003      	movs	r0, #3
1a00061e:	f001 fb6d 	bl	1a001cfc <uartWriteString>
   uartWriteString( UART_BLUETOOTH, "Que desea configurar?\r\nA. Periodicidad de informacion del supervisor\r\nB. Sensor ultrasonido\r\nC. Sensor de bateria\r\n" );
1a000622:	4969      	ldr	r1, [pc, #420]	; (1a0007c8 <configuracion+0x1b0>)
1a000624:	2005      	movs	r0, #5
1a000626:	f001 fb69 	bl	1a001cfc <uartWriteString>
1a00062a:	e008      	b.n	1a00063e <configuracion+0x26>
   while(1){
      if( uartReadByte( UART_BLUETOOTH, &data ) ) {
         if( data == 'a'){
            uartWriteString( UART_PC, "Introduzca periodo en seg del supervisor\r\n" );
1a00062c:	4c67      	ldr	r4, [pc, #412]	; (1a0007cc <configuracion+0x1b4>)
1a00062e:	4621      	mov	r1, r4
1a000630:	2003      	movs	r0, #3
1a000632:	f001 fb63 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Introduzca periodo en seg del supervisor\r\n" );
1a000636:	4621      	mov	r1, r4
1a000638:	2005      	movs	r0, #5
1a00063a:	f001 fb5f 	bl	1a001cfc <uartWriteString>
      if( uartReadByte( UART_BLUETOOTH, &data ) ) {
1a00063e:	4964      	ldr	r1, [pc, #400]	; (1a0007d0 <configuracion+0x1b8>)
1a000640:	2005      	movs	r0, #5
1a000642:	f001 fb3f 	bl	1a001cc4 <uartReadByte>
1a000646:	2800      	cmp	r0, #0
1a000648:	d0f9      	beq.n	1a00063e <configuracion+0x26>
         if( data == 'a'){
1a00064a:	4b61      	ldr	r3, [pc, #388]	; (1a0007d0 <configuracion+0x1b8>)
1a00064c:	781b      	ldrb	r3, [r3, #0]
1a00064e:	2b61      	cmp	r3, #97	; 0x61
1a000650:	d0ec      	beq.n	1a00062c <configuracion+0x14>
         }
         else if( data == 'j'){
1a000652:	2b6a      	cmp	r3, #106	; 0x6a
1a000654:	d017      	beq.n	1a000686 <configuracion+0x6e>
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 3 seg\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 3 seg\r\n" );
            periodo_normal = 3000;
         }
         else if( data == 'k'){
1a000656:	2b6b      	cmp	r3, #107	; 0x6b
1a000658:	d025      	beq.n	1a0006a6 <configuracion+0x8e>
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 4 seg\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 4 seg\r\n" );
            periodo_normal = 4000;
         }
         else if( data == 'l'){
1a00065a:	2b6c      	cmp	r3, #108	; 0x6c
1a00065c:	d033      	beq.n	1a0006c6 <configuracion+0xae>
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 5 seg\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 5 seg\r\n" );
            periodo_normal = 5000;
         }
         else if( data == 'b'){
1a00065e:	2b62      	cmp	r3, #98	; 0x62
1a000660:	d041      	beq.n	1a0006e6 <configuracion+0xce>
            uartWriteString( UART_PC, "Introduzca valor minimo en cm a detectar por el sensor\r\n" );
            uartWriteString( UART_BLUETOOTH, "Introduzca valor minimo en cm a detectar por el sensor\r\n" );
         }
         else if( data == 'm'){
1a000662:	2b6d      	cmp	r3, #109	; 0x6d
1a000664:	d049      	beq.n	1a0006fa <configuracion+0xe2>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar 4 cm\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar 4 cm\r\n" );
            d = 4;
         }
         else if( data == 'n'){
1a000666:	2b6e      	cmp	r3, #110	; 0x6e
1a000668:	d053      	beq.n	1a000712 <configuracion+0xfa>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar 7 cm\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar 7 cm\r\n" );
            d = 7;
         }
         else if( data == 'o'){
1a00066a:	2b6f      	cmp	r3, #111	; 0x6f
1a00066c:	d05d      	beq.n	1a00072a <configuracion+0x112>
         }
         else if( data == 'k'){
            uartWriteString( UART_PC, "Introduzca valor minimo de bateria a detectar\r\n" );
            uartWriteString( UART_BLUETOOTH, "Introduzca valor minimo de bateria a detectar\r\n" );
         }
         else if( data == 'e'){
1a00066e:	2b65      	cmp	r3, #101	; 0x65
1a000670:	d067      	beq.n	1a000742 <configuracion+0x12a>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 200\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 200\r\n" );
            b = 200;
         }
         else if( data == 'f'){
1a000672:	2b66      	cmp	r3, #102	; 0x66
1a000674:	d071      	beq.n	1a00075a <configuracion+0x142>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 300\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 300\r\n" );
            b = 300;
         }
         else if( data == 'g'){
1a000676:	2b67      	cmp	r3, #103	; 0x67
1a000678:	d07c      	beq.n	1a000774 <configuracion+0x15c>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 250\r\n" );
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 250\r\n" );
            b = 250;
         }
         else if( data == 'i'){
1a00067a:	2b69      	cmp	r3, #105	; 0x69
1a00067c:	f000 8086 	beq.w	1a00078c <configuracion+0x174>
            periodo_normal = 5000;
            periodo_emergencia = 3000;
            d = 10;
            b = 100;
         }
         else if (data == 's'){
1a000680:	2b73      	cmp	r3, #115	; 0x73
1a000682:	d1dc      	bne.n	1a00063e <configuracion+0x26>
            break;
         }
      }
   }
}
1a000684:	bd10      	pop	{r4, pc}
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 3 seg\r\n" );
1a000686:	4c53      	ldr	r4, [pc, #332]	; (1a0007d4 <configuracion+0x1bc>)
1a000688:	4621      	mov	r1, r4
1a00068a:	2003      	movs	r0, #3
1a00068c:	f001 fb36 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 3 seg\r\n" );
1a000690:	4621      	mov	r1, r4
1a000692:	2005      	movs	r0, #5
1a000694:	f001 fb32 	bl	1a001cfc <uartWriteString>
            periodo_normal = 3000;
1a000698:	4b4f      	ldr	r3, [pc, #316]	; (1a0007d8 <configuracion+0x1c0>)
1a00069a:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a00069e:	2100      	movs	r1, #0
1a0006a0:	e9c3 0100 	strd	r0, r1, [r3]
1a0006a4:	e7cb      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 4 seg\r\n" );
1a0006a6:	4c4d      	ldr	r4, [pc, #308]	; (1a0007dc <configuracion+0x1c4>)
1a0006a8:	4621      	mov	r1, r4
1a0006aa:	2003      	movs	r0, #3
1a0006ac:	f001 fb26 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 4 seg\r\n" );
1a0006b0:	4621      	mov	r1, r4
1a0006b2:	2005      	movs	r0, #5
1a0006b4:	f001 fb22 	bl	1a001cfc <uartWriteString>
            periodo_normal = 4000;
1a0006b8:	4b47      	ldr	r3, [pc, #284]	; (1a0007d8 <configuracion+0x1c0>)
1a0006ba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a0006be:	2100      	movs	r1, #0
1a0006c0:	e9c3 0100 	strd	r0, r1, [r3]
1a0006c4:	e7bb      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo timepo de periodo de envio de datos a 5 seg\r\n" );
1a0006c6:	4c46      	ldr	r4, [pc, #280]	; (1a0007e0 <configuracion+0x1c8>)
1a0006c8:	4621      	mov	r1, r4
1a0006ca:	2003      	movs	r0, #3
1a0006cc:	f001 fb16 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo timepo de periodo de envio de datos a 5 seg\r\n" );
1a0006d0:	4621      	mov	r1, r4
1a0006d2:	2005      	movs	r0, #5
1a0006d4:	f001 fb12 	bl	1a001cfc <uartWriteString>
            periodo_normal = 5000;
1a0006d8:	4b3f      	ldr	r3, [pc, #252]	; (1a0007d8 <configuracion+0x1c0>)
1a0006da:	f241 3088 	movw	r0, #5000	; 0x1388
1a0006de:	2100      	movs	r1, #0
1a0006e0:	e9c3 0100 	strd	r0, r1, [r3]
1a0006e4:	e7ab      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Introduzca valor minimo en cm a detectar por el sensor\r\n" );
1a0006e6:	4c3f      	ldr	r4, [pc, #252]	; (1a0007e4 <configuracion+0x1cc>)
1a0006e8:	4621      	mov	r1, r4
1a0006ea:	2003      	movs	r0, #3
1a0006ec:	f001 fb06 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Introduzca valor minimo en cm a detectar por el sensor\r\n" );
1a0006f0:	4621      	mov	r1, r4
1a0006f2:	2005      	movs	r0, #5
1a0006f4:	f001 fb02 	bl	1a001cfc <uartWriteString>
1a0006f8:	e7a1      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar 4 cm\r\n" );
1a0006fa:	493b      	ldr	r1, [pc, #236]	; (1a0007e8 <configuracion+0x1d0>)
1a0006fc:	2003      	movs	r0, #3
1a0006fe:	f001 fafd 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar 4 cm\r\n" );
1a000702:	493a      	ldr	r1, [pc, #232]	; (1a0007ec <configuracion+0x1d4>)
1a000704:	2005      	movs	r0, #5
1a000706:	f001 faf9 	bl	1a001cfc <uartWriteString>
            d = 4;
1a00070a:	4b39      	ldr	r3, [pc, #228]	; (1a0007f0 <configuracion+0x1d8>)
1a00070c:	2204      	movs	r2, #4
1a00070e:	601a      	str	r2, [r3, #0]
1a000710:	e795      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar 7 cm\r\n" );
1a000712:	4938      	ldr	r1, [pc, #224]	; (1a0007f4 <configuracion+0x1dc>)
1a000714:	2003      	movs	r0, #3
1a000716:	f001 faf1 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar 7 cm\r\n" );
1a00071a:	4937      	ldr	r1, [pc, #220]	; (1a0007f8 <configuracion+0x1e0>)
1a00071c:	2005      	movs	r0, #5
1a00071e:	f001 faed 	bl	1a001cfc <uartWriteString>
            d = 7;
1a000722:	4b33      	ldr	r3, [pc, #204]	; (1a0007f0 <configuracion+0x1d8>)
1a000724:	2207      	movs	r2, #7
1a000726:	601a      	str	r2, [r3, #0]
1a000728:	e789      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar 10 cm\r\n" );
1a00072a:	4934      	ldr	r1, [pc, #208]	; (1a0007fc <configuracion+0x1e4>)
1a00072c:	2003      	movs	r0, #3
1a00072e:	f001 fae5 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar 10 cm\r\n" );
1a000732:	4933      	ldr	r1, [pc, #204]	; (1a000800 <configuracion+0x1e8>)
1a000734:	2005      	movs	r0, #5
1a000736:	f001 fae1 	bl	1a001cfc <uartWriteString>
            d = 10;
1a00073a:	4b2d      	ldr	r3, [pc, #180]	; (1a0007f0 <configuracion+0x1d8>)
1a00073c:	220a      	movs	r2, #10
1a00073e:	601a      	str	r2, [r3, #0]
1a000740:	e77d      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 200\r\n" );
1a000742:	4930      	ldr	r1, [pc, #192]	; (1a000804 <configuracion+0x1ec>)
1a000744:	2003      	movs	r0, #3
1a000746:	f001 fad9 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 200\r\n" );
1a00074a:	492f      	ldr	r1, [pc, #188]	; (1a000808 <configuracion+0x1f0>)
1a00074c:	2005      	movs	r0, #5
1a00074e:	f001 fad5 	bl	1a001cfc <uartWriteString>
            b = 200;
1a000752:	4b2e      	ldr	r3, [pc, #184]	; (1a00080c <configuracion+0x1f4>)
1a000754:	22c8      	movs	r2, #200	; 0xc8
1a000756:	801a      	strh	r2, [r3, #0]
1a000758:	e771      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 300\r\n" );
1a00075a:	492d      	ldr	r1, [pc, #180]	; (1a000810 <configuracion+0x1f8>)
1a00075c:	2003      	movs	r0, #3
1a00075e:	f001 facd 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 300\r\n" );
1a000762:	492c      	ldr	r1, [pc, #176]	; (1a000814 <configuracion+0x1fc>)
1a000764:	2005      	movs	r0, #5
1a000766:	f001 fac9 	bl	1a001cfc <uartWriteString>
            b = 300;
1a00076a:	4b28      	ldr	r3, [pc, #160]	; (1a00080c <configuracion+0x1f4>)
1a00076c:	f44f 7296 	mov.w	r2, #300	; 0x12c
1a000770:	801a      	strh	r2, [r3, #0]
1a000772:	e764      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Nuevo valor minimo a detecar de 250\r\n" );
1a000774:	4928      	ldr	r1, [pc, #160]	; (1a000818 <configuracion+0x200>)
1a000776:	2003      	movs	r0, #3
1a000778:	f001 fac0 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Nuevo valor minimo a detectar de 250\r\n" );
1a00077c:	4927      	ldr	r1, [pc, #156]	; (1a00081c <configuracion+0x204>)
1a00077e:	2005      	movs	r0, #5
1a000780:	f001 fabc 	bl	1a001cfc <uartWriteString>
            b = 250;
1a000784:	4b21      	ldr	r3, [pc, #132]	; (1a00080c <configuracion+0x1f4>)
1a000786:	22fa      	movs	r2, #250	; 0xfa
1a000788:	801a      	strh	r2, [r3, #0]
1a00078a:	e758      	b.n	1a00063e <configuracion+0x26>
            uartWriteString( UART_PC, "Valores defauld del sistema\r\n" );
1a00078c:	4c24      	ldr	r4, [pc, #144]	; (1a000820 <configuracion+0x208>)
1a00078e:	4621      	mov	r1, r4
1a000790:	2003      	movs	r0, #3
1a000792:	f001 fab3 	bl	1a001cfc <uartWriteString>
            uartWriteString( UART_BLUETOOTH, "Valores defauld del sistema\r\n" );
1a000796:	4621      	mov	r1, r4
1a000798:	2005      	movs	r0, #5
1a00079a:	f001 faaf 	bl	1a001cfc <uartWriteString>
            periodo_normal = 5000;
1a00079e:	4b0e      	ldr	r3, [pc, #56]	; (1a0007d8 <configuracion+0x1c0>)
1a0007a0:	f241 3088 	movw	r0, #5000	; 0x1388
1a0007a4:	2100      	movs	r1, #0
1a0007a6:	e9c3 0100 	strd	r0, r1, [r3]
            periodo_emergencia = 3000;
1a0007aa:	4b1e      	ldr	r3, [pc, #120]	; (1a000824 <configuracion+0x20c>)
1a0007ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0007b0:	2100      	movs	r1, #0
1a0007b2:	e9c3 0100 	strd	r0, r1, [r3]
            d = 10;
1a0007b6:	4b0e      	ldr	r3, [pc, #56]	; (1a0007f0 <configuracion+0x1d8>)
1a0007b8:	220a      	movs	r2, #10
1a0007ba:	601a      	str	r2, [r3, #0]
            b = 100;
1a0007bc:	4b13      	ldr	r3, [pc, #76]	; (1a00080c <configuracion+0x1f4>)
1a0007be:	2264      	movs	r2, #100	; 0x64
1a0007c0:	801a      	strh	r2, [r3, #0]
1a0007c2:	e73c      	b.n	1a00063e <configuracion+0x26>
1a0007c4:	1a003b38 	.word	0x1a003b38
1a0007c8:	1a003bd8 	.word	0x1a003bd8
1a0007cc:	1a003c4c 	.word	0x1a003c4c
1a0007d0:	10000158 	.word	0x10000158
1a0007d4:	1a003c78 	.word	0x1a003c78
1a0007d8:	10000010 	.word	0x10000010
1a0007dc:	1a003cac 	.word	0x1a003cac
1a0007e0:	1a003ce0 	.word	0x1a003ce0
1a0007e4:	1a003d14 	.word	0x1a003d14
1a0007e8:	1a003d50 	.word	0x1a003d50
1a0007ec:	1a003d74 	.word	0x1a003d74
1a0007f0:	10000004 	.word	0x10000004
1a0007f4:	1a003d9c 	.word	0x1a003d9c
1a0007f8:	1a003dc0 	.word	0x1a003dc0
1a0007fc:	1a003de8 	.word	0x1a003de8
1a000800:	1a003e10 	.word	0x1a003e10
1a000804:	1a003e38 	.word	0x1a003e38
1a000808:	1a003e60 	.word	0x1a003e60
1a00080c:	10000000 	.word	0x10000000
1a000810:	1a003e88 	.word	0x1a003e88
1a000814:	1a003eb0 	.word	0x1a003eb0
1a000818:	1a003ed8 	.word	0x1a003ed8
1a00081c:	1a003f00 	.word	0x1a003f00
1a000820:	1a003f28 	.word	0x1a003f28
1a000824:	10000008 	.word	0x10000008

1a000828 <main>:
{
1a000828:	b530      	push	{r4, r5, lr}
1a00082a:	b091      	sub	sp, #68	; 0x44
   boardConfig();												            // Inicializar y configurar la plataforma
1a00082c:	f001 fe2a 	bl	1a002484 <boardInit>
   uartConfig( UART_PC, 115200 );									   // Inicializar UART_USB para conectar a la PC
1a000830:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000834:	2003      	movs	r0, #3
1a000836:	f001 fa07 	bl	1a001c48 <uartInit>
   uartConfig( UART_BLUETOOTH, 9600 );							      // Inicializar UART_232 para conectar al modulo bluetooth
1a00083a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a00083e:	2005      	movs	r0, #5
1a000840:	f001 fa02 	bl	1a001c48 <uartInit>
   pwmConfig( 0, PWM_ENABLE );
1a000844:	2100      	movs	r1, #0
1a000846:	4608      	mov	r0, r1
1a000848:	f001 fab0 	bl	1a001dac <pwmInit>
   pwmConfig( PWM7, PWM_ENABLE_OUTPUT );
1a00084c:	2102      	movs	r1, #2
1a00084e:	2007      	movs	r0, #7
1a000850:	f001 faac 	bl	1a001dac <pwmInit>
   adcConfig( ADC_ENABLE );
1a000854:	2000      	movs	r0, #0
1a000856:	f001 fc57 	bl	1a002108 <adcInit>
   dacConfig( DAC_ENABLE );
1a00085a:	2000      	movs	r0, #0
1a00085c:	f001 f954 	bl	1a001b08 <dacInit>
   delayConfig( &delay1, periodo_emergencia );
1a000860:	4b2e      	ldr	r3, [pc, #184]	; (1a00091c <main+0xf4>)
1a000862:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000866:	a804      	add	r0, sp, #16
1a000868:	f001 fe62 	bl	1a002530 <delayInit>
   delayConfig( &delaySensor, periodo_normal);
1a00086c:	4b2c      	ldr	r3, [pc, #176]	; (1a000920 <main+0xf8>)
1a00086e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000872:	a80a      	add	r0, sp, #40	; 0x28
1a000874:	f001 fe5c 	bl	1a002530 <delayInit>
   uint8_t data = 0;
1a000878:	2500      	movs	r5, #0
1a00087a:	f88d 500f 	strb.w	r5, [sp, #15]
   delay(100);
1a00087e:	2064      	movs	r0, #100	; 0x64
1a000880:	2100      	movs	r1, #0
1a000882:	f001 fe39 	bl	1a0024f8 <delay>
   inicializacion_sensor_ultrasonido(d);
1a000886:	4b27      	ldr	r3, [pc, #156]	; (1a000924 <main+0xfc>)
1a000888:	6818      	ldr	r0, [r3, #0]
1a00088a:	f7ff fea5 	bl	1a0005d8 <inicializacion_sensor_ultrasonido>
   bool_t flag2 =0 ;
1a00088e:	462c      	mov	r4, r5
1a000890:	e015      	b.n	1a0008be <main+0x96>
         uartWriteString( UART_BLUETOOTH, data );
1a000892:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000896:	2005      	movs	r0, #5
1a000898:	f001 fa30 	bl	1a001cfc <uartWriteString>
1a00089c:	e016      	b.n	1a0008cc <main+0xa4>
            modo_normal(periodo_normal, periodo_emergencia, d, b);
1a00089e:	4b22      	ldr	r3, [pc, #136]	; (1a000928 <main+0x100>)
1a0008a0:	881b      	ldrh	r3, [r3, #0]
1a0008a2:	9301      	str	r3, [sp, #4]
1a0008a4:	4b1f      	ldr	r3, [pc, #124]	; (1a000924 <main+0xfc>)
1a0008a6:	681b      	ldr	r3, [r3, #0]
1a0008a8:	9300      	str	r3, [sp, #0]
1a0008aa:	4b1c      	ldr	r3, [pc, #112]	; (1a00091c <main+0xf4>)
1a0008ac:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0008b0:	491b      	ldr	r1, [pc, #108]	; (1a000920 <main+0xf8>)
1a0008b2:	e9d1 0100 	ldrd	r0, r1, [r1]
1a0008b6:	f7ff fd23 	bl	1a000300 <modo_normal>
            flag2 = 0;
1a0008ba:	2400      	movs	r4, #0
            flag1 = 1;
1a0008bc:	2501      	movs	r5, #1
      if( uartReadByte( UART_PC, &data ) ) {
1a0008be:	f10d 010f 	add.w	r1, sp, #15
1a0008c2:	2003      	movs	r0, #3
1a0008c4:	f001 f9fe 	bl	1a001cc4 <uartReadByte>
1a0008c8:	2800      	cmp	r0, #0
1a0008ca:	d1e2      	bne.n	1a000892 <main+0x6a>
      if( uartReadByte( UART_BLUETOOTH, &data ) ) {
1a0008cc:	f10d 010f 	add.w	r1, sp, #15
1a0008d0:	2005      	movs	r0, #5
1a0008d2:	f001 f9f7 	bl	1a001cc4 <uartReadByte>
1a0008d6:	2800      	cmp	r0, #0
1a0008d8:	d0f1      	beq.n	1a0008be <main+0x96>
         if (data == 'w' || flag2 == 1){
1a0008da:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a0008de:	2b77      	cmp	r3, #119	; 0x77
1a0008e0:	d0dd      	beq.n	1a00089e <main+0x76>
1a0008e2:	2c00      	cmp	r4, #0
1a0008e4:	d1db      	bne.n	1a00089e <main+0x76>
         else if(data == 'e' || flag1 == 1){
1a0008e6:	2b65      	cmp	r3, #101	; 0x65
1a0008e8:	d006      	beq.n	1a0008f8 <main+0xd0>
1a0008ea:	2d01      	cmp	r5, #1
1a0008ec:	d004      	beq.n	1a0008f8 <main+0xd0>
         else if( data == 'c' ) {
1a0008ee:	2b63      	cmp	r3, #99	; 0x63
1a0008f0:	d1e5      	bne.n	1a0008be <main+0x96>
            configuracion();
1a0008f2:	f7ff fe91 	bl	1a000618 <configuracion>
1a0008f6:	e7e2      	b.n	1a0008be <main+0x96>
            modo_emergencia(periodo_normal, periodo_emergencia, d, b);
1a0008f8:	4b0b      	ldr	r3, [pc, #44]	; (1a000928 <main+0x100>)
1a0008fa:	881b      	ldrh	r3, [r3, #0]
1a0008fc:	9301      	str	r3, [sp, #4]
1a0008fe:	4b09      	ldr	r3, [pc, #36]	; (1a000924 <main+0xfc>)
1a000900:	681b      	ldr	r3, [r3, #0]
1a000902:	9300      	str	r3, [sp, #0]
1a000904:	4b05      	ldr	r3, [pc, #20]	; (1a00091c <main+0xf4>)
1a000906:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00090a:	4905      	ldr	r1, [pc, #20]	; (1a000920 <main+0xf8>)
1a00090c:	e9d1 0100 	ldrd	r0, r1, [r1]
1a000910:	f7ff fd94 	bl	1a00043c <modo_emergencia>
            flag1 = 0;
1a000914:	4625      	mov	r5, r4
            flag2 = 1;
1a000916:	2401      	movs	r4, #1
1a000918:	e7d1      	b.n	1a0008be <main+0x96>
1a00091a:	bf00      	nop
1a00091c:	10000008 	.word	0x10000008
1a000920:	10000010 	.word	0x10000010
1a000924:	10000004 	.word	0x10000004
1a000928:	10000000 	.word	0x10000000

1a00092c <initialise_monitor_handles>:
}
1a00092c:	4770      	bx	lr
1a00092e:	Address 0x000000001a00092e is out of bounds.


1a000930 <Reset_Handler>:
void Reset_Handler(void) {
1a000930:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000932:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000934:	4b19      	ldr	r3, [pc, #100]	; (1a00099c <Reset_Handler+0x6c>)
1a000936:	4a1a      	ldr	r2, [pc, #104]	; (1a0009a0 <Reset_Handler+0x70>)
1a000938:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00093a:	3304      	adds	r3, #4
1a00093c:	4a19      	ldr	r2, [pc, #100]	; (1a0009a4 <Reset_Handler+0x74>)
1a00093e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000940:	2300      	movs	r3, #0
1a000942:	e005      	b.n	1a000950 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000944:	4a18      	ldr	r2, [pc, #96]	; (1a0009a8 <Reset_Handler+0x78>)
1a000946:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00094a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00094e:	3301      	adds	r3, #1
1a000950:	2b07      	cmp	r3, #7
1a000952:	d9f7      	bls.n	1a000944 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000954:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000956:	4b15      	ldr	r3, [pc, #84]	; (1a0009ac <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000958:	e007      	b.n	1a00096a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00095a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00095e:	689a      	ldr	r2, [r3, #8]
1a000960:	6859      	ldr	r1, [r3, #4]
1a000962:	6818      	ldr	r0, [r3, #0]
1a000964:	f7ff fc11 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000968:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00096a:	4a11      	ldr	r2, [pc, #68]	; (1a0009b0 <Reset_Handler+0x80>)
1a00096c:	4293      	cmp	r3, r2
1a00096e:	d3f4      	bcc.n	1a00095a <Reset_Handler+0x2a>
1a000970:	e006      	b.n	1a000980 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000972:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000974:	6859      	ldr	r1, [r3, #4]
1a000976:	f854 0b08 	ldr.w	r0, [r4], #8
1a00097a:	f7ff fc15 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00097e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000980:	4a0c      	ldr	r2, [pc, #48]	; (1a0009b4 <Reset_Handler+0x84>)
1a000982:	4293      	cmp	r3, r2
1a000984:	d3f5      	bcc.n	1a000972 <Reset_Handler+0x42>
    SystemInit();
1a000986:	f001 f843 	bl	1a001a10 <SystemInit>
    __libc_init_array();
1a00098a:	f002 f8bf 	bl	1a002b0c <__libc_init_array>
    initialise_monitor_handles();
1a00098e:	f7ff ffcd 	bl	1a00092c <initialise_monitor_handles>
    main();
1a000992:	f7ff ff49 	bl	1a000828 <main>
        __asm__ volatile("wfi");
1a000996:	bf30      	wfi
1a000998:	e7fd      	b.n	1a000996 <Reset_Handler+0x66>
1a00099a:	bf00      	nop
1a00099c:	40053100 	.word	0x40053100
1a0009a0:	10df1000 	.word	0x10df1000
1a0009a4:	01dff7ff 	.word	0x01dff7ff
1a0009a8:	e000e280 	.word	0xe000e280
1a0009ac:	1a000114 	.word	0x1a000114
1a0009b0:	1a000150 	.word	0x1a000150
1a0009b4:	1a000178 	.word	0x1a000178

1a0009b8 <_fini>:
void _fini(void) {}
1a0009b8:	4770      	bx	lr

1a0009ba <_init>:
void _init(void) {}
1a0009ba:	4770      	bx	lr

1a0009bc <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0009bc:	2309      	movs	r3, #9
1a0009be:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009c4:	4770      	bx	lr

1a0009c6 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0009c6:	2358      	movs	r3, #88	; 0x58
1a0009c8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009ce:	4770      	bx	lr

1a0009d0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0009d0:	2902      	cmp	r1, #2
1a0009d2:	d904      	bls.n	1a0009de <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0009d4:	2309      	movs	r3, #9
1a0009d6:	6003      	str	r3, [r0, #0]
       return -1;
1a0009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009dc:	4770      	bx	lr
       return 1;
1a0009de:	2001      	movs	r0, #1
   }
}
1a0009e0:	4770      	bx	lr

1a0009e2 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0009e2:	2358      	movs	r3, #88	; 0x58
1a0009e4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009ea:	4770      	bx	lr

1a0009ec <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0009ec:	2902      	cmp	r1, #2
1a0009ee:	d81f      	bhi.n	1a000a30 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0009f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009f4:	461d      	mov	r5, r3
1a0009f6:	4617      	mov	r7, r2
1a0009f8:	4606      	mov	r6, r0
  size_t i = 0;
1a0009fa:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0009fc:	42ac      	cmp	r4, r5
1a0009fe:	d211      	bcs.n	1a000a24 <_read_r+0x38>
         int c = __stdio_getchar();
1a000a00:	f000 f92f 	bl	1a000c62 <__stdio_getchar>
         if( c != -1 ){
1a000a04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000a08:	d0f8      	beq.n	1a0009fc <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000a0a:	f104 0801 	add.w	r8, r4, #1
1a000a0e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000a10:	280d      	cmp	r0, #13
1a000a12:	d003      	beq.n	1a000a1c <_read_r+0x30>
1a000a14:	280a      	cmp	r0, #10
1a000a16:	d001      	beq.n	1a000a1c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000a18:	4644      	mov	r4, r8
1a000a1a:	e7ef      	b.n	1a0009fc <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000a1c:	f000 f921 	bl	1a000c62 <__stdio_getchar>
               return i;
1a000a20:	4640      	mov	r0, r8
1a000a22:	e003      	b.n	1a000a2c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000a24:	2313      	movs	r3, #19
1a000a26:	6033      	str	r3, [r6, #0]
      return -1;
1a000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000a30:	2313      	movs	r3, #19
1a000a32:	6003      	str	r3, [r0, #0]
      return -1;
1a000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000a38:	4770      	bx	lr

1a000a3a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000a3a:	2902      	cmp	r1, #2
1a000a3c:	d80c      	bhi.n	1a000a58 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000a3e:	b570      	push	{r4, r5, r6, lr}
1a000a40:	461d      	mov	r5, r3
1a000a42:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000a44:	2400      	movs	r4, #0
1a000a46:	42ac      	cmp	r4, r5
1a000a48:	d204      	bcs.n	1a000a54 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000a4a:	5d30      	ldrb	r0, [r6, r4]
1a000a4c:	f000 f904 	bl	1a000c58 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000a50:	3401      	adds	r4, #1
1a000a52:	e7f8      	b.n	1a000a46 <_write_r+0xc>
       return n;
1a000a54:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000a56:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000a58:	2313      	movs	r3, #19
1a000a5a:	6003      	str	r3, [r0, #0]
       return -1;
1a000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000a60:	4770      	bx	lr
1a000a62:	Address 0x000000001a000a62 is out of bounds.


1a000a64 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000a64:	4b05      	ldr	r3, [pc, #20]	; (1a000a7c <_sbrk_r+0x18>)
1a000a66:	681b      	ldr	r3, [r3, #0]
1a000a68:	b123      	cbz	r3, 1a000a74 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000a6a:	4b04      	ldr	r3, [pc, #16]	; (1a000a7c <_sbrk_r+0x18>)
1a000a6c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000a6e:	4401      	add	r1, r0
1a000a70:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000a72:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000a74:	4b01      	ldr	r3, [pc, #4]	; (1a000a7c <_sbrk_r+0x18>)
1a000a76:	4a02      	ldr	r2, [pc, #8]	; (1a000a80 <_sbrk_r+0x1c>)
1a000a78:	601a      	str	r2, [r3, #0]
1a000a7a:	e7f6      	b.n	1a000a6a <_sbrk_r+0x6>
1a000a7c:	10000174 	.word	0x10000174
1a000a80:	100001cc 	.word	0x100001cc

1a000a84 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a84:	2200      	movs	r2, #0
1a000a86:	2a05      	cmp	r2, #5
1a000a88:	d819      	bhi.n	1a000abe <Board_LED_Init+0x3a>
{
1a000a8a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000a8c:	490c      	ldr	r1, [pc, #48]	; (1a000ac0 <Board_LED_Init+0x3c>)
1a000a8e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000a92:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000a96:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000a98:	4b0a      	ldr	r3, [pc, #40]	; (1a000ac4 <Board_LED_Init+0x40>)
1a000a9a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000a9e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000aa2:	2001      	movs	r0, #1
1a000aa4:	40a0      	lsls	r0, r4
1a000aa6:	4301      	orrs	r1, r0
1a000aa8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000aac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000ab0:	2100      	movs	r1, #0
1a000ab2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000ab4:	3201      	adds	r2, #1
1a000ab6:	2a05      	cmp	r2, #5
1a000ab8:	d9e8      	bls.n	1a000a8c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000aba:	bc70      	pop	{r4, r5, r6}
1a000abc:	4770      	bx	lr
1a000abe:	4770      	bx	lr
1a000ac0:	1a0041f0 	.word	0x1a0041f0
1a000ac4:	400f4000 	.word	0x400f4000

1a000ac8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000ac8:	2300      	movs	r3, #0
1a000aca:	2b03      	cmp	r3, #3
1a000acc:	d816      	bhi.n	1a000afc <Board_TEC_Init+0x34>
{
1a000ace:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000ad0:	490b      	ldr	r1, [pc, #44]	; (1a000b00 <Board_TEC_Init+0x38>)
1a000ad2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000ad6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000ada:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000adc:	4c09      	ldr	r4, [pc, #36]	; (1a000b04 <Board_TEC_Init+0x3c>)
1a000ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000ae2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000ae6:	2001      	movs	r0, #1
1a000ae8:	40a8      	lsls	r0, r5
1a000aea:	ea21 0100 	bic.w	r1, r1, r0
1a000aee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000af2:	3301      	adds	r3, #1
1a000af4:	2b03      	cmp	r3, #3
1a000af6:	d9eb      	bls.n	1a000ad0 <Board_TEC_Init+0x8>
   }
}
1a000af8:	bc30      	pop	{r4, r5}
1a000afa:	4770      	bx	lr
1a000afc:	4770      	bx	lr
1a000afe:	bf00      	nop
1a000b00:	1a0041e8 	.word	0x1a0041e8
1a000b04:	400f4000 	.word	0x400f4000

1a000b08 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000b08:	2300      	movs	r3, #0
1a000b0a:	2b08      	cmp	r3, #8
1a000b0c:	d816      	bhi.n	1a000b3c <Board_GPIO_Init+0x34>
{
1a000b0e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000b10:	490b      	ldr	r1, [pc, #44]	; (1a000b40 <Board_GPIO_Init+0x38>)
1a000b12:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000b16:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000b1a:	784d      	ldrb	r5, [r1, #1]
1a000b1c:	4c09      	ldr	r4, [pc, #36]	; (1a000b44 <Board_GPIO_Init+0x3c>)
1a000b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000b22:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000b26:	2001      	movs	r0, #1
1a000b28:	40a8      	lsls	r0, r5
1a000b2a:	ea21 0100 	bic.w	r1, r1, r0
1a000b2e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000b32:	3301      	adds	r3, #1
1a000b34:	2b08      	cmp	r3, #8
1a000b36:	d9eb      	bls.n	1a000b10 <Board_GPIO_Init+0x8>
   }
}
1a000b38:	bc30      	pop	{r4, r5}
1a000b3a:	4770      	bx	lr
1a000b3c:	4770      	bx	lr
1a000b3e:	bf00      	nop
1a000b40:	1a0041fc 	.word	0x1a0041fc
1a000b44:	400f4000 	.word	0x400f4000

1a000b48 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000b48:	b510      	push	{r4, lr}
1a000b4a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000b4c:	4c08      	ldr	r4, [pc, #32]	; (1a000b70 <Board_ADC_Init+0x28>)
1a000b4e:	4669      	mov	r1, sp
1a000b50:	4620      	mov	r0, r4
1a000b52:	f000 fa43 	bl	1a000fdc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000b56:	4a07      	ldr	r2, [pc, #28]	; (1a000b74 <Board_ADC_Init+0x2c>)
1a000b58:	4669      	mov	r1, sp
1a000b5a:	4620      	mov	r0, r4
1a000b5c:	f000 faa9 	bl	1a0010b2 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000b60:	2200      	movs	r2, #0
1a000b62:	4669      	mov	r1, sp
1a000b64:	4620      	mov	r0, r4
1a000b66:	f000 fabd 	bl	1a0010e4 <Chip_ADC_SetResolution>
}
1a000b6a:	b002      	add	sp, #8
1a000b6c:	bd10      	pop	{r4, pc}
1a000b6e:	bf00      	nop
1a000b70:	400e3000 	.word	0x400e3000
1a000b74:	00061a80 	.word	0x00061a80

1a000b78 <Board_SPI_Init>:
{
1a000b78:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000b7a:	4c0b      	ldr	r4, [pc, #44]	; (1a000ba8 <Board_SPI_Init+0x30>)
1a000b7c:	4620      	mov	r0, r4
1a000b7e:	f000 ff2b 	bl	1a0019d8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000b82:	6863      	ldr	r3, [r4, #4]
1a000b84:	f023 0304 	bic.w	r3, r3, #4
1a000b88:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000b8a:	6823      	ldr	r3, [r4, #0]
1a000b8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b90:	f043 0307 	orr.w	r3, r3, #7
1a000b94:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000b96:	4905      	ldr	r1, [pc, #20]	; (1a000bac <Board_SPI_Init+0x34>)
1a000b98:	4620      	mov	r0, r4
1a000b9a:	f000 fefe 	bl	1a00199a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000b9e:	6863      	ldr	r3, [r4, #4]
1a000ba0:	f043 0302 	orr.w	r3, r3, #2
1a000ba4:	6063      	str	r3, [r4, #4]
}
1a000ba6:	bd10      	pop	{r4, pc}
1a000ba8:	400c5000 	.word	0x400c5000
1a000bac:	000186a0 	.word	0x000186a0

1a000bb0 <Board_I2C_Init>:
{
1a000bb0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000bb2:	2000      	movs	r0, #0
1a000bb4:	f000 f8e0 	bl	1a000d78 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000bb8:	4b04      	ldr	r3, [pc, #16]	; (1a000bcc <Board_I2C_Init+0x1c>)
1a000bba:	f640 0208 	movw	r2, #2056	; 0x808
1a000bbe:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000bc2:	4903      	ldr	r1, [pc, #12]	; (1a000bd0 <Board_I2C_Init+0x20>)
1a000bc4:	2000      	movs	r0, #0
1a000bc6:	f000 f8e9 	bl	1a000d9c <Chip_I2C_SetClockRate>
}
1a000bca:	bd08      	pop	{r3, pc}
1a000bcc:	40086000 	.word	0x40086000
1a000bd0:	000f4240 	.word	0x000f4240

1a000bd4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000bd4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000bd6:	4c07      	ldr	r4, [pc, #28]	; (1a000bf4 <Board_Debug_Init+0x20>)
1a000bd8:	4620      	mov	r0, r4
1a000bda:	f000 f911 	bl	1a000e00 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000bde:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000be2:	4620      	mov	r0, r4
1a000be4:	f000 f956 	bl	1a000e94 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000be8:	2303      	movs	r3, #3
1a000bea:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000bec:	2301      	movs	r3, #1
1a000bee:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000bf0:	bd10      	pop	{r4, pc}
1a000bf2:	bf00      	nop
1a000bf4:	400c1000 	.word	0x400c1000

1a000bf8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000bf8:	4b03      	ldr	r3, [pc, #12]	; (1a000c08 <Board_UARTPutChar+0x10>)
1a000bfa:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000bfc:	f013 0f20 	tst.w	r3, #32
1a000c00:	d0fa      	beq.n	1a000bf8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000c02:	4b01      	ldr	r3, [pc, #4]	; (1a000c08 <Board_UARTPutChar+0x10>)
1a000c04:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000c06:	4770      	bx	lr
1a000c08:	400c1000 	.word	0x400c1000

1a000c0c <Board_UARTGetChar>:
	return pUART->LSR;
1a000c0c:	4b05      	ldr	r3, [pc, #20]	; (1a000c24 <Board_UARTGetChar+0x18>)
1a000c0e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000c10:	f013 0f01 	tst.w	r3, #1
1a000c14:	d003      	beq.n	1a000c1e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000c16:	4b03      	ldr	r3, [pc, #12]	; (1a000c24 <Board_UARTGetChar+0x18>)
1a000c18:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000c1a:	b2c0      	uxtb	r0, r0
1a000c1c:	4770      	bx	lr
   }
   return EOF;
1a000c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c22:	4770      	bx	lr
1a000c24:	400c1000 	.word	0x400c1000

1a000c28 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000c28:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000c2a:	f7ff ffd3 	bl	1a000bd4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000c2e:	4809      	ldr	r0, [pc, #36]	; (1a000c54 <Board_Init+0x2c>)
1a000c30:	f000 fd9e 	bl	1a001770 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000c34:	f7ff ff68 	bl	1a000b08 <Board_GPIO_Init>
   Board_ADC_Init();
1a000c38:	f7ff ff86 	bl	1a000b48 <Board_ADC_Init>
   Board_SPI_Init();
1a000c3c:	f7ff ff9c 	bl	1a000b78 <Board_SPI_Init>
   Board_I2C_Init();
1a000c40:	f7ff ffb6 	bl	1a000bb0 <Board_I2C_Init>

   Board_LED_Init();
1a000c44:	f7ff ff1e 	bl	1a000a84 <Board_LED_Init>
   Board_TEC_Init();
1a000c48:	f7ff ff3e 	bl	1a000ac8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000c4c:	f000 fd56 	bl	1a0016fc <SystemCoreClockUpdate>
}
1a000c50:	bd08      	pop	{r3, pc}
1a000c52:	bf00      	nop
1a000c54:	400f4000 	.word	0x400f4000

1a000c58 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000c58:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000c5a:	b2c0      	uxtb	r0, r0
1a000c5c:	f7ff ffcc 	bl	1a000bf8 <Board_UARTPutChar>
}
1a000c60:	bd08      	pop	{r3, pc}

1a000c62 <__stdio_getchar>:

int __stdio_getchar()
{
1a000c62:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000c64:	f7ff ffd2 	bl	1a000c0c <Board_UARTGetChar>
}
1a000c68:	bd08      	pop	{r3, pc}

1a000c6a <__stdio_init>:

void __stdio_init()
{
1a000c6a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000c6c:	f7ff ffb2 	bl	1a000bd4 <Board_Debug_Init>
1a000c70:	bd08      	pop	{r3, pc}
1a000c72:	Address 0x000000001a000c72 is out of bounds.


1a000c74 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000c74:	2300      	movs	r3, #0
1a000c76:	2b1c      	cmp	r3, #28
1a000c78:	d812      	bhi.n	1a000ca0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000c7a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000c7c:	4a09      	ldr	r2, [pc, #36]	; (1a000ca4 <Board_SetupMuxing+0x30>)
1a000c7e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000c82:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000c86:	784a      	ldrb	r2, [r1, #1]
1a000c88:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000c8a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000c8e:	4906      	ldr	r1, [pc, #24]	; (1a000ca8 <Board_SetupMuxing+0x34>)
1a000c90:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000c94:	3301      	adds	r3, #1
1a000c96:	2b1c      	cmp	r3, #28
1a000c98:	d9f0      	bls.n	1a000c7c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000c9e:	4770      	bx	lr
1a000ca0:	4770      	bx	lr
1a000ca2:	bf00      	nop
1a000ca4:	1a004218 	.word	0x1a004218
1a000ca8:	40086000 	.word	0x40086000

1a000cac <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000cac:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000cae:	4a17      	ldr	r2, [pc, #92]	; (1a000d0c <Board_SetupClocking+0x60>)
1a000cb0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cb8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cbc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000cc0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cc8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000ccc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000cd0:	2201      	movs	r2, #1
1a000cd2:	490f      	ldr	r1, [pc, #60]	; (1a000d10 <Board_SetupClocking+0x64>)
1a000cd4:	2006      	movs	r0, #6
1a000cd6:	f000 fd4d 	bl	1a001774 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000cda:	2400      	movs	r4, #0
1a000cdc:	b14c      	cbz	r4, 1a000cf2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000cde:	4b0b      	ldr	r3, [pc, #44]	; (1a000d0c <Board_SetupClocking+0x60>)
1a000ce0:	685a      	ldr	r2, [r3, #4]
1a000ce2:	f022 020c 	bic.w	r2, r2, #12
1a000ce6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000ce8:	685a      	ldr	r2, [r3, #4]
1a000cea:	f042 0203 	orr.w	r2, r2, #3
1a000cee:	605a      	str	r2, [r3, #4]
}
1a000cf0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000cf2:	4808      	ldr	r0, [pc, #32]	; (1a000d14 <Board_SetupClocking+0x68>)
1a000cf4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000cf8:	2301      	movs	r3, #1
1a000cfa:	788a      	ldrb	r2, [r1, #2]
1a000cfc:	7849      	ldrb	r1, [r1, #1]
1a000cfe:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000d02:	f000 fc3d 	bl	1a001580 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000d06:	3401      	adds	r4, #1
1a000d08:	e7e8      	b.n	1a000cdc <Board_SetupClocking+0x30>
1a000d0a:	bf00      	nop
1a000d0c:	40043000 	.word	0x40043000
1a000d10:	0c28cb00 	.word	0x0c28cb00
1a000d14:	1a004214 	.word	0x1a004214

1a000d18 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d18:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000d1a:	f7ff ffab 	bl	1a000c74 <Board_SetupMuxing>
    Board_SetupClocking();
1a000d1e:	f7ff ffc5 	bl	1a000cac <Board_SetupClocking>
}
1a000d22:	bd08      	pop	{r3, pc}

1a000d24 <Chip_DAC_DeInit>:
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
}

/* Shutdown DAC peripheral */
void Chip_DAC_DeInit(LPC_DAC_T *pDAC)
{
1a000d24:	b508      	push	{r3, lr}
	Chip_Clock_Disable(CLK_APB3_DAC);
1a000d26:	2002      	movs	r0, #2
1a000d28:	f000 fca8 	bl	1a00167c <Chip_Clock_Disable>
}
1a000d2c:	bd08      	pop	{r3, pc}

1a000d2e <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a000d2e:	6803      	ldr	r3, [r0, #0]
1a000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a000d34:	0189      	lsls	r1, r1, #6
1a000d36:	b289      	uxth	r1, r1
1a000d38:	4319      	orrs	r1, r3
	/* Update value */
	pDAC->CR = tmp;
1a000d3a:	6001      	str	r1, [r0, #0]
}
1a000d3c:	4770      	bx	lr

1a000d3e <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a000d3e:	6803      	ldr	r3, [r0, #0]
1a000d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a000d44:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a000d46:	2901      	cmp	r1, #1
1a000d48:	d000      	beq.n	1a000d4c <Chip_DAC_SetBias+0xe>
		pDAC->CR |= DAC_BIAS_EN;
	}
}
1a000d4a:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a000d4c:	6803      	ldr	r3, [r0, #0]
1a000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000d52:	6003      	str	r3, [r0, #0]
}
1a000d54:	e7f9      	b.n	1a000d4a <Chip_DAC_SetBias+0xc>
1a000d56:	Address 0x000000001a000d56 is out of bounds.


1a000d58 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000d58:	2901      	cmp	r1, #1
1a000d5a:	d109      	bne.n	1a000d70 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000d5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d60:	0082      	lsls	r2, r0, #2
1a000d62:	4b04      	ldr	r3, [pc, #16]	; (1a000d74 <Chip_I2C_EventHandler+0x1c>)
1a000d64:	4413      	add	r3, r2
1a000d66:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000d68:	7d13      	ldrb	r3, [r2, #20]
1a000d6a:	b2db      	uxtb	r3, r3
1a000d6c:	2b04      	cmp	r3, #4
1a000d6e:	d0fb      	beq.n	1a000d68 <Chip_I2C_EventHandler+0x10>
}
1a000d70:	4770      	bx	lr
1a000d72:	bf00      	nop
1a000d74:	10000018 	.word	0x10000018

1a000d78 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000d78:	b570      	push	{r4, r5, r6, lr}
1a000d7a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000d7c:	4e06      	ldr	r6, [pc, #24]	; (1a000d98 <Chip_I2C_Init+0x20>)
1a000d7e:	00c4      	lsls	r4, r0, #3
1a000d80:	1a22      	subs	r2, r4, r0
1a000d82:	0093      	lsls	r3, r2, #2
1a000d84:	4433      	add	r3, r6
1a000d86:	8898      	ldrh	r0, [r3, #4]
1a000d88:	f000 fc5e 	bl	1a001648 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000d8c:	1b64      	subs	r4, r4, r5
1a000d8e:	00a3      	lsls	r3, r4, #2
1a000d90:	58f3      	ldr	r3, [r6, r3]
1a000d92:	226c      	movs	r2, #108	; 0x6c
1a000d94:	619a      	str	r2, [r3, #24]
}
1a000d96:	bd70      	pop	{r4, r5, r6, pc}
1a000d98:	10000018 	.word	0x10000018

1a000d9c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000da0:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000da2:	4e0b      	ldr	r6, [pc, #44]	; (1a000dd0 <Chip_I2C_SetClockRate+0x34>)
1a000da4:	00c5      	lsls	r5, r0, #3
1a000da6:	1a2b      	subs	r3, r5, r0
1a000da8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000dac:	eb06 0308 	add.w	r3, r6, r8
1a000db0:	8898      	ldrh	r0, [r3, #4]
1a000db2:	f000 fc7d 	bl	1a0016b0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000db6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000dba:	f856 3008 	ldr.w	r3, [r6, r8]
1a000dbe:	0842      	lsrs	r2, r0, #1
1a000dc0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000dc2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000dc6:	691a      	ldr	r2, [r3, #16]
1a000dc8:	1a80      	subs	r0, r0, r2
1a000dca:	6158      	str	r0, [r3, #20]
}
1a000dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000dd0:	10000018 	.word	0x10000018

1a000dd4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000dd4:	4b09      	ldr	r3, [pc, #36]	; (1a000dfc <Chip_UART_GetIndex+0x28>)
1a000dd6:	4298      	cmp	r0, r3
1a000dd8:	d009      	beq.n	1a000dee <Chip_UART_GetIndex+0x1a>
1a000dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000dde:	4298      	cmp	r0, r3
1a000de0:	d007      	beq.n	1a000df2 <Chip_UART_GetIndex+0x1e>
1a000de2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000de6:	4298      	cmp	r0, r3
1a000de8:	d005      	beq.n	1a000df6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000dea:	2000      	movs	r0, #0
1a000dec:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000dee:	2002      	movs	r0, #2
1a000df0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000df2:	2003      	movs	r0, #3
1a000df4:	4770      	bx	lr
			return 1;
1a000df6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000df8:	4770      	bx	lr
1a000dfa:	bf00      	nop
1a000dfc:	400c1000 	.word	0x400c1000

1a000e00 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e00:	b530      	push	{r4, r5, lr}
1a000e02:	b083      	sub	sp, #12
1a000e04:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e06:	f7ff ffe5 	bl	1a000dd4 <Chip_UART_GetIndex>
1a000e0a:	2301      	movs	r3, #1
1a000e0c:	461a      	mov	r2, r3
1a000e0e:	4619      	mov	r1, r3
1a000e10:	4d0e      	ldr	r5, [pc, #56]	; (1a000e4c <Chip_UART_Init+0x4c>)
1a000e12:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000e16:	f000 fbf9 	bl	1a00160c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000e1a:	2307      	movs	r3, #7
1a000e1c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000e1e:	2300      	movs	r3, #0
1a000e20:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000e22:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000e24:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000e26:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000e28:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000e2a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000e2c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000e2e:	4b08      	ldr	r3, [pc, #32]	; (1a000e50 <Chip_UART_Init+0x50>)
1a000e30:	429c      	cmp	r4, r3
1a000e32:	d006      	beq.n	1a000e42 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000e34:	2303      	movs	r3, #3
1a000e36:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000e38:	2310      	movs	r3, #16
1a000e3a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000e3c:	9b01      	ldr	r3, [sp, #4]
}
1a000e3e:	b003      	add	sp, #12
1a000e40:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000e42:	2300      	movs	r3, #0
1a000e44:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000e46:	69a3      	ldr	r3, [r4, #24]
1a000e48:	9301      	str	r3, [sp, #4]
1a000e4a:	e7f3      	b.n	1a000e34 <Chip_UART_Init+0x34>
1a000e4c:	1a004294 	.word	0x1a004294
1a000e50:	40082000 	.word	0x40082000

1a000e54 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000e54:	b538      	push	{r3, r4, r5, lr}
1a000e56:	4605      	mov	r5, r0
1a000e58:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000e5a:	f7ff ffbb 	bl	1a000dd4 <Chip_UART_GetIndex>
1a000e5e:	4b0c      	ldr	r3, [pc, #48]	; (1a000e90 <Chip_UART_SetBaud+0x3c>)
1a000e60:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000e64:	f000 fc24 	bl	1a0016b0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000e68:	0123      	lsls	r3, r4, #4
1a000e6a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a000e6e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000e70:	68ea      	ldr	r2, [r5, #12]
1a000e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000e76:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000e78:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000e7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000e7e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000e80:	68ea      	ldr	r2, [r5, #12]
1a000e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000e86:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000e88:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000e8c:	0900      	lsrs	r0, r0, #4
1a000e8e:	bd38      	pop	{r3, r4, r5, pc}
1a000e90:	1a00428c 	.word	0x1a00428c

1a000e94 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000e98:	b083      	sub	sp, #12
1a000e9a:	9001      	str	r0, [sp, #4]
1a000e9c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000e9e:	f7ff ff99 	bl	1a000dd4 <Chip_UART_GetIndex>
1a000ea2:	4b32      	ldr	r3, [pc, #200]	; (1a000f6c <Chip_UART_SetBaudFDR+0xd8>)
1a000ea4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ea8:	f000 fc02 	bl	1a0016b0 <Chip_Clock_GetRate>
1a000eac:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000eae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000eb2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000eb4:	f04f 0b00 	mov.w	fp, #0
1a000eb8:	46a2      	mov	sl, r4
1a000eba:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000ebc:	e02a      	b.n	1a000f14 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000ebe:	4242      	negs	r2, r0
				div ++;
1a000ec0:	1c4b      	adds	r3, r1, #1
1a000ec2:	e017      	b.n	1a000ef4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000ec4:	b30a      	cbz	r2, 1a000f0a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000ec6:	4617      	mov	r7, r2
			sd = d;
1a000ec8:	46ab      	mov	fp, r5
			sm = m;
1a000eca:	46a2      	mov	sl, r4
			sdiv = div;
1a000ecc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000ece:	3501      	adds	r5, #1
1a000ed0:	42ac      	cmp	r4, r5
1a000ed2:	d91e      	bls.n	1a000f12 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000ed4:	0933      	lsrs	r3, r6, #4
1a000ed6:	0730      	lsls	r0, r6, #28
1a000ed8:	fba4 0100 	umull	r0, r1, r4, r0
1a000edc:	fb04 1103 	mla	r1, r4, r3, r1
1a000ee0:	1962      	adds	r2, r4, r5
1a000ee2:	fb08 f202 	mul.w	r2, r8, r2
1a000ee6:	2300      	movs	r3, #0
1a000ee8:	f001 fc8e 	bl	1a002808 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000eec:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000eee:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000ef0:	2800      	cmp	r0, #0
1a000ef2:	dbe4      	blt.n	1a000ebe <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000ef4:	4297      	cmp	r7, r2
1a000ef6:	d3ea      	bcc.n	1a000ece <Chip_UART_SetBaudFDR+0x3a>
1a000ef8:	2b00      	cmp	r3, #0
1a000efa:	d0e8      	beq.n	1a000ece <Chip_UART_SetBaudFDR+0x3a>
1a000efc:	0c19      	lsrs	r1, r3, #16
1a000efe:	d1e6      	bne.n	1a000ece <Chip_UART_SetBaudFDR+0x3a>
1a000f00:	2b02      	cmp	r3, #2
1a000f02:	d8df      	bhi.n	1a000ec4 <Chip_UART_SetBaudFDR+0x30>
1a000f04:	2d00      	cmp	r5, #0
1a000f06:	d0dd      	beq.n	1a000ec4 <Chip_UART_SetBaudFDR+0x30>
1a000f08:	e7e1      	b.n	1a000ece <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000f0a:	4617      	mov	r7, r2
			sd = d;
1a000f0c:	46ab      	mov	fp, r5
			sm = m;
1a000f0e:	46a2      	mov	sl, r4
			sdiv = div;
1a000f10:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000f12:	3401      	adds	r4, #1
1a000f14:	b11f      	cbz	r7, 1a000f1e <Chip_UART_SetBaudFDR+0x8a>
1a000f16:	2c0f      	cmp	r4, #15
1a000f18:	d801      	bhi.n	1a000f1e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000f1a:	2500      	movs	r5, #0
1a000f1c:	e7d8      	b.n	1a000ed0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000f1e:	f1b9 0f00 	cmp.w	r9, #0
1a000f22:	d01e      	beq.n	1a000f62 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000f24:	9a01      	ldr	r2, [sp, #4]
1a000f26:	4611      	mov	r1, r2
1a000f28:	68d3      	ldr	r3, [r2, #12]
1a000f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f2e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000f30:	fa5f f389 	uxtb.w	r3, r9
1a000f34:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000f36:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000f3a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000f3c:	68d3      	ldr	r3, [r2, #12]
1a000f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f42:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000f44:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000f48:	b2db      	uxtb	r3, r3
1a000f4a:	f00b 020f 	and.w	r2, fp, #15
1a000f4e:	4313      	orrs	r3, r2
1a000f50:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000f52:	0933      	lsrs	r3, r6, #4
1a000f54:	fb0a f303 	mul.w	r3, sl, r3
1a000f58:	44da      	add	sl, fp
1a000f5a:	fb09 f90a 	mul.w	r9, r9, sl
1a000f5e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000f62:	4648      	mov	r0, r9
1a000f64:	b003      	add	sp, #12
1a000f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000f6a:	bf00      	nop
1a000f6c:	1a00428c 	.word	0x1a00428c

1a000f70 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000f70:	4b03      	ldr	r3, [pc, #12]	; (1a000f80 <Chip_ADC_GetClockIndex+0x10>)
1a000f72:	4298      	cmp	r0, r3
1a000f74:	d001      	beq.n	1a000f7a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000f76:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000f78:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000f7a:	2004      	movs	r0, #4
1a000f7c:	4770      	bx	lr
1a000f7e:	bf00      	nop
1a000f80:	400e4000 	.word	0x400e4000

1a000f84 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000f84:	b570      	push	{r4, r5, r6, lr}
1a000f86:	460d      	mov	r5, r1
1a000f88:	4614      	mov	r4, r2
1a000f8a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000f8c:	f7ff fff0 	bl	1a000f70 <Chip_ADC_GetClockIndex>
1a000f90:	f000 fb8e 	bl	1a0016b0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000f94:	b155      	cbz	r5, 1a000fac <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000f96:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000f9a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000f9e:	0064      	lsls	r4, r4, #1
1a000fa0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000fa4:	b2c0      	uxtb	r0, r0
1a000fa6:	3801      	subs	r0, #1
	return div;
}
1a000fa8:	b2c0      	uxtb	r0, r0
1a000faa:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000fac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000fb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000fb4:	e7f1      	b.n	1a000f9a <getClkDiv+0x16>

1a000fb6 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a000fb6:	6803      	ldr	r3, [r0, #0]
1a000fb8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000fbc:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a000fc0:	6001      	str	r1, [r0, #0]
}
1a000fc2:	4770      	bx	lr

1a000fc4 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a000fc4:	3104      	adds	r1, #4
1a000fc6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a000fca:	2b00      	cmp	r3, #0
1a000fcc:	da04      	bge.n	1a000fd8 <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a000fce:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000fd2:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a000fd4:	2001      	movs	r0, #1
1a000fd6:	4770      	bx	lr
		return ERROR;
1a000fd8:	2000      	movs	r0, #0
}
1a000fda:	4770      	bx	lr

1a000fdc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000fdc:	b538      	push	{r3, r4, r5, lr}
1a000fde:	4605      	mov	r5, r0
1a000fe0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000fe2:	f7ff ffc5 	bl	1a000f70 <Chip_ADC_GetClockIndex>
1a000fe6:	2301      	movs	r3, #1
1a000fe8:	461a      	mov	r2, r3
1a000fea:	4619      	mov	r1, r3
1a000fec:	f000 fb0e 	bl	1a00160c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ff0:	2100      	movs	r1, #0
1a000ff2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000ff4:	4a08      	ldr	r2, [pc, #32]	; (1a001018 <Chip_ADC_Init+0x3c>)
1a000ff6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ff8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000ffa:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000ffc:	230b      	movs	r3, #11
1a000ffe:	4628      	mov	r0, r5
1a001000:	f7ff ffc0 	bl	1a000f84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001004:	0200      	lsls	r0, r0, #8
1a001006:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00100a:	7920      	ldrb	r0, [r4, #4]
1a00100c:	0440      	lsls	r0, r0, #17
1a00100e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001012:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001014:	6028      	str	r0, [r5, #0]
}
1a001016:	bd38      	pop	{r3, r4, r5, pc}
1a001018:	00061a80 	.word	0x00061a80

1a00101c <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a00101c:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a00101e:	f44f 7280 	mov.w	r2, #256	; 0x100
1a001022:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a001024:	2200      	movs	r2, #0
1a001026:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a001028:	f7ff ffa2 	bl	1a000f70 <Chip_ADC_GetClockIndex>
1a00102c:	f000 fb26 	bl	1a00167c <Chip_Clock_Disable>
}
1a001030:	bd08      	pop	{r3, pc}

1a001032 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a001032:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a001034:	f7ff ffc6 	bl	1a000fc4 <readAdcVal>
}
1a001038:	bd08      	pop	{r3, pc}

1a00103a <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a00103a:	2a01      	cmp	r2, #1
1a00103c:	d00a      	beq.n	1a001054 <Chip_ADC_ReadStatus+0x1a>
1a00103e:	b11a      	cbz	r2, 1a001048 <Chip_ADC_ReadStatus+0xe>
1a001040:	2a02      	cmp	r2, #2
1a001042:	d00f      	beq.n	1a001064 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a001044:	2000      	movs	r0, #0
1a001046:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a001048:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00104a:	40c8      	lsrs	r0, r1
1a00104c:	f000 0001 	and.w	r0, r0, #1
1a001050:	b2c0      	uxtb	r0, r0
1a001052:	4770      	bx	lr
		channel += 8;
1a001054:	3108      	adds	r1, #8
1a001056:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a001058:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00105a:	40c8      	lsrs	r0, r1
1a00105c:	f000 0001 	and.w	r0, r0, #1
1a001060:	b2c0      	uxtb	r0, r0
1a001062:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a001064:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a001066:	0c1b      	lsrs	r3, r3, #16
1a001068:	bf14      	ite	ne
1a00106a:	2001      	movne	r0, #1
1a00106c:	2000      	moveq	r0, #0
}
1a00106e:	4770      	bx	lr

1a001070 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001070:	2a01      	cmp	r2, #1
1a001072:	d006      	beq.n	1a001082 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a001074:	68c3      	ldr	r3, [r0, #12]
1a001076:	2201      	movs	r2, #1
1a001078:	408a      	lsls	r2, r1
1a00107a:	ea23 0302 	bic.w	r3, r3, r2
1a00107e:	60c3      	str	r3, [r0, #12]
1a001080:	4770      	bx	lr
{
1a001082:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a001084:	68c4      	ldr	r4, [r0, #12]
1a001086:	408a      	lsls	r2, r1
1a001088:	4314      	orrs	r4, r2
1a00108a:	60c4      	str	r4, [r0, #12]
	}
}
1a00108c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001090:	4770      	bx	lr

1a001092 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a001092:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a001094:	2901      	cmp	r1, #1
1a001096:	d904      	bls.n	1a0010a2 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a001098:	b132      	cbz	r2, 1a0010a8 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a00109a:	6803      	ldr	r3, [r0, #0]
1a00109c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0010a0:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a0010a2:	f7ff ff88 	bl	1a000fb6 <setStartMode>
}
1a0010a6:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a0010a8:	6803      	ldr	r3, [r0, #0]
1a0010aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0010ae:	6003      	str	r3, [r0, #0]
1a0010b0:	e7f7      	b.n	1a0010a2 <Chip_ADC_SetStartMode+0x10>

1a0010b2 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0010b2:	b570      	push	{r4, r5, r6, lr}
1a0010b4:	4605      	mov	r5, r0
1a0010b6:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0010b8:	6804      	ldr	r4, [r0, #0]
1a0010ba:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0010be:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0010c2:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0010c4:	790b      	ldrb	r3, [r1, #4]
1a0010c6:	f1c3 030b 	rsb	r3, r3, #11
1a0010ca:	b2db      	uxtb	r3, r3
1a0010cc:	7949      	ldrb	r1, [r1, #5]
1a0010ce:	f7ff ff59 	bl	1a000f84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0010d2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0010d6:	7933      	ldrb	r3, [r6, #4]
1a0010d8:	045b      	lsls	r3, r3, #17
1a0010da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0010de:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0010e0:	602b      	str	r3, [r5, #0]
}
1a0010e2:	bd70      	pop	{r4, r5, r6, pc}

1a0010e4 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0010e4:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0010e6:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0010e8:	680a      	ldr	r2, [r1, #0]
1a0010ea:	f7ff ffe2 	bl	1a0010b2 <Chip_ADC_SetSampleRate>
}
1a0010ee:	bd08      	pop	{r3, pc}

1a0010f0 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0010f0:	2a01      	cmp	r2, #1
1a0010f2:	d00a      	beq.n	1a00110a <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a0010f4:	6802      	ldr	r2, [r0, #0]
1a0010f6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a0010fa:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a0010fc:	6803      	ldr	r3, [r0, #0]
1a0010fe:	2201      	movs	r2, #1
1a001100:	408a      	lsls	r2, r1
1a001102:	ea23 0302 	bic.w	r3, r3, r2
1a001106:	6003      	str	r3, [r0, #0]
1a001108:	4770      	bx	lr
{
1a00110a:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a00110c:	6804      	ldr	r4, [r0, #0]
1a00110e:	408a      	lsls	r2, r1
1a001110:	4314      	orrs	r4, r2
1a001112:	6004      	str	r4, [r0, #0]
	}
}
1a001114:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001118:	4770      	bx	lr

1a00111a <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00111a:	b538      	push	{r3, r4, r5, lr}
1a00111c:	4604      	mov	r4, r0
1a00111e:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a001120:	2100      	movs	r1, #0
1a001122:	f7ff ff48 	bl	1a000fb6 <setStartMode>
	
    if (NewState == DISABLE) {
1a001126:	b925      	cbnz	r5, 1a001132 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a001128:	6823      	ldr	r3, [r4, #0]
1a00112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00112e:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a001130:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a001132:	6823      	ldr	r3, [r4, #0]
1a001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a001138:	6023      	str	r3, [r4, #0]
}
1a00113a:	e7f9      	b.n	1a001130 <Chip_ADC_SetBurstCmd+0x16>

1a00113c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00113c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00113e:	680b      	ldr	r3, [r1, #0]
1a001140:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001144:	d002      	beq.n	1a00114c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00114a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00114c:	4607      	mov	r7, r0
1a00114e:	2501      	movs	r5, #1
1a001150:	e03a      	b.n	1a0011c8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001152:	694b      	ldr	r3, [r1, #20]
1a001154:	fb03 f302 	mul.w	r3, r3, r2
1a001158:	fbb3 f3f5 	udiv	r3, r3, r5
1a00115c:	e01c      	b.n	1a001198 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00115e:	461c      	mov	r4, r3
	if (val < 0)
1a001160:	ebb0 0c04 	subs.w	ip, r0, r4
1a001164:	d427      	bmi.n	1a0011b6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001166:	4567      	cmp	r7, ip
1a001168:	d906      	bls.n	1a001178 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00116a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a00116c:	1c77      	adds	r7, r6, #1
1a00116e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001170:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001172:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001174:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001176:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001178:	3201      	adds	r2, #1
1a00117a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00117e:	dc1d      	bgt.n	1a0011bc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001180:	680c      	ldr	r4, [r1, #0]
1a001182:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001186:	d0e4      	beq.n	1a001152 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001188:	1c73      	adds	r3, r6, #1
1a00118a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00118e:	694b      	ldr	r3, [r1, #20]
1a001190:	fb03 f30c 	mul.w	r3, r3, ip
1a001194:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001198:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0011d4 <pll_calc_divs+0x98>
1a00119c:	4563      	cmp	r3, ip
1a00119e:	d9eb      	bls.n	1a001178 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0011a0:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0011d8 <pll_calc_divs+0x9c>
1a0011a4:	4563      	cmp	r3, ip
1a0011a6:	d809      	bhi.n	1a0011bc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0011a8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0011ac:	d1d7      	bne.n	1a00115e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0011ae:	1c74      	adds	r4, r6, #1
1a0011b0:	fa23 f404 	lsr.w	r4, r3, r4
1a0011b4:	e7d4      	b.n	1a001160 <pll_calc_divs+0x24>
		return -val;
1a0011b6:	f1cc 0c00 	rsb	ip, ip, #0
1a0011ba:	e7d4      	b.n	1a001166 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0011bc:	3601      	adds	r6, #1
1a0011be:	2e03      	cmp	r6, #3
1a0011c0:	dc01      	bgt.n	1a0011c6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0011c2:	2201      	movs	r2, #1
1a0011c4:	e7d9      	b.n	1a00117a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0011c6:	3501      	adds	r5, #1
1a0011c8:	2d04      	cmp	r5, #4
1a0011ca:	dc01      	bgt.n	1a0011d0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0011cc:	2600      	movs	r6, #0
1a0011ce:	e7f6      	b.n	1a0011be <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0011d0:	bcf0      	pop	{r4, r5, r6, r7}
1a0011d2:	4770      	bx	lr
1a0011d4:	094c5eff 	.word	0x094c5eff
1a0011d8:	1312d000 	.word	0x1312d000

1a0011dc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011de:	b099      	sub	sp, #100	; 0x64
1a0011e0:	4605      	mov	r5, r0
1a0011e2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0011e4:	225c      	movs	r2, #92	; 0x5c
1a0011e6:	2100      	movs	r1, #0
1a0011e8:	a801      	add	r0, sp, #4
1a0011ea:	f001 fccd 	bl	1a002b88 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0011ee:	2380      	movs	r3, #128	; 0x80
1a0011f0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0011f2:	6963      	ldr	r3, [r4, #20]
1a0011f4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0011f6:	7923      	ldrb	r3, [r4, #4]
1a0011f8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0011fc:	4669      	mov	r1, sp
1a0011fe:	4628      	mov	r0, r5
1a001200:	f7ff ff9c 	bl	1a00113c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001204:	9b06      	ldr	r3, [sp, #24]
1a001206:	42ab      	cmp	r3, r5
1a001208:	d027      	beq.n	1a00125a <pll_get_frac+0x7e>
	if (val < 0)
1a00120a:	1aeb      	subs	r3, r5, r3
1a00120c:	d42e      	bmi.n	1a00126c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00120e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001210:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001216:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001218:	6963      	ldr	r3, [r4, #20]
1a00121a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00121c:	7923      	ldrb	r3, [r4, #4]
1a00121e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001222:	a910      	add	r1, sp, #64	; 0x40
1a001224:	4628      	mov	r0, r5
1a001226:	f7ff ff89 	bl	1a00113c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00122a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00122c:	42ab      	cmp	r3, r5
1a00122e:	d01f      	beq.n	1a001270 <pll_get_frac+0x94>
	if (val < 0)
1a001230:	1aeb      	subs	r3, r5, r3
1a001232:	d425      	bmi.n	1a001280 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001234:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001236:	4b2b      	ldr	r3, [pc, #172]	; (1a0012e4 <pll_get_frac+0x108>)
1a001238:	429d      	cmp	r5, r3
1a00123a:	d923      	bls.n	1a001284 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00123c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00123e:	1aed      	subs	r5, r5, r3
1a001240:	d433      	bmi.n	1a0012aa <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001242:	42ae      	cmp	r6, r5
1a001244:	dc3b      	bgt.n	1a0012be <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001246:	42be      	cmp	r6, r7
1a001248:	dc31      	bgt.n	1a0012ae <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00124a:	466d      	mov	r5, sp
1a00124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001250:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001258:	e006      	b.n	1a001268 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00125a:	466d      	mov	r5, sp
1a00125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001260:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001268:	b019      	add	sp, #100	; 0x64
1a00126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00126c:	425b      	negs	r3, r3
1a00126e:	e7ce      	b.n	1a00120e <pll_get_frac+0x32>
		*ppll = pll[2];
1a001270:	ad10      	add	r5, sp, #64	; 0x40
1a001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001276:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00127a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00127e:	e7f3      	b.n	1a001268 <pll_get_frac+0x8c>
		return -val;
1a001280:	425b      	negs	r3, r3
1a001282:	e7d7      	b.n	1a001234 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001284:	2340      	movs	r3, #64	; 0x40
1a001286:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001288:	6963      	ldr	r3, [r4, #20]
1a00128a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00128c:	a908      	add	r1, sp, #32
1a00128e:	4628      	mov	r0, r5
1a001290:	f7ff ff54 	bl	1a00113c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001296:	42ab      	cmp	r3, r5
1a001298:	d1d0      	bne.n	1a00123c <pll_get_frac+0x60>
			*ppll = pll[1];
1a00129a:	ad08      	add	r5, sp, #32
1a00129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0012a8:	e7de      	b.n	1a001268 <pll_get_frac+0x8c>
		return -val;
1a0012aa:	426d      	negs	r5, r5
1a0012ac:	e7c9      	b.n	1a001242 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0012ae:	ad10      	add	r5, sp, #64	; 0x40
1a0012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0012bc:	e7d4      	b.n	1a001268 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0012be:	42af      	cmp	r7, r5
1a0012c0:	db07      	blt.n	1a0012d2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0012c2:	ad08      	add	r5, sp, #32
1a0012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0012d0:	e7ca      	b.n	1a001268 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0012d2:	ad10      	add	r5, sp, #64	; 0x40
1a0012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0012e0:	e7c2      	b.n	1a001268 <pll_get_frac+0x8c>
1a0012e2:	bf00      	nop
1a0012e4:	068e7780 	.word	0x068e7780

1a0012e8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0012e8:	b430      	push	{r4, r5}
1a0012ea:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0012ec:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0012ee:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0012f0:	e000      	b.n	1a0012f4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0012f2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0012f4:	281c      	cmp	r0, #28
1a0012f6:	d118      	bne.n	1a00132a <Chip_Clock_FindBaseClock+0x42>
1a0012f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0012fc:	0051      	lsls	r1, r2, #1
1a0012fe:	4a0c      	ldr	r2, [pc, #48]	; (1a001330 <Chip_Clock_FindBaseClock+0x48>)
1a001300:	440a      	add	r2, r1
1a001302:	7914      	ldrb	r4, [r2, #4]
1a001304:	4284      	cmp	r4, r0
1a001306:	d010      	beq.n	1a00132a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001308:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00130c:	004a      	lsls	r2, r1, #1
1a00130e:	4908      	ldr	r1, [pc, #32]	; (1a001330 <Chip_Clock_FindBaseClock+0x48>)
1a001310:	5a8a      	ldrh	r2, [r1, r2]
1a001312:	42aa      	cmp	r2, r5
1a001314:	d8ed      	bhi.n	1a0012f2 <Chip_Clock_FindBaseClock+0xa>
1a001316:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00131a:	0051      	lsls	r1, r2, #1
1a00131c:	4a04      	ldr	r2, [pc, #16]	; (1a001330 <Chip_Clock_FindBaseClock+0x48>)
1a00131e:	440a      	add	r2, r1
1a001320:	8852      	ldrh	r2, [r2, #2]
1a001322:	42aa      	cmp	r2, r5
1a001324:	d3e5      	bcc.n	1a0012f2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001326:	4620      	mov	r0, r4
1a001328:	e7e4      	b.n	1a0012f4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00132a:	bc30      	pop	{r4, r5}
1a00132c:	4770      	bx	lr
1a00132e:	bf00      	nop
1a001330:	1a0042a8 	.word	0x1a0042a8

1a001334 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001334:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00133a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00133c:	4a0d      	ldr	r2, [pc, #52]	; (1a001374 <Chip_Clock_EnableCrystal+0x40>)
1a00133e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001340:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001344:	6992      	ldr	r2, [r2, #24]
1a001346:	428a      	cmp	r2, r1
1a001348:	d001      	beq.n	1a00134e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00134a:	4a0a      	ldr	r2, [pc, #40]	; (1a001374 <Chip_Clock_EnableCrystal+0x40>)
1a00134c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00134e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001352:	4a09      	ldr	r2, [pc, #36]	; (1a001378 <Chip_Clock_EnableCrystal+0x44>)
1a001354:	6811      	ldr	r1, [r2, #0]
1a001356:	4a09      	ldr	r2, [pc, #36]	; (1a00137c <Chip_Clock_EnableCrystal+0x48>)
1a001358:	4291      	cmp	r1, r2
1a00135a:	d901      	bls.n	1a001360 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00135c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001360:	4a04      	ldr	r2, [pc, #16]	; (1a001374 <Chip_Clock_EnableCrystal+0x40>)
1a001362:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001364:	9b01      	ldr	r3, [sp, #4]
1a001366:	1e5a      	subs	r2, r3, #1
1a001368:	9201      	str	r2, [sp, #4]
1a00136a:	2b00      	cmp	r3, #0
1a00136c:	d1fa      	bne.n	1a001364 <Chip_Clock_EnableCrystal+0x30>
}
1a00136e:	b002      	add	sp, #8
1a001370:	4770      	bx	lr
1a001372:	bf00      	nop
1a001374:	40050000 	.word	0x40050000
1a001378:	1a004210 	.word	0x1a004210
1a00137c:	01312cff 	.word	0x01312cff

1a001380 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001380:	3012      	adds	r0, #18
1a001382:	4b05      	ldr	r3, [pc, #20]	; (1a001398 <Chip_Clock_GetDividerSource+0x18>)
1a001384:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001388:	f010 0f01 	tst.w	r0, #1
1a00138c:	d102      	bne.n	1a001394 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00138e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001392:	4770      	bx	lr
		return CLKINPUT_PD;
1a001394:	2011      	movs	r0, #17
}
1a001396:	4770      	bx	lr
1a001398:	40050000 	.word	0x40050000

1a00139c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00139c:	f100 0212 	add.w	r2, r0, #18
1a0013a0:	4b03      	ldr	r3, [pc, #12]	; (1a0013b0 <Chip_Clock_GetDividerDivisor+0x14>)
1a0013a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0013a6:	4b03      	ldr	r3, [pc, #12]	; (1a0013b4 <Chip_Clock_GetDividerDivisor+0x18>)
1a0013a8:	5c18      	ldrb	r0, [r3, r0]
}
1a0013aa:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0013ae:	4770      	bx	lr
1a0013b0:	40050000 	.word	0x40050000
1a0013b4:	1a0042a0 	.word	0x1a0042a0

1a0013b8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0013b8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0013ba:	2810      	cmp	r0, #16
1a0013bc:	d80a      	bhi.n	1a0013d4 <Chip_Clock_GetClockInputHz+0x1c>
1a0013be:	e8df f000 	tbb	[pc, r0]
1a0013c2:	0b44      	.short	0x0b44
1a0013c4:	0921180d 	.word	0x0921180d
1a0013c8:	2d2a2724 	.word	0x2d2a2724
1a0013cc:	34300909 	.word	0x34300909
1a0013d0:	3c38      	.short	0x3c38
1a0013d2:	40          	.byte	0x40
1a0013d3:	00          	.byte	0x00
	uint32_t rate = 0;
1a0013d4:	2000      	movs	r0, #0
1a0013d6:	e03a      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0013d8:	481e      	ldr	r0, [pc, #120]	; (1a001454 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0013da:	e038      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0013dc:	4b1e      	ldr	r3, [pc, #120]	; (1a001458 <Chip_Clock_GetClockInputHz+0xa0>)
1a0013de:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0013e2:	f003 0307 	and.w	r3, r3, #7
1a0013e6:	2b04      	cmp	r3, #4
1a0013e8:	d001      	beq.n	1a0013ee <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0013ea:	481c      	ldr	r0, [pc, #112]	; (1a00145c <Chip_Clock_GetClockInputHz+0xa4>)
1a0013ec:	e02f      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0013ee:	2000      	movs	r0, #0
1a0013f0:	e02d      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0013f2:	4b19      	ldr	r3, [pc, #100]	; (1a001458 <Chip_Clock_GetClockInputHz+0xa0>)
1a0013f4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0013f8:	f003 0307 	and.w	r3, r3, #7
1a0013fc:	2b04      	cmp	r3, #4
1a0013fe:	d027      	beq.n	1a001450 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001400:	4816      	ldr	r0, [pc, #88]	; (1a00145c <Chip_Clock_GetClockInputHz+0xa4>)
1a001402:	e024      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001404:	4b16      	ldr	r3, [pc, #88]	; (1a001460 <Chip_Clock_GetClockInputHz+0xa8>)
1a001406:	6818      	ldr	r0, [r3, #0]
		break;
1a001408:	e021      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00140a:	4b16      	ldr	r3, [pc, #88]	; (1a001464 <Chip_Clock_GetClockInputHz+0xac>)
1a00140c:	6818      	ldr	r0, [r3, #0]
		break;
1a00140e:	e01e      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001410:	4b15      	ldr	r3, [pc, #84]	; (1a001468 <Chip_Clock_GetClockInputHz+0xb0>)
1a001412:	6818      	ldr	r0, [r3, #0]
		break;
1a001414:	e01b      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001416:	4b14      	ldr	r3, [pc, #80]	; (1a001468 <Chip_Clock_GetClockInputHz+0xb0>)
1a001418:	6858      	ldr	r0, [r3, #4]
		break;
1a00141a:	e018      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00141c:	f000 f868 	bl	1a0014f0 <Chip_Clock_GetMainPLLHz>
		break;
1a001420:	e015      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001422:	2100      	movs	r1, #0
1a001424:	f000 f89a 	bl	1a00155c <Chip_Clock_GetDivRate>
		break;
1a001428:	e011      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00142a:	2101      	movs	r1, #1
1a00142c:	f000 f896 	bl	1a00155c <Chip_Clock_GetDivRate>
		break;
1a001430:	e00d      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001432:	2102      	movs	r1, #2
1a001434:	f000 f892 	bl	1a00155c <Chip_Clock_GetDivRate>
		break;
1a001438:	e009      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00143a:	2103      	movs	r1, #3
1a00143c:	f000 f88e 	bl	1a00155c <Chip_Clock_GetDivRate>
		break;
1a001440:	e005      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001442:	2104      	movs	r1, #4
1a001444:	f000 f88a 	bl	1a00155c <Chip_Clock_GetDivRate>
		break;
1a001448:	e001      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00144a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00144e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001450:	4806      	ldr	r0, [pc, #24]	; (1a00146c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001452:	e7fc      	b.n	1a00144e <Chip_Clock_GetClockInputHz+0x96>
1a001454:	00b71b00 	.word	0x00b71b00
1a001458:	40043000 	.word	0x40043000
1a00145c:	017d7840 	.word	0x017d7840
1a001460:	1a0041e4 	.word	0x1a0041e4
1a001464:	1a004210 	.word	0x1a004210
1a001468:	10000178 	.word	0x10000178
1a00146c:	02faf080 	.word	0x02faf080

1a001470 <Chip_Clock_CalcMainPLLValue>:
{
1a001470:	b538      	push	{r3, r4, r5, lr}
1a001472:	4605      	mov	r5, r0
1a001474:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001476:	7908      	ldrb	r0, [r1, #4]
1a001478:	f7ff ff9e 	bl	1a0013b8 <Chip_Clock_GetClockInputHz>
1a00147c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00147e:	4b19      	ldr	r3, [pc, #100]	; (1a0014e4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001480:	442b      	add	r3, r5
1a001482:	4a19      	ldr	r2, [pc, #100]	; (1a0014e8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001484:	4293      	cmp	r3, r2
1a001486:	d821      	bhi.n	1a0014cc <Chip_Clock_CalcMainPLLValue+0x5c>
1a001488:	b318      	cbz	r0, 1a0014d2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00148a:	2380      	movs	r3, #128	; 0x80
1a00148c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00148e:	2300      	movs	r3, #0
1a001490:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001492:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001494:	fbb5 f3f0 	udiv	r3, r5, r0
1a001498:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00149a:	4a14      	ldr	r2, [pc, #80]	; (1a0014ec <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00149c:	4295      	cmp	r5, r2
1a00149e:	d903      	bls.n	1a0014a8 <Chip_Clock_CalcMainPLLValue+0x38>
1a0014a0:	fb03 f000 	mul.w	r0, r3, r0
1a0014a4:	42a8      	cmp	r0, r5
1a0014a6:	d007      	beq.n	1a0014b8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0014a8:	4621      	mov	r1, r4
1a0014aa:	4628      	mov	r0, r5
1a0014ac:	f7ff fe96 	bl	1a0011dc <pll_get_frac>
		if (!ppll->nsel) {
1a0014b0:	68a3      	ldr	r3, [r4, #8]
1a0014b2:	b18b      	cbz	r3, 1a0014d8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0014b4:	3b01      	subs	r3, #1
1a0014b6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0014b8:	6923      	ldr	r3, [r4, #16]
1a0014ba:	b183      	cbz	r3, 1a0014de <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0014bc:	68e2      	ldr	r2, [r4, #12]
1a0014be:	b10a      	cbz	r2, 1a0014c4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0014c0:	3a01      	subs	r2, #1
1a0014c2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0014c4:	3b01      	subs	r3, #1
1a0014c6:	6123      	str	r3, [r4, #16]
	return 0;
1a0014c8:	2000      	movs	r0, #0
}
1a0014ca:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0014cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0014d0:	e7fb      	b.n	1a0014ca <Chip_Clock_CalcMainPLLValue+0x5a>
1a0014d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0014d6:	e7f8      	b.n	1a0014ca <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0014dc:	e7f5      	b.n	1a0014ca <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0014de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0014e2:	e7f2      	b.n	1a0014ca <Chip_Clock_CalcMainPLLValue+0x5a>
1a0014e4:	ff6b3a10 	.word	0xff6b3a10
1a0014e8:	0b940510 	.word	0x0b940510
1a0014ec:	094c5eff 	.word	0x094c5eff

1a0014f0 <Chip_Clock_GetMainPLLHz>:
{
1a0014f0:	b530      	push	{r4, r5, lr}
1a0014f2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0014f4:	4d17      	ldr	r5, [pc, #92]	; (1a001554 <Chip_Clock_GetMainPLLHz+0x64>)
1a0014f6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0014f8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0014fc:	f7ff ff5c 	bl	1a0013b8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001500:	4b15      	ldr	r3, [pc, #84]	; (1a001558 <Chip_Clock_GetMainPLLHz+0x68>)
1a001502:	681b      	ldr	r3, [r3, #0]
1a001504:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001506:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001508:	f013 0f01 	tst.w	r3, #1
1a00150c:	d020      	beq.n	1a001550 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00150e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001512:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001516:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00151a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00151e:	3301      	adds	r3, #1
	n = nsel + 1;
1a001520:	3201      	adds	r2, #1
	p = ptab[psel];
1a001522:	f10d 0c08 	add.w	ip, sp, #8
1a001526:	4461      	add	r1, ip
1a001528:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00152c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001530:	d108      	bne.n	1a001544 <Chip_Clock_GetMainPLLHz+0x54>
1a001532:	b93d      	cbnz	r5, 1a001544 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001534:	0049      	lsls	r1, r1, #1
1a001536:	fbb3 f3f1 	udiv	r3, r3, r1
1a00153a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00153e:	fb00 f003 	mul.w	r0, r0, r3
1a001542:	e003      	b.n	1a00154c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001544:	fbb0 f0f2 	udiv	r0, r0, r2
1a001548:	fb03 f000 	mul.w	r0, r3, r0
}
1a00154c:	b003      	add	sp, #12
1a00154e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001550:	2000      	movs	r0, #0
1a001552:	e7fb      	b.n	1a00154c <Chip_Clock_GetMainPLLHz+0x5c>
1a001554:	40050000 	.word	0x40050000
1a001558:	1a00429c 	.word	0x1a00429c

1a00155c <Chip_Clock_GetDivRate>:
{
1a00155c:	b538      	push	{r3, r4, r5, lr}
1a00155e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001560:	4608      	mov	r0, r1
1a001562:	f7ff ff0d 	bl	1a001380 <Chip_Clock_GetDividerSource>
1a001566:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001568:	4620      	mov	r0, r4
1a00156a:	f7ff ff17 	bl	1a00139c <Chip_Clock_GetDividerDivisor>
1a00156e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001570:	4628      	mov	r0, r5
1a001572:	f7ff ff21 	bl	1a0013b8 <Chip_Clock_GetClockInputHz>
1a001576:	3401      	adds	r4, #1
}
1a001578:	fbb0 f0f4 	udiv	r0, r0, r4
1a00157c:	bd38      	pop	{r3, r4, r5, pc}
1a00157e:	Address 0x000000001a00157e is out of bounds.


1a001580 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001580:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001582:	f100 0416 	add.w	r4, r0, #22
1a001586:	00a4      	lsls	r4, r4, #2
1a001588:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00158c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001590:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001592:	281b      	cmp	r0, #27
1a001594:	d813      	bhi.n	1a0015be <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001596:	2911      	cmp	r1, #17
1a001598:	d01a      	beq.n	1a0015d0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00159a:	4d0e      	ldr	r5, [pc, #56]	; (1a0015d4 <Chip_Clock_SetBaseClock+0x54>)
1a00159c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00159e:	b10a      	cbz	r2, 1a0015a4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0015a0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0015a4:	b10b      	cbz	r3, 1a0015aa <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0015a6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0015aa:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0015ae:	3016      	adds	r0, #22
1a0015b0:	0080      	lsls	r0, r0, #2
1a0015b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0015b6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0015ba:	6045      	str	r5, [r0, #4]
1a0015bc:	e008      	b.n	1a0015d0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0015be:	f044 0401 	orr.w	r4, r4, #1
1a0015c2:	3016      	adds	r0, #22
1a0015c4:	0080      	lsls	r0, r0, #2
1a0015c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0015ca:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0015ce:	6044      	str	r4, [r0, #4]
	}
}
1a0015d0:	bc30      	pop	{r4, r5}
1a0015d2:	4770      	bx	lr
1a0015d4:	e0fff7fe 	.word	0xe0fff7fe

1a0015d8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0015d8:	281b      	cmp	r0, #27
1a0015da:	d80c      	bhi.n	1a0015f6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0015dc:	3016      	adds	r0, #22
1a0015de:	0080      	lsls	r0, r0, #2
1a0015e0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0015e4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0015e8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0015ea:	f010 0f01 	tst.w	r0, #1
1a0015ee:	d104      	bne.n	1a0015fa <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0015f0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0015f4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0015f6:	2011      	movs	r0, #17
1a0015f8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0015fa:	2011      	movs	r0, #17
}
1a0015fc:	4770      	bx	lr

1a0015fe <Chip_Clock_GetBaseClocktHz>:
{
1a0015fe:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001600:	f7ff ffea 	bl	1a0015d8 <Chip_Clock_GetBaseClock>
1a001604:	f7ff fed8 	bl	1a0013b8 <Chip_Clock_GetClockInputHz>
}
1a001608:	bd08      	pop	{r3, pc}
1a00160a:	Address 0x000000001a00160a is out of bounds.


1a00160c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00160c:	b971      	cbnz	r1, 1a00162c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00160e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001610:	b10a      	cbz	r2, 1a001616 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001612:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001616:	2b02      	cmp	r3, #2
1a001618:	d00a      	beq.n	1a001630 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00161a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00161e:	d30a      	bcc.n	1a001636 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001620:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001624:	4b06      	ldr	r3, [pc, #24]	; (1a001640 <Chip_Clock_EnableOpts+0x34>)
1a001626:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00162a:	4770      	bx	lr
		reg |= (1 << 1);
1a00162c:	2103      	movs	r1, #3
1a00162e:	e7ef      	b.n	1a001610 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001630:	f041 0120 	orr.w	r1, r1, #32
1a001634:	e7f1      	b.n	1a00161a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001636:	3020      	adds	r0, #32
1a001638:	4b02      	ldr	r3, [pc, #8]	; (1a001644 <Chip_Clock_EnableOpts+0x38>)
1a00163a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00163e:	4770      	bx	lr
1a001640:	40052000 	.word	0x40052000
1a001644:	40051000 	.word	0x40051000

1a001648 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001648:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00164c:	d309      	bcc.n	1a001662 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00164e:	4a09      	ldr	r2, [pc, #36]	; (1a001674 <Chip_Clock_Enable+0x2c>)
1a001650:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001654:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001658:	f043 0301 	orr.w	r3, r3, #1
1a00165c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001660:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001662:	4a05      	ldr	r2, [pc, #20]	; (1a001678 <Chip_Clock_Enable+0x30>)
1a001664:	3020      	adds	r0, #32
1a001666:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00166a:	f043 0301 	orr.w	r3, r3, #1
1a00166e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001672:	4770      	bx	lr
1a001674:	40052000 	.word	0x40052000
1a001678:	40051000 	.word	0x40051000

1a00167c <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a00167c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001680:	d309      	bcc.n	1a001696 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a001682:	4a09      	ldr	r2, [pc, #36]	; (1a0016a8 <Chip_Clock_Disable+0x2c>)
1a001684:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001688:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00168c:	f023 0301 	bic.w	r3, r3, #1
1a001690:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001694:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a001696:	4a05      	ldr	r2, [pc, #20]	; (1a0016ac <Chip_Clock_Disable+0x30>)
1a001698:	3020      	adds	r0, #32
1a00169a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00169e:	f023 0301 	bic.w	r3, r3, #1
1a0016a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0016a6:	4770      	bx	lr
1a0016a8:	40052000 	.word	0x40052000
1a0016ac:	40051000 	.word	0x40051000

1a0016b0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0016b0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0016b2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016b6:	d309      	bcc.n	1a0016cc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0016b8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0016bc:	4a0d      	ldr	r2, [pc, #52]	; (1a0016f4 <Chip_Clock_GetRate+0x44>)
1a0016be:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0016c2:	f014 0f01 	tst.w	r4, #1
1a0016c6:	d107      	bne.n	1a0016d8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0016c8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0016ca:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0016cc:	f100 0320 	add.w	r3, r0, #32
1a0016d0:	4a09      	ldr	r2, [pc, #36]	; (1a0016f8 <Chip_Clock_GetRate+0x48>)
1a0016d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0016d6:	e7f4      	b.n	1a0016c2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0016d8:	f7ff fe06 	bl	1a0012e8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0016dc:	f7ff ff8f 	bl	1a0015fe <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0016e0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0016e4:	d103      	bne.n	1a0016ee <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0016e6:	2301      	movs	r3, #1
		rate = rate / div;
1a0016e8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0016ec:	e7ed      	b.n	1a0016ca <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0016ee:	2302      	movs	r3, #2
1a0016f0:	e7fa      	b.n	1a0016e8 <Chip_Clock_GetRate+0x38>
1a0016f2:	bf00      	nop
1a0016f4:	40052000 	.word	0x40052000
1a0016f8:	40051000 	.word	0x40051000

1a0016fc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0016fc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0016fe:	2069      	movs	r0, #105	; 0x69
1a001700:	f7ff ffd6 	bl	1a0016b0 <Chip_Clock_GetRate>
1a001704:	4b01      	ldr	r3, [pc, #4]	; (1a00170c <SystemCoreClockUpdate+0x10>)
1a001706:	6018      	str	r0, [r3, #0]
}
1a001708:	bd08      	pop	{r3, pc}
1a00170a:	bf00      	nop
1a00170c:	100001b8 	.word	0x100001b8

1a001710 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a001710:	4b09      	ldr	r3, [pc, #36]	; (1a001738 <Chip_TIMER_GetClockIndex+0x28>)
1a001712:	4298      	cmp	r0, r3
1a001714:	d00b      	beq.n	1a00172e <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a001716:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a00171a:	4298      	cmp	r0, r3
1a00171c:	d009      	beq.n	1a001732 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a00171e:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a001722:	4298      	cmp	r0, r3
1a001724:	d001      	beq.n	1a00172a <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a001726:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a001728:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER1;
1a00172a:	2085      	movs	r0, #133	; 0x85
1a00172c:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER3;
1a00172e:	20a4      	movs	r0, #164	; 0xa4
1a001730:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER2;
1a001732:	20a3      	movs	r0, #163	; 0xa3
1a001734:	4770      	bx	lr
1a001736:	bf00      	nop
1a001738:	400c4000 	.word	0x400c4000

1a00173c <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a00173c:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a00173e:	f7ff ffe7 	bl	1a001710 <Chip_TIMER_GetClockIndex>
1a001742:	f7ff ff81 	bl	1a001648 <Chip_Clock_Enable>
}
1a001746:	bd08      	pop	{r3, pc}

1a001748 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a001748:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a00174a:	2300      	movs	r3, #0
1a00174c:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a00174e:	2301      	movs	r3, #1
1a001750:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a001752:	2302      	movs	r3, #2
1a001754:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a001756:	6883      	ldr	r3, [r0, #8]
1a001758:	2b00      	cmp	r3, #0
1a00175a:	d1fc      	bne.n	1a001756 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a00175c:	6042      	str	r2, [r0, #4]
}
1a00175e:	4770      	bx	lr

1a001760 <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a001760:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a001762:	2301      	movs	r3, #1
1a001764:	461a      	mov	r2, r3
1a001766:	4619      	mov	r1, r3
1a001768:	206d      	movs	r0, #109	; 0x6d
1a00176a:	f7ff ff4f 	bl	1a00160c <Chip_Clock_EnableOpts>
}
1a00176e:	bd08      	pop	{r3, pc}

1a001770 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001770:	4770      	bx	lr
1a001772:	Address 0x000000001a001772 is out of bounds.


1a001774 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001774:	b570      	push	{r4, r5, r6, lr}
1a001776:	b08a      	sub	sp, #40	; 0x28
1a001778:	4605      	mov	r5, r0
1a00177a:	460e      	mov	r6, r1
1a00177c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00177e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001782:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001784:	2806      	cmp	r0, #6
1a001786:	d018      	beq.n	1a0017ba <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001788:	2300      	movs	r3, #0
1a00178a:	2201      	movs	r2, #1
1a00178c:	4629      	mov	r1, r5
1a00178e:	2004      	movs	r0, #4
1a001790:	f7ff fef6 	bl	1a001580 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001794:	4a4a      	ldr	r2, [pc, #296]	; (1a0018c0 <Chip_SetupCoreClock+0x14c>)
1a001796:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001798:	f043 0301 	orr.w	r3, r3, #1
1a00179c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00179e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0017a2:	a901      	add	r1, sp, #4
1a0017a4:	4630      	mov	r0, r6
1a0017a6:	f7ff fe63 	bl	1a001470 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0017aa:	4b46      	ldr	r3, [pc, #280]	; (1a0018c4 <Chip_SetupCoreClock+0x150>)
1a0017ac:	429e      	cmp	r6, r3
1a0017ae:	d916      	bls.n	1a0017de <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0017b0:	9b01      	ldr	r3, [sp, #4]
1a0017b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0017b6:	d003      	beq.n	1a0017c0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0017b8:	e7fe      	b.n	1a0017b8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0017ba:	f7ff fdbb 	bl	1a001334 <Chip_Clock_EnableCrystal>
1a0017be:	e7e3      	b.n	1a001788 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0017c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0017c4:	d005      	beq.n	1a0017d2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0017c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0017ca:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0017cc:	2500      	movs	r5, #0
			direct = 1;
1a0017ce:	2601      	movs	r6, #1
1a0017d0:	e007      	b.n	1a0017e2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0017d2:	9b04      	ldr	r3, [sp, #16]
1a0017d4:	3301      	adds	r3, #1
1a0017d6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0017d8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0017da:	2600      	movs	r6, #0
1a0017dc:	e001      	b.n	1a0017e2 <Chip_SetupCoreClock+0x6e>
1a0017de:	2500      	movs	r5, #0
1a0017e0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0017e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0017e6:	9b01      	ldr	r3, [sp, #4]
1a0017e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0017ec:	9a05      	ldr	r2, [sp, #20]
1a0017ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0017f2:	9a03      	ldr	r2, [sp, #12]
1a0017f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0017f8:	9a04      	ldr	r2, [sp, #16]
1a0017fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0017fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001802:	4a2f      	ldr	r2, [pc, #188]	; (1a0018c0 <Chip_SetupCoreClock+0x14c>)
1a001804:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001806:	4b2e      	ldr	r3, [pc, #184]	; (1a0018c0 <Chip_SetupCoreClock+0x14c>)
1a001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00180a:	f013 0f01 	tst.w	r3, #1
1a00180e:	d0fa      	beq.n	1a001806 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001810:	2300      	movs	r3, #0
1a001812:	2201      	movs	r2, #1
1a001814:	2109      	movs	r1, #9
1a001816:	2004      	movs	r0, #4
1a001818:	f7ff feb2 	bl	1a001580 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00181c:	b306      	cbz	r6, 1a001860 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00181e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001822:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001824:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001826:	1e5a      	subs	r2, r3, #1
1a001828:	9209      	str	r2, [sp, #36]	; 0x24
1a00182a:	2b00      	cmp	r3, #0
1a00182c:	d1fa      	bne.n	1a001824 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00182e:	9b01      	ldr	r3, [sp, #4]
1a001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001834:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001836:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00183a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00183e:	9a05      	ldr	r2, [sp, #20]
1a001840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001844:	9a03      	ldr	r2, [sp, #12]
1a001846:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00184a:	9a04      	ldr	r2, [sp, #16]
1a00184c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001854:	4a1a      	ldr	r2, [pc, #104]	; (1a0018c0 <Chip_SetupCoreClock+0x14c>)
1a001856:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001858:	2c00      	cmp	r4, #0
1a00185a:	d12e      	bne.n	1a0018ba <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00185c:	b00a      	add	sp, #40	; 0x28
1a00185e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001860:	2d00      	cmp	r5, #0
1a001862:	d0f9      	beq.n	1a001858 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001864:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001868:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00186a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00186c:	1e5a      	subs	r2, r3, #1
1a00186e:	9209      	str	r2, [sp, #36]	; 0x24
1a001870:	2b00      	cmp	r3, #0
1a001872:	d1fa      	bne.n	1a00186a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001874:	9b04      	ldr	r3, [sp, #16]
1a001876:	1e5a      	subs	r2, r3, #1
1a001878:	9204      	str	r2, [sp, #16]
1a00187a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00187e:	9b01      	ldr	r3, [sp, #4]
1a001880:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001884:	9905      	ldr	r1, [sp, #20]
1a001886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00188a:	9903      	ldr	r1, [sp, #12]
1a00188c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001890:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001894:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001898:	4a09      	ldr	r2, [pc, #36]	; (1a0018c0 <Chip_SetupCoreClock+0x14c>)
1a00189a:	6453      	str	r3, [r2, #68]	; 0x44
1a00189c:	e7dc      	b.n	1a001858 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00189e:	480a      	ldr	r0, [pc, #40]	; (1a0018c8 <Chip_SetupCoreClock+0x154>)
1a0018a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0018a4:	78cb      	ldrb	r3, [r1, #3]
1a0018a6:	788a      	ldrb	r2, [r1, #2]
1a0018a8:	7849      	ldrb	r1, [r1, #1]
1a0018aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0018ae:	f7ff fe67 	bl	1a001580 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0018b2:	3401      	adds	r4, #1
1a0018b4:	2c11      	cmp	r4, #17
1a0018b6:	d9f2      	bls.n	1a00189e <Chip_SetupCoreClock+0x12a>
1a0018b8:	e7d0      	b.n	1a00185c <Chip_SetupCoreClock+0xe8>
1a0018ba:	2400      	movs	r4, #0
1a0018bc:	e7fa      	b.n	1a0018b4 <Chip_SetupCoreClock+0x140>
1a0018be:	bf00      	nop
1a0018c0:	40050000 	.word	0x40050000
1a0018c4:	068e7780 	.word	0x068e7780
1a0018c8:	1a004314 	.word	0x1a004314

1a0018cc <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a0018cc:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a0018ce:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a0018d2:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a0018d6:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a0018da:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a0018dc:	2401      	movs	r4, #1
1a0018de:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a0018e2:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a0018e6:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a0018ea:	fa04 f101 	lsl.w	r1, r4, r1
1a0018ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a0018f2:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a0018f4:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a0018f6:	40a2      	lsls	r2, r4
1a0018f8:	2303      	movs	r3, #3
1a0018fa:	4093      	lsls	r3, r2
1a0018fc:	43db      	mvns	r3, r3
1a0018fe:	4019      	ands	r1, r3
1a001900:	4094      	lsls	r4, r2
1a001902:	430c      	orrs	r4, r1
1a001904:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a001906:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001908:	4013      	ands	r3, r2
1a00190a:	6543      	str	r3, [r0, #84]	; 0x54
}
1a00190c:	bc30      	pop	{r4, r5}
1a00190e:	4770      	bx	lr

1a001910 <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a001910:	b538      	push	{r3, r4, r5, lr}
1a001912:	4604      	mov	r4, r0
1a001914:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a001916:	206d      	movs	r0, #109	; 0x6d
1a001918:	f7ff feca 	bl	1a0016b0 <Chip_Clock_GetRate>
1a00191c:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a001920:	6863      	ldr	r3, [r4, #4]
1a001922:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a001926:	6063      	str	r3, [r4, #4]
1a001928:	6863      	ldr	r3, [r4, #4]
1a00192a:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a00192e:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a001930:	2300      	movs	r3, #0
1a001932:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a001936:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a00193a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a00193e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a001946:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a00194a:	2301      	movs	r3, #1
1a00194c:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a001950:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a001952:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a001956:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a001958:	bd38      	pop	{r3, r4, r5, pc}
1a00195a:	Address 0x000000001a00195a is out of bounds.


1a00195c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00195c:	4b03      	ldr	r3, [pc, #12]	; (1a00196c <Chip_SSP_GetClockIndex+0x10>)
1a00195e:	4298      	cmp	r0, r3
1a001960:	d001      	beq.n	1a001966 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001962:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001964:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001966:	20a5      	movs	r0, #165	; 0xa5
1a001968:	4770      	bx	lr
1a00196a:	bf00      	nop
1a00196c:	400c5000 	.word	0x400c5000

1a001970 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001970:	4b04      	ldr	r3, [pc, #16]	; (1a001984 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001972:	4298      	cmp	r0, r3
1a001974:	d002      	beq.n	1a00197c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001976:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00197a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00197c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001980:	4770      	bx	lr
1a001982:	bf00      	nop
1a001984:	400c5000 	.word	0x400c5000

1a001988 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001988:	6803      	ldr	r3, [r0, #0]
1a00198a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00198e:	0209      	lsls	r1, r1, #8
1a001990:	b289      	uxth	r1, r1
1a001992:	4319      	orrs	r1, r3
1a001994:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001996:	6102      	str	r2, [r0, #16]
}
1a001998:	4770      	bx	lr

1a00199a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00199a:	b570      	push	{r4, r5, r6, lr}
1a00199c:	4606      	mov	r6, r0
1a00199e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0019a0:	f7ff ffe6 	bl	1a001970 <Chip_SSP_GetPeriphClockIndex>
1a0019a4:	f7ff fe84 	bl	1a0016b0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0019a8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0019ae:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0019b0:	e000      	b.n	1a0019b4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0019b2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0019b4:	42ab      	cmp	r3, r5
1a0019b6:	d90b      	bls.n	1a0019d0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0019b8:	1c4c      	adds	r4, r1, #1
1a0019ba:	fb02 f304 	mul.w	r3, r2, r4
1a0019be:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0019c2:	429d      	cmp	r5, r3
1a0019c4:	d2f6      	bcs.n	1a0019b4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0019c6:	2cff      	cmp	r4, #255	; 0xff
1a0019c8:	d9f3      	bls.n	1a0019b2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0019ca:	3202      	adds	r2, #2
				cr0_div = 0;
1a0019cc:	2100      	movs	r1, #0
1a0019ce:	e7f1      	b.n	1a0019b4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0019d0:	4630      	mov	r0, r6
1a0019d2:	f7ff ffd9 	bl	1a001988 <Chip_SSP_SetClockRate>
}
1a0019d6:	bd70      	pop	{r4, r5, r6, pc}

1a0019d8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0019d8:	b510      	push	{r4, lr}
1a0019da:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0019dc:	f7ff ffbe 	bl	1a00195c <Chip_SSP_GetClockIndex>
1a0019e0:	f7ff fe32 	bl	1a001648 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0019e4:	4620      	mov	r0, r4
1a0019e6:	f7ff ffc3 	bl	1a001970 <Chip_SSP_GetPeriphClockIndex>
1a0019ea:	f7ff fe2d 	bl	1a001648 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0019ee:	6863      	ldr	r3, [r4, #4]
1a0019f0:	f023 0304 	bic.w	r3, r3, #4
1a0019f4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0019f6:	6823      	ldr	r3, [r4, #0]
1a0019f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0019fc:	f043 0307 	orr.w	r3, r3, #7
1a001a00:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001a02:	4902      	ldr	r1, [pc, #8]	; (1a001a0c <Chip_SSP_Init+0x34>)
1a001a04:	4620      	mov	r0, r4
1a001a06:	f7ff ffc8 	bl	1a00199a <Chip_SSP_SetBitRate>
}
1a001a0a:	bd10      	pop	{r4, pc}
1a001a0c:	000186a0 	.word	0x000186a0

1a001a10 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001a10:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001a12:	4a0b      	ldr	r2, [pc, #44]	; (1a001a40 <SystemInit+0x30>)
1a001a14:	4b0b      	ldr	r3, [pc, #44]	; (1a001a44 <SystemInit+0x34>)
1a001a16:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001a18:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001a1c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001a1e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001a22:	2b20      	cmp	r3, #32
1a001a24:	d004      	beq.n	1a001a30 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001a26:	f7ff f977 	bl	1a000d18 <Board_SystemInit>
   Board_Init();
1a001a2a:	f7ff f8fd 	bl	1a000c28 <Board_Init>
}
1a001a2e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001a30:	4a04      	ldr	r2, [pc, #16]	; (1a001a44 <SystemInit+0x34>)
1a001a32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001a36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001a3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001a3e:	e7f2      	b.n	1a001a26 <SystemInit+0x16>
1a001a40:	1a000000 	.word	0x1a000000
1a001a44:	e000ed00 	.word	0xe000ed00

1a001a48 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001a48:	4b04      	ldr	r3, [pc, #16]	; (1a001a5c <cyclesCounterInit+0x14>)
1a001a4a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001a4c:	4a04      	ldr	r2, [pc, #16]	; (1a001a60 <cyclesCounterInit+0x18>)
1a001a4e:	6813      	ldr	r3, [r2, #0]
1a001a50:	f043 0301 	orr.w	r3, r3, #1
1a001a54:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001a56:	2001      	movs	r0, #1
1a001a58:	4770      	bx	lr
1a001a5a:	bf00      	nop
1a001a5c:	10000050 	.word	0x10000050
1a001a60:	e0001000 	.word	0xe0001000

1a001a64 <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a001a64:	b510      	push	{r4, lr}
1a001a66:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a001a68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001a6c:	f7ff fe78 	bl	1a001760 <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a001a70:	4621      	mov	r1, r4
1a001a72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001a76:	f7ff ff4b 	bl	1a001910 <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a001a7e:	6853      	ldr	r3, [r2, #4]
1a001a80:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a001a84:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a001a86:	bd10      	pop	{r4, pc}

1a001a88 <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a001a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a001a90:	fb03 f000 	mul.w	r0, r3, r0
1a001a94:	4b02      	ldr	r3, [pc, #8]	; (1a001aa0 <Sct_Uint8ToTicks+0x18>)
1a001a96:	fba3 3000 	umull	r3, r0, r3, r0
}
1a001a9a:	09c0      	lsrs	r0, r0, #7
1a001a9c:	4770      	bx	lr
1a001a9e:	bf00      	nop
1a001aa0:	80808081 	.word	0x80808081

1a001aa4 <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a001aa4:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a001aa6:	3001      	adds	r0, #1
1a001aa8:	b2c4      	uxtb	r4, r0
1a001aaa:	4608      	mov	r0, r1
1a001aac:	f7ff ffec 	bl	1a001a88 <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a001ab0:	3480      	adds	r4, #128	; 0x80
1a001ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001ab6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a001aba:	bd10      	pop	{r4, pc}

1a001abc <Sct_EnablePwmFor>:
{
1a001abc:	b510      	push	{r4, lr}
1a001abe:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a001ac0:	4a0f      	ldr	r2, [pc, #60]	; (1a001b00 <Sct_EnablePwmFor+0x44>)
1a001ac2:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a001ac6:	b2db      	uxtb	r3, r3
1a001ac8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a001acc:	f992 2001 	ldrsb.w	r2, [r2, #1]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ad0:	015b      	lsls	r3, r3, #5
1a001ad2:	fa53 f382 	uxtab	r3, r3, r2
1a001ad6:	4a0b      	ldr	r2, [pc, #44]	; (1a001b04 <Sct_EnablePwmFor+0x48>)
1a001ad8:	2111      	movs	r1, #17
1a001ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a001ade:	1c41      	adds	r1, r0, #1
1a001ae0:	4602      	mov	r2, r0
1a001ae2:	b2c9      	uxtb	r1, r1
1a001ae4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001ae8:	f7ff fef0 	bl	1a0018cc <Chip_SCTPWM_SetOutPin>
1a001aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001af0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a001af4:	2100      	movs	r1, #0
1a001af6:	4620      	mov	r0, r4
1a001af8:	f7ff ffd4 	bl	1a001aa4 <Sct_SetDutyCycle>
}
1a001afc:	bd10      	pop	{r4, pc}
1a001afe:	bf00      	nop
1a001b00:	1a00435c 	.word	0x1a00435c
1a001b04:	40086000 	.word	0x40086000

1a001b08 <dacInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  DAC_ENABLE, DAC_DISABLE
 * @return: none
*/
void dacInit( dacInit_t config )
{
1a001b08:	b510      	push	{r4, lr}

   switch(config) {
1a001b0a:	b110      	cbz	r0, 1a001b12 <dacInit+0xa>
1a001b0c:	2801      	cmp	r0, #1
1a001b0e:	d016      	beq.n	1a001b3e <dacInit+0x36>
      /* Disable DAC peripheral */
      Chip_DAC_DeInit( LPC_DAC );
      break;
   }

}
1a001b10:	bd10      	pop	{r4, pc}
      Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a001b12:	2301      	movs	r3, #1
1a001b14:	461a      	mov	r2, r3
1a001b16:	4619      	mov	r1, r3
1a001b18:	2002      	movs	r0, #2
1a001b1a:	f7ff fd77 	bl	1a00160c <Chip_Clock_EnableOpts>
      Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a001b1e:	4c0a      	ldr	r4, [pc, #40]	; (1a001b48 <dacInit+0x40>)
1a001b20:	2101      	movs	r1, #1
1a001b22:	4620      	mov	r0, r4
1a001b24:	f7ff f90b 	bl	1a000d3e <Chip_DAC_SetBias>
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a001b28:	6863      	ldr	r3, [r4, #4]
1a001b2a:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a001b2e:	f043 0308 	orr.w	r3, r3, #8
1a001b32:	6063      	str	r3, [r4, #4]
      Chip_DAC_UpdateValue(LPC_DAC, 0);
1a001b34:	2100      	movs	r1, #0
1a001b36:	4620      	mov	r0, r4
1a001b38:	f7ff f8f9 	bl	1a000d2e <Chip_DAC_UpdateValue>
      break;
1a001b3c:	e7e8      	b.n	1a001b10 <dacInit+0x8>
      Chip_DAC_DeInit( LPC_DAC );
1a001b3e:	4802      	ldr	r0, [pc, #8]	; (1a001b48 <dacInit+0x40>)
1a001b40:	f7ff f8f0 	bl	1a000d24 <Chip_DAC_DeInit>
}
1a001b44:	e7e4      	b.n	1a001b10 <dacInit+0x8>
1a001b46:	bf00      	nop
1a001b48:	400e1000 	.word	0x400e1000

1a001b4c <uartProcessIRQ>:
{
1a001b4c:	b570      	push	{r4, r5, r6, lr}
1a001b4e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001b50:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001b54:	0093      	lsls	r3, r2, #2
1a001b56:	4a1f      	ldr	r2, [pc, #124]	; (1a001bd4 <uartProcessIRQ+0x88>)
1a001b58:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a001b5a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a001b5c:	b2ed      	uxtb	r5, r5
1a001b5e:	f015 0f01 	tst.w	r5, #1
1a001b62:	d009      	beq.n	1a001b78 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001b64:	b920      	cbnz	r0, 1a001b70 <uartProcessIRQ+0x24>
1a001b66:	4b1c      	ldr	r3, [pc, #112]	; (1a001bd8 <uartProcessIRQ+0x8c>)
1a001b68:	681b      	ldr	r3, [r3, #0]
1a001b6a:	b10b      	cbz	r3, 1a001b70 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a001b6c:	2000      	movs	r0, #0
1a001b6e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001b70:	2c03      	cmp	r4, #3
1a001b72:	d013      	beq.n	1a001b9c <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001b74:	2c05      	cmp	r4, #5
1a001b76:	d018      	beq.n	1a001baa <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001b78:	f015 0f20 	tst.w	r5, #32
1a001b7c:	d00d      	beq.n	1a001b9a <uartProcessIRQ+0x4e>
	return pUART->IER;
1a001b7e:	6873      	ldr	r3, [r6, #4]
1a001b80:	f013 0f02 	tst.w	r3, #2
1a001b84:	d009      	beq.n	1a001b9a <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001b86:	b924      	cbnz	r4, 1a001b92 <uartProcessIRQ+0x46>
1a001b88:	4b14      	ldr	r3, [pc, #80]	; (1a001bdc <uartProcessIRQ+0x90>)
1a001b8a:	681b      	ldr	r3, [r3, #0]
1a001b8c:	b10b      	cbz	r3, 1a001b92 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a001b8e:	2000      	movs	r0, #0
1a001b90:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001b92:	2c03      	cmp	r4, #3
1a001b94:	d010      	beq.n	1a001bb8 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001b96:	2c05      	cmp	r4, #5
1a001b98:	d015      	beq.n	1a001bc6 <uartProcessIRQ+0x7a>
}
1a001b9a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001b9c:	4b10      	ldr	r3, [pc, #64]	; (1a001be0 <uartProcessIRQ+0x94>)
1a001b9e:	681b      	ldr	r3, [r3, #0]
1a001ba0:	2b00      	cmp	r3, #0
1a001ba2:	d0e7      	beq.n	1a001b74 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a001ba4:	2000      	movs	r0, #0
1a001ba6:	4798      	blx	r3
1a001ba8:	e7e4      	b.n	1a001b74 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001baa:	4b0e      	ldr	r3, [pc, #56]	; (1a001be4 <uartProcessIRQ+0x98>)
1a001bac:	681b      	ldr	r3, [r3, #0]
1a001bae:	2b00      	cmp	r3, #0
1a001bb0:	d0e2      	beq.n	1a001b78 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a001bb2:	2000      	movs	r0, #0
1a001bb4:	4798      	blx	r3
1a001bb6:	e7df      	b.n	1a001b78 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001bb8:	4b0b      	ldr	r3, [pc, #44]	; (1a001be8 <uartProcessIRQ+0x9c>)
1a001bba:	681b      	ldr	r3, [r3, #0]
1a001bbc:	2b00      	cmp	r3, #0
1a001bbe:	d0ea      	beq.n	1a001b96 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a001bc0:	2000      	movs	r0, #0
1a001bc2:	4798      	blx	r3
1a001bc4:	e7e7      	b.n	1a001b96 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001bc6:	4b09      	ldr	r3, [pc, #36]	; (1a001bec <uartProcessIRQ+0xa0>)
1a001bc8:	681b      	ldr	r3, [r3, #0]
1a001bca:	2b00      	cmp	r3, #0
1a001bcc:	d0e5      	beq.n	1a001b9a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a001bce:	2000      	movs	r0, #0
1a001bd0:	4798      	blx	r3
}
1a001bd2:	e7e2      	b.n	1a001b9a <uartProcessIRQ+0x4e>
1a001bd4:	1a004378 	.word	0x1a004378
1a001bd8:	10000180 	.word	0x10000180
1a001bdc:	1000018c 	.word	0x1000018c
1a001be0:	10000184 	.word	0x10000184
1a001be4:	10000188 	.word	0x10000188
1a001be8:	10000190 	.word	0x10000190
1a001bec:	10000194 	.word	0x10000194

1a001bf0 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001bf4:	0083      	lsls	r3, r0, #2
1a001bf6:	4a03      	ldr	r2, [pc, #12]	; (1a001c04 <uartRxReady+0x14>)
1a001bf8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001bfa:	6958      	ldr	r0, [r3, #20]
}
1a001bfc:	f000 0001 	and.w	r0, r0, #1
1a001c00:	4770      	bx	lr
1a001c02:	bf00      	nop
1a001c04:	1a004378 	.word	0x1a004378

1a001c08 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001c08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c0c:	0083      	lsls	r3, r0, #2
1a001c0e:	4a03      	ldr	r2, [pc, #12]	; (1a001c1c <uartTxReady+0x14>)
1a001c10:	58d3      	ldr	r3, [r2, r3]
1a001c12:	6958      	ldr	r0, [r3, #20]
}
1a001c14:	f000 0020 	and.w	r0, r0, #32
1a001c18:	4770      	bx	lr
1a001c1a:	bf00      	nop
1a001c1c:	1a004378 	.word	0x1a004378

1a001c20 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001c20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c24:	0083      	lsls	r3, r0, #2
1a001c26:	4a02      	ldr	r2, [pc, #8]	; (1a001c30 <uartRxRead+0x10>)
1a001c28:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001c2a:	6818      	ldr	r0, [r3, #0]
}
1a001c2c:	b2c0      	uxtb	r0, r0
1a001c2e:	4770      	bx	lr
1a001c30:	1a004378 	.word	0x1a004378

1a001c34 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001c34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c38:	0083      	lsls	r3, r0, #2
1a001c3a:	4a02      	ldr	r2, [pc, #8]	; (1a001c44 <uartTxWrite+0x10>)
1a001c3c:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001c3e:	6019      	str	r1, [r3, #0]
}
1a001c40:	4770      	bx	lr
1a001c42:	bf00      	nop
1a001c44:	1a004378 	.word	0x1a004378

1a001c48 <uartInit>:
{
1a001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001c4c:	4680      	mov	r8, r0
1a001c4e:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001c50:	4c19      	ldr	r4, [pc, #100]	; (1a001cb8 <uartInit+0x70>)
1a001c52:	0045      	lsls	r5, r0, #1
1a001c54:	182a      	adds	r2, r5, r0
1a001c56:	0093      	lsls	r3, r2, #2
1a001c58:	18e6      	adds	r6, r4, r3
1a001c5a:	58e7      	ldr	r7, [r4, r3]
1a001c5c:	4638      	mov	r0, r7
1a001c5e:	f7ff f8cf 	bl	1a000e00 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001c62:	4649      	mov	r1, r9
1a001c64:	4638      	mov	r0, r7
1a001c66:	f7ff f8f5 	bl	1a000e54 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001c6a:	2307      	movs	r3, #7
1a001c6c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001c6e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001c70:	2301      	movs	r3, #1
1a001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001c74:	7930      	ldrb	r0, [r6, #4]
1a001c76:	7973      	ldrb	r3, [r6, #5]
1a001c78:	79b2      	ldrb	r2, [r6, #6]
1a001c7a:	f042 0218 	orr.w	r2, r2, #24
1a001c7e:	490f      	ldr	r1, [pc, #60]	; (1a001cbc <uartInit+0x74>)
1a001c80:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001c88:	79f0      	ldrb	r0, [r6, #7]
1a001c8a:	7a33      	ldrb	r3, [r6, #8]
1a001c8c:	7a72      	ldrb	r2, [r6, #9]
1a001c8e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c92:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a001c9a:	f1b8 0f01 	cmp.w	r8, #1
1a001c9e:	d001      	beq.n	1a001ca4 <uartInit+0x5c>
}
1a001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001ca4:	4a06      	ldr	r2, [pc, #24]	; (1a001cc0 <uartInit+0x78>)
1a001ca6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001ca8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001cae:	221a      	movs	r2, #26
1a001cb0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001cb4:	e7f4      	b.n	1a001ca0 <uartInit+0x58>
1a001cb6:	bf00      	nop
1a001cb8:	1a004378 	.word	0x1a004378
1a001cbc:	40086000 	.word	0x40086000
1a001cc0:	40081000 	.word	0x40081000

1a001cc4 <uartReadByte>:
{
1a001cc4:	b538      	push	{r3, r4, r5, lr}
1a001cc6:	4605      	mov	r5, r0
1a001cc8:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a001cca:	f7ff ff91 	bl	1a001bf0 <uartRxReady>
1a001cce:	4603      	mov	r3, r0
1a001cd0:	b908      	cbnz	r0, 1a001cd6 <uartReadByte+0x12>
}
1a001cd2:	4618      	mov	r0, r3
1a001cd4:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a001cd6:	4628      	mov	r0, r5
1a001cd8:	f7ff ffa2 	bl	1a001c20 <uartRxRead>
1a001cdc:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a001cde:	2301      	movs	r3, #1
1a001ce0:	e7f7      	b.n	1a001cd2 <uartReadByte+0xe>

1a001ce2 <uartWriteByte>:
{
1a001ce2:	b538      	push	{r3, r4, r5, lr}
1a001ce4:	4604      	mov	r4, r0
1a001ce6:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a001ce8:	4620      	mov	r0, r4
1a001cea:	f7ff ff8d 	bl	1a001c08 <uartTxReady>
1a001cee:	2800      	cmp	r0, #0
1a001cf0:	d0fa      	beq.n	1a001ce8 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a001cf2:	4629      	mov	r1, r5
1a001cf4:	4620      	mov	r0, r4
1a001cf6:	f7ff ff9d 	bl	1a001c34 <uartTxWrite>
}
1a001cfa:	bd38      	pop	{r3, r4, r5, pc}

1a001cfc <uartWriteString>:
{
1a001cfc:	b538      	push	{r3, r4, r5, lr}
1a001cfe:	4605      	mov	r5, r0
1a001d00:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001d02:	7821      	ldrb	r1, [r4, #0]
1a001d04:	b121      	cbz	r1, 1a001d10 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a001d06:	4628      	mov	r0, r5
1a001d08:	f7ff ffeb 	bl	1a001ce2 <uartWriteByte>
      str++;
1a001d0c:	3401      	adds	r4, #1
1a001d0e:	e7f8      	b.n	1a001d02 <uartWriteString+0x6>
}
1a001d10:	bd38      	pop	{r3, r4, r5, pc}

1a001d12 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001d12:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001d14:	2003      	movs	r0, #3
1a001d16:	f7ff ff19 	bl	1a001b4c <uartProcessIRQ>
}
1a001d1a:	bd08      	pop	{r3, pc}

1a001d1c <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001d1c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001d1e:	2005      	movs	r0, #5
1a001d20:	f7ff ff14 	bl	1a001b4c <uartProcessIRQ>
}
1a001d24:	bd08      	pop	{r3, pc}

1a001d26 <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a001d26:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a001d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001d2c:	f7ff fe9a 	bl	1a001a64 <Sct_Init>
}
1a001d30:	bd08      	pop	{r3, pc}
1a001d32:	Address 0x000000001a001d32 is out of bounds.


1a001d34 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a001d34:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a001d36:	2b0a      	cmp	r3, #10
1a001d38:	d806      	bhi.n	1a001d48 <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a001d3a:	4a07      	ldr	r2, [pc, #28]	; (1a001d58 <pwmIsAttached+0x24>)
1a001d3c:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a001d3e:	4282      	cmp	r2, r0
1a001d40:	d002      	beq.n	1a001d48 <pwmIsAttached+0x14>
      position++;
1a001d42:	3301      	adds	r3, #1
1a001d44:	b2db      	uxtb	r3, r3
1a001d46:	e7f6      	b.n	1a001d36 <pwmIsAttached+0x2>
   }

   if (position < PWM_TOTALNUMBER) {
1a001d48:	2b0a      	cmp	r3, #10
1a001d4a:	d802      	bhi.n	1a001d52 <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a001d4c:	1c58      	adds	r0, r3, #1
1a001d4e:	b2c0      	uxtb	r0, r0
1a001d50:	4770      	bx	lr
   } else {
      positionInList = 0;
1a001d52:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a001d54:	4770      	bx	lr
1a001d56:	bf00      	nop
1a001d58:	10000054 	.word	0x10000054

1a001d5c <pwmAttach>:
{
1a001d5c:	b510      	push	{r4, lr}
1a001d5e:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a001d60:	f7ff ffe8 	bl	1a001d34 <pwmIsAttached>
   if(position==0) {
1a001d64:	b970      	cbnz	r0, 1a001d84 <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a001d66:	20ff      	movs	r0, #255	; 0xff
1a001d68:	f7ff ffe4 	bl	1a001d34 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a001d6c:	b908      	cbnz	r0, 1a001d72 <pwmAttach+0x16>
   bool_t success = FALSE;
1a001d6e:	2000      	movs	r0, #0
1a001d70:	e009      	b.n	1a001d86 <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a001d72:	1e43      	subs	r3, r0, #1
1a001d74:	4a04      	ldr	r2, [pc, #16]	; (1a001d88 <pwmAttach+0x2c>)
1a001d76:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a001d78:	4b04      	ldr	r3, [pc, #16]	; (1a001d8c <pwmAttach+0x30>)
1a001d7a:	5d18      	ldrb	r0, [r3, r4]
1a001d7c:	f7ff fe9e 	bl	1a001abc <Sct_EnablePwmFor>
         success = TRUE;
1a001d80:	2001      	movs	r0, #1
1a001d82:	e000      	b.n	1a001d86 <pwmAttach+0x2a>
   bool_t success = FALSE;
1a001d84:	2000      	movs	r0, #0
}
1a001d86:	bd10      	pop	{r4, pc}
1a001d88:	10000054 	.word	0x10000054
1a001d8c:	1a0043c0 	.word	0x1a0043c0

1a001d90 <pwmDetach>:
{
1a001d90:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a001d92:	f7ff ffcf 	bl	1a001d34 <pwmIsAttached>
   if(position) {
1a001d96:	b128      	cbz	r0, 1a001da4 <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a001d98:	1e43      	subs	r3, r0, #1
1a001d9a:	4a03      	ldr	r2, [pc, #12]	; (1a001da8 <pwmDetach+0x18>)
1a001d9c:	21ff      	movs	r1, #255	; 0xff
1a001d9e:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a001da0:	2001      	movs	r0, #1
1a001da2:	e000      	b.n	1a001da6 <pwmDetach+0x16>
   bool_t success = FALSE;
1a001da4:	2000      	movs	r0, #0
}
1a001da6:	bd08      	pop	{r3, pc}
1a001da8:	10000054 	.word	0x10000054

1a001dac <pwmInit>:
{
1a001dac:	b508      	push	{r3, lr}
   switch(config) {
1a001dae:	2902      	cmp	r1, #2
1a001db0:	d008      	beq.n	1a001dc4 <pwmInit+0x18>
1a001db2:	2903      	cmp	r1, #3
1a001db4:	d009      	beq.n	1a001dca <pwmInit+0x1e>
1a001db6:	b109      	cbz	r1, 1a001dbc <pwmInit+0x10>
      ret_val = 0;
1a001db8:	2000      	movs	r0, #0
}
1a001dba:	bd08      	pop	{r3, pc}
      pwmInitTimers();
1a001dbc:	f7ff ffb3 	bl	1a001d26 <pwmInitTimers>
   bool_t ret_val = 1;
1a001dc0:	2001      	movs	r0, #1
      break;
1a001dc2:	e7fa      	b.n	1a001dba <pwmInit+0xe>
      ret_val = pwmAttach( pwmNumber );
1a001dc4:	f7ff ffca 	bl	1a001d5c <pwmAttach>
      break;
1a001dc8:	e7f7      	b.n	1a001dba <pwmInit+0xe>
      ret_val = pwmDetach( pwmNumber );
1a001dca:	f7ff ffe1 	bl	1a001d90 <pwmDetach>
      break;
1a001dce:	e7f4      	b.n	1a001dba <pwmInit+0xe>

1a001dd0 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001dd0:	4b01      	ldr	r3, [pc, #4]	; (1a001dd8 <tickRead+0x8>)
1a001dd2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001dd6:	4770      	bx	lr
1a001dd8:	100001a0 	.word	0x100001a0

1a001ddc <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001ddc:	b118      	cbz	r0, 1a001de6 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001dde:	4b04      	ldr	r3, [pc, #16]	; (1a001df0 <tickPowerSet+0x14>)
1a001de0:	2207      	movs	r2, #7
1a001de2:	601a      	str	r2, [r3, #0]
1a001de4:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001de6:	4b02      	ldr	r3, [pc, #8]	; (1a001df0 <tickPowerSet+0x14>)
1a001de8:	2200      	movs	r2, #0
1a001dea:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001dec:	4770      	bx	lr
1a001dee:	bf00      	nop
1a001df0:	e000e010 	.word	0xe000e010

1a001df4 <tickInit>:
{
1a001df4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001df6:	ea50 0401 	orrs.w	r4, r0, r1
1a001dfa:	d02a      	beq.n	1a001e52 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001dfc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001e00:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001e04:	2b00      	cmp	r3, #0
1a001e06:	bf08      	it	eq
1a001e08:	2a32      	cmpeq	r2, #50	; 0x32
1a001e0a:	d227      	bcs.n	1a001e5c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001e0c:	4b14      	ldr	r3, [pc, #80]	; (1a001e60 <tickInit+0x6c>)
1a001e0e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001e12:	4b14      	ldr	r3, [pc, #80]	; (1a001e64 <tickInit+0x70>)
1a001e14:	681b      	ldr	r3, [r3, #0]
1a001e16:	fba3 4500 	umull	r4, r5, r3, r0
1a001e1a:	fb03 5501 	mla	r5, r3, r1, r5
1a001e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001e22:	2300      	movs	r3, #0
1a001e24:	4620      	mov	r0, r4
1a001e26:	4629      	mov	r1, r5
1a001e28:	f000 fcee 	bl	1a002808 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001e2c:	3801      	subs	r0, #1
1a001e2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001e32:	d209      	bcs.n	1a001e48 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001e34:	4b0c      	ldr	r3, [pc, #48]	; (1a001e68 <tickInit+0x74>)
1a001e36:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001e38:	4a0c      	ldr	r2, [pc, #48]	; (1a001e6c <tickInit+0x78>)
1a001e3a:	21e0      	movs	r1, #224	; 0xe0
1a001e3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001e40:	2200      	movs	r2, #0
1a001e42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001e44:	2207      	movs	r2, #7
1a001e46:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001e48:	2001      	movs	r0, #1
1a001e4a:	f7ff ffc7 	bl	1a001ddc <tickPowerSet>
      bool_t ret_val = 1;
1a001e4e:	2001      	movs	r0, #1
}
1a001e50:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001e52:	2000      	movs	r0, #0
1a001e54:	f7ff ffc2 	bl	1a001ddc <tickPowerSet>
         ret_val = 0;
1a001e58:	2000      	movs	r0, #0
1a001e5a:	e7f9      	b.n	1a001e50 <tickInit+0x5c>
            ret_val = 0;
1a001e5c:	2000      	movs	r0, #0
1a001e5e:	e7f7      	b.n	1a001e50 <tickInit+0x5c>
1a001e60:	10000060 	.word	0x10000060
1a001e64:	100001b8 	.word	0x100001b8
1a001e68:	e000e010 	.word	0xe000e010
1a001e6c:	e000ed00 	.word	0xe000ed00

1a001e70 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001e70:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001e72:	4a07      	ldr	r2, [pc, #28]	; (1a001e90 <SysTick_Handler+0x20>)
1a001e74:	6813      	ldr	r3, [r2, #0]
1a001e76:	6851      	ldr	r1, [r2, #4]
1a001e78:	3301      	adds	r3, #1
1a001e7a:	f141 0100 	adc.w	r1, r1, #0
1a001e7e:	6013      	str	r3, [r2, #0]
1a001e80:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001e82:	4b04      	ldr	r3, [pc, #16]	; (1a001e94 <SysTick_Handler+0x24>)
1a001e84:	681b      	ldr	r3, [r3, #0]
1a001e86:	b113      	cbz	r3, 1a001e8e <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001e88:	4a03      	ldr	r2, [pc, #12]	; (1a001e98 <SysTick_Handler+0x28>)
1a001e8a:	6810      	ldr	r0, [r2, #0]
1a001e8c:	4798      	blx	r3
   }
}
1a001e8e:	bd08      	pop	{r3, pc}
1a001e90:	100001a0 	.word	0x100001a0
1a001e94:	100001a8 	.word	0x100001a8
1a001e98:	10000198 	.word	0x10000198

1a001e9c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001e9c:	e7fe      	b.n	1a001e9c <errorOcurred>

1a001e9e <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a001e9e:	4770      	bx	lr

1a001ea0 <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer )
{
1a001ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a001ea4:	2900      	cmp	r1, #0
1a001ea6:	d077      	beq.n	1a001f98 <Timer_Init+0xf8>
1a001ea8:	4605      	mov	r5, r0
1a001eaa:	4617      	mov	r7, r2
1a001eac:	460e      	mov	r6, r1
      errorOcurred(0);
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a001eae:	4604      	mov	r4, r0
1a001eb0:	493e      	ldr	r1, [pc, #248]	; (1a001fac <Timer_Init+0x10c>)
1a001eb2:	0043      	lsls	r3, r0, #1
1a001eb4:	4403      	add	r3, r0
1a001eb6:	009a      	lsls	r2, r3, #2
1a001eb8:	eb01 0802 	add.w	r8, r1, r2
1a001ebc:	5888      	ldr	r0, [r1, r2]
1a001ebe:	f7ff fc3d 	bl	1a00173c <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a001ec2:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a001ec6:	f003 011f 	and.w	r1, r3, #31
1a001eca:	095b      	lsrs	r3, r3, #5
1a001ecc:	2201      	movs	r2, #1
1a001ece:	408a      	lsls	r2, r1
1a001ed0:	3340      	adds	r3, #64	; 0x40
1a001ed2:	4937      	ldr	r1, [pc, #220]	; (1a001fb0 <Timer_Init+0x110>)
1a001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a001ed8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001edc:	009a      	lsls	r2, r3, #2
1a001ede:	4b33      	ldr	r3, [pc, #204]	; (1a001fac <Timer_Init+0x10c>)
1a001ee0:	4413      	add	r3, r2
1a001ee2:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001ee4:	095a      	lsrs	r2, r3, #5
1a001ee6:	3254      	adds	r2, #84	; 0x54
1a001ee8:	4931      	ldr	r1, [pc, #196]	; (1a001fb0 <Timer_Init+0x110>)
1a001eea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a001eee:	f003 031f 	and.w	r3, r3, #31
1a001ef2:	2201      	movs	r2, #1
1a001ef4:	fa02 f303 	lsl.w	r3, r2, r3
1a001ef8:	4219      	tst	r1, r3
1a001efa:	d0ed      	beq.n	1a001ed8 <Timer_Init+0x38>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a001efc:	492b      	ldr	r1, [pc, #172]	; (1a001fac <Timer_Init+0x10c>)
1a001efe:	fa05 f302 	lsl.w	r3, r5, r2
1a001f02:	442b      	add	r3, r5
1a001f04:	009a      	lsls	r2, r3, #2
1a001f06:	eb01 0802 	add.w	r8, r1, r2
1a001f0a:	588c      	ldr	r4, [r1, r2]
1a001f0c:	4620      	mov	r0, r4
1a001f0e:	f7ff fc1b 	bl	1a001748 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a001f12:	012b      	lsls	r3, r5, #4
1a001f14:	4a27      	ldr	r2, [pc, #156]	; (1a001fb4 <Timer_Init+0x114>)
1a001f16:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001f18:	6963      	ldr	r3, [r4, #20]
1a001f1a:	f043 0301 	orr.w	r3, r3, #1
1a001f1e:	6163      	str	r3, [r4, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001f20:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a001f22:	6963      	ldr	r3, [r4, #20]
1a001f24:	f043 0302 	orr.w	r3, r3, #2
1a001f28:	6163      	str	r3, [r4, #20]
	pTMR->TCR |= TIMER_ENABLE;
1a001f2a:	6863      	ldr	r3, [r4, #4]
1a001f2c:	f043 0301 	orr.w	r3, r3, #1
1a001f30:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a001f32:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001f36:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001f38:	2b00      	cmp	r3, #0
1a001f3a:	db30      	blt.n	1a001f9e <Timer_Init+0xfe>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001f3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001f40:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001f44:	22c0      	movs	r2, #192	; 0xc0
1a001f46:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a001f4a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a001f4e:	009a      	lsls	r2, r3, #2
1a001f50:	4b16      	ldr	r3, [pc, #88]	; (1a001fac <Timer_Init+0x10c>)
1a001f52:	4413      	add	r3, r2
1a001f54:	689a      	ldr	r2, [r3, #8]
1a001f56:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001f58:	2b00      	cmp	r3, #0
1a001f5a:	db08      	blt.n	1a001f6e <Timer_Init+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001f5c:	f002 021f 	and.w	r2, r2, #31
1a001f60:	095b      	lsrs	r3, r3, #5
1a001f62:	2101      	movs	r1, #1
1a001f64:	fa01 f202 	lsl.w	r2, r1, r2
1a001f68:	4913      	ldr	r1, [pc, #76]	; (1a001fb8 <Timer_Init+0x118>)
1a001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a001f6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a001f72:	00aa      	lsls	r2, r5, #2
1a001f74:	4b0d      	ldr	r3, [pc, #52]	; (1a001fac <Timer_Init+0x10c>)
1a001f76:	4413      	add	r3, r2
1a001f78:	689a      	ldr	r2, [r3, #8]
1a001f7a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001f7c:	2b00      	cmp	r3, #0
1a001f7e:	db09      	blt.n	1a001f94 <Timer_Init+0xf4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001f80:	f002 021f 	and.w	r2, r2, #31
1a001f84:	095b      	lsrs	r3, r3, #5
1a001f86:	2101      	movs	r1, #1
1a001f88:	fa01 f202 	lsl.w	r2, r1, r2
1a001f8c:	3360      	adds	r3, #96	; 0x60
1a001f8e:	490a      	ldr	r1, [pc, #40]	; (1a001fb8 <Timer_Init+0x118>)
1a001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      errorOcurred(0);
1a001f98:	2000      	movs	r0, #0
1a001f9a:	f7ff ff7f 	bl	1a001e9c <errorOcurred>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001f9e:	f002 020f 	and.w	r2, r2, #15
1a001fa2:	4b06      	ldr	r3, [pc, #24]	; (1a001fbc <Timer_Init+0x11c>)
1a001fa4:	4413      	add	r3, r2
1a001fa6:	22c0      	movs	r2, #192	; 0xc0
1a001fa8:	761a      	strb	r2, [r3, #24]
1a001faa:	e7ce      	b.n	1a001f4a <Timer_Init+0xaa>
1a001fac:	1a0043cc 	.word	0x1a0043cc
1a001fb0:	40053000 	.word	0x40053000
1a001fb4:	10000068 	.word	0x10000068
1a001fb8:	e000e100 	.word	0xe000e100
1a001fbc:	e000ecfc 	.word	0xe000ecfc

1a001fc0 <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a001fc0:	23cc      	movs	r3, #204	; 0xcc
1a001fc2:	fb03 f000 	mul.w	r0, r3, r0
1a001fc6:	4770      	bx	lr

1a001fc8 <Timer_EnableCompareMatch>:
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               callBackFuncPtr_t voidFunctionPointer )
{
1a001fc8:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a001fca:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a001fce:	4c0a      	ldr	r4, [pc, #40]	; (1a001ff8 <Timer_EnableCompareMatch+0x30>)
1a001fd0:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a001fd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001fd8:	0083      	lsls	r3, r0, #2
1a001fda:	4808      	ldr	r0, [pc, #32]	; (1a001ffc <Timer_EnableCompareMatch+0x34>)
1a001fdc:	58c3      	ldr	r3, [r0, r3]
1a001fde:	b249      	sxtb	r1, r1
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001fe0:	6958      	ldr	r0, [r3, #20]
1a001fe2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a001fe6:	2401      	movs	r4, #1
1a001fe8:	40ac      	lsls	r4, r5
1a001fea:	4320      	orrs	r0, r4
1a001fec:	6158      	str	r0, [r3, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001fee:	3106      	adds	r1, #6
1a001ff0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a001ff4:	bc30      	pop	{r4, r5}
1a001ff6:	4770      	bx	lr
1a001ff8:	10000068 	.word	0x10000068
1a001ffc:	1a0043cc 	.word	0x1a0043cc

1a002000 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002000:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002002:	2400      	movs	r4, #0
1a002004:	e001      	b.n	1a00200a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002006:	3401      	adds	r4, #1
1a002008:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00200a:	2c03      	cmp	r4, #3
1a00200c:	d812      	bhi.n	1a002034 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00200e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002010:	4b09      	ldr	r3, [pc, #36]	; (1a002038 <TIMER0_IRQHandler+0x38>)
1a002012:	681a      	ldr	r2, [r3, #0]
1a002014:	f004 010f 	and.w	r1, r4, #15
1a002018:	2301      	movs	r3, #1
1a00201a:	408b      	lsls	r3, r1
1a00201c:	421a      	tst	r2, r3
1a00201e:	d0f2      	beq.n	1a002006 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002020:	4b06      	ldr	r3, [pc, #24]	; (1a00203c <TIMER0_IRQHandler+0x3c>)
1a002022:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002026:	2000      	movs	r0, #0
1a002028:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00202a:	2301      	movs	r3, #1
1a00202c:	40ab      	lsls	r3, r5
1a00202e:	4a02      	ldr	r2, [pc, #8]	; (1a002038 <TIMER0_IRQHandler+0x38>)
1a002030:	6013      	str	r3, [r2, #0]
1a002032:	e7e8      	b.n	1a002006 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002034:	bd38      	pop	{r3, r4, r5, pc}
1a002036:	bf00      	nop
1a002038:	40084000 	.word	0x40084000
1a00203c:	10000068 	.word	0x10000068

1a002040 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002040:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002042:	2400      	movs	r4, #0
1a002044:	e001      	b.n	1a00204a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002046:	3401      	adds	r4, #1
1a002048:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00204a:	2c03      	cmp	r4, #3
1a00204c:	d813      	bhi.n	1a002076 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00204e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002050:	4b09      	ldr	r3, [pc, #36]	; (1a002078 <TIMER1_IRQHandler+0x38>)
1a002052:	681a      	ldr	r2, [r3, #0]
1a002054:	f004 010f 	and.w	r1, r4, #15
1a002058:	2301      	movs	r3, #1
1a00205a:	408b      	lsls	r3, r1
1a00205c:	421a      	tst	r2, r3
1a00205e:	d0f2      	beq.n	1a002046 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002060:	1d23      	adds	r3, r4, #4
1a002062:	4a06      	ldr	r2, [pc, #24]	; (1a00207c <TIMER1_IRQHandler+0x3c>)
1a002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002068:	2000      	movs	r0, #0
1a00206a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00206c:	2301      	movs	r3, #1
1a00206e:	40ab      	lsls	r3, r5
1a002070:	4a01      	ldr	r2, [pc, #4]	; (1a002078 <TIMER1_IRQHandler+0x38>)
1a002072:	6013      	str	r3, [r2, #0]
1a002074:	e7e7      	b.n	1a002046 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002076:	bd38      	pop	{r3, r4, r5, pc}
1a002078:	40085000 	.word	0x40085000
1a00207c:	10000068 	.word	0x10000068

1a002080 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002080:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002082:	2400      	movs	r4, #0
1a002084:	e001      	b.n	1a00208a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002086:	3401      	adds	r4, #1
1a002088:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00208a:	2c03      	cmp	r4, #3
1a00208c:	d814      	bhi.n	1a0020b8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00208e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002090:	4b0a      	ldr	r3, [pc, #40]	; (1a0020bc <TIMER2_IRQHandler+0x3c>)
1a002092:	681a      	ldr	r2, [r3, #0]
1a002094:	f004 010f 	and.w	r1, r4, #15
1a002098:	2301      	movs	r3, #1
1a00209a:	408b      	lsls	r3, r1
1a00209c:	421a      	tst	r2, r3
1a00209e:	d0f2      	beq.n	1a002086 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0020a0:	f104 0308 	add.w	r3, r4, #8
1a0020a4:	4a06      	ldr	r2, [pc, #24]	; (1a0020c0 <TIMER2_IRQHandler+0x40>)
1a0020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0020aa:	2000      	movs	r0, #0
1a0020ac:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0020ae:	2301      	movs	r3, #1
1a0020b0:	40ab      	lsls	r3, r5
1a0020b2:	4a02      	ldr	r2, [pc, #8]	; (1a0020bc <TIMER2_IRQHandler+0x3c>)
1a0020b4:	6013      	str	r3, [r2, #0]
1a0020b6:	e7e6      	b.n	1a002086 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0020b8:	bd38      	pop	{r3, r4, r5, pc}
1a0020ba:	bf00      	nop
1a0020bc:	400c3000 	.word	0x400c3000
1a0020c0:	10000068 	.word	0x10000068

1a0020c4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0020c4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0020c6:	2400      	movs	r4, #0
1a0020c8:	e001      	b.n	1a0020ce <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0020ca:	3401      	adds	r4, #1
1a0020cc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0020ce:	2c03      	cmp	r4, #3
1a0020d0:	d814      	bhi.n	1a0020fc <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0020d2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0020d4:	4b0a      	ldr	r3, [pc, #40]	; (1a002100 <TIMER3_IRQHandler+0x3c>)
1a0020d6:	681a      	ldr	r2, [r3, #0]
1a0020d8:	f004 010f 	and.w	r1, r4, #15
1a0020dc:	2301      	movs	r3, #1
1a0020de:	408b      	lsls	r3, r1
1a0020e0:	421a      	tst	r2, r3
1a0020e2:	d0f2      	beq.n	1a0020ca <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0020e4:	f104 030c 	add.w	r3, r4, #12
1a0020e8:	4a06      	ldr	r2, [pc, #24]	; (1a002104 <TIMER3_IRQHandler+0x40>)
1a0020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0020ee:	2000      	movs	r0, #0
1a0020f0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0020f2:	2301      	movs	r3, #1
1a0020f4:	40ab      	lsls	r3, r5
1a0020f6:	4a02      	ldr	r2, [pc, #8]	; (1a002100 <TIMER3_IRQHandler+0x3c>)
1a0020f8:	6013      	str	r3, [r2, #0]
1a0020fa:	e7e6      	b.n	1a0020ca <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0020fc:	bd38      	pop	{r3, r4, r5, pc}
1a0020fe:	bf00      	nop
1a002100:	400c4000 	.word	0x400c4000
1a002104:	10000068 	.word	0x10000068

1a002108 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a002108:	b530      	push	{r4, r5, lr}
1a00210a:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a00210c:	b118      	cbz	r0, 1a002116 <adcInit+0xe>
1a00210e:	2801      	cmp	r0, #1
1a002110:	d04b      	beq.n	1a0021aa <adcInit+0xa2>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a002112:	b003      	add	sp, #12
1a002114:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a002116:	4b27      	ldr	r3, [pc, #156]	; (1a0021b4 <adcInit+0xac>)
1a002118:	9300      	str	r3, [sp, #0]
1a00211a:	2500      	movs	r5, #0
1a00211c:	f88d 5004 	strb.w	r5, [sp, #4]
1a002120:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a002124:	4c24      	ldr	r4, [pc, #144]	; (1a0021b8 <adcInit+0xb0>)
1a002126:	4669      	mov	r1, sp
1a002128:	4620      	mov	r0, r4
1a00212a:	f7fe ff57 	bl	1a000fdc <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a00212e:	4629      	mov	r1, r5
1a002130:	4620      	mov	r0, r4
1a002132:	f7fe fff2 	bl	1a00111a <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a002136:	4a21      	ldr	r2, [pc, #132]	; (1a0021bc <adcInit+0xb4>)
1a002138:	4669      	mov	r1, sp
1a00213a:	4620      	mov	r0, r4
1a00213c:	f7fe ffb9 	bl	1a0010b2 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a002140:	462a      	mov	r2, r5
1a002142:	2101      	movs	r1, #1
1a002144:	4620      	mov	r0, r4
1a002146:	f7fe ffd3 	bl	1a0010f0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a00214a:	462a      	mov	r2, r5
1a00214c:	2101      	movs	r1, #1
1a00214e:	4620      	mov	r0, r4
1a002150:	f7fe ff8e 	bl	1a001070 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a002154:	462a      	mov	r2, r5
1a002156:	2102      	movs	r1, #2
1a002158:	4620      	mov	r0, r4
1a00215a:	f7fe ffc9 	bl	1a0010f0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a00215e:	462a      	mov	r2, r5
1a002160:	2102      	movs	r1, #2
1a002162:	4620      	mov	r0, r4
1a002164:	f7fe ff84 	bl	1a001070 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a002168:	462a      	mov	r2, r5
1a00216a:	2103      	movs	r1, #3
1a00216c:	4620      	mov	r0, r4
1a00216e:	f7fe ffbf 	bl	1a0010f0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a002172:	462a      	mov	r2, r5
1a002174:	2103      	movs	r1, #3
1a002176:	4620      	mov	r0, r4
1a002178:	f7fe ff7a 	bl	1a001070 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a00217c:	462a      	mov	r2, r5
1a00217e:	2104      	movs	r1, #4
1a002180:	4620      	mov	r0, r4
1a002182:	f7fe ffb5 	bl	1a0010f0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a002186:	462a      	mov	r2, r5
1a002188:	2104      	movs	r1, #4
1a00218a:	4620      	mov	r0, r4
1a00218c:	f7fe ff70 	bl	1a001070 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a002190:	4a0b      	ldr	r2, [pc, #44]	; (1a0021c0 <adcInit+0xb8>)
1a002192:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a002196:	f043 0310 	orr.w	r3, r3, #16
1a00219a:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a00219e:	462a      	mov	r2, r5
1a0021a0:	2105      	movs	r1, #5
1a0021a2:	4620      	mov	r0, r4
1a0021a4:	f7fe ff64 	bl	1a001070 <Chip_ADC_Int_SetChannelCmd>
      break;
1a0021a8:	e7b3      	b.n	1a002112 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a0021aa:	4803      	ldr	r0, [pc, #12]	; (1a0021b8 <adcInit+0xb0>)
1a0021ac:	f7fe ff36 	bl	1a00101c <Chip_ADC_DeInit>
}
1a0021b0:	e7af      	b.n	1a002112 <adcInit+0xa>
1a0021b2:	bf00      	nop
1a0021b4:	00061a80 	.word	0x00061a80
1a0021b8:	400e3000 	.word	0x400e3000
1a0021bc:	00030d40 	.word	0x00030d40
1a0021c0:	40086000 	.word	0x40086000

1a0021c4 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0021c4:	b570      	push	{r4, r5, r6, lr}
1a0021c6:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = (uint8_t)(analogInput + 1);
1a0021c8:	3001      	adds	r0, #1
1a0021ca:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0021cc:	2600      	movs	r6, #0
1a0021ce:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0021d2:	4d11      	ldr	r5, [pc, #68]	; (1a002218 <adcRead+0x54>)
1a0021d4:	2201      	movs	r2, #1
1a0021d6:	4621      	mov	r1, r4
1a0021d8:	4628      	mov	r0, r5
1a0021da:	f7fe ff89 	bl	1a0010f0 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0021de:	4632      	mov	r2, r6
1a0021e0:	2101      	movs	r1, #1
1a0021e2:	4628      	mov	r0, r5
1a0021e4:	f7fe ff55 	bl	1a001092 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0021e8:	2200      	movs	r2, #0
1a0021ea:	4621      	mov	r1, r4
1a0021ec:	480a      	ldr	r0, [pc, #40]	; (1a002218 <adcRead+0x54>)
1a0021ee:	f7fe ff24 	bl	1a00103a <Chip_ADC_ReadStatus>
   while(
1a0021f2:	2801      	cmp	r0, #1
1a0021f4:	d1f8      	bne.n	1a0021e8 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0021f6:	4d08      	ldr	r5, [pc, #32]	; (1a002218 <adcRead+0x54>)
1a0021f8:	f10d 0206 	add.w	r2, sp, #6
1a0021fc:	4621      	mov	r1, r4
1a0021fe:	4628      	mov	r0, r5
1a002200:	f7fe ff17 	bl	1a001032 <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a002204:	2200      	movs	r2, #0
1a002206:	4621      	mov	r1, r4
1a002208:	4628      	mov	r0, r5
1a00220a:	f7fe ff71 	bl	1a0010f0 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00220e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a002212:	b002      	add	sp, #8
1a002214:	bd70      	pop	{r4, r5, r6, pc}
1a002216:	bf00      	nop
1a002218:	400e3000 	.word	0x400e3000

1a00221c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00221c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00221e:	4d0b      	ldr	r5, [pc, #44]	; (1a00224c <gpioObtainPinInit+0x30>)
1a002220:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002224:	182c      	adds	r4, r5, r0
1a002226:	5628      	ldrsb	r0, [r5, r0]
1a002228:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00222a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00222e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002230:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002234:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002236:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00223a:	9b02      	ldr	r3, [sp, #8]
1a00223c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00223e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002242:	9b03      	ldr	r3, [sp, #12]
1a002244:	701a      	strb	r2, [r3, #0]
}
1a002246:	bc30      	pop	{r4, r5}
1a002248:	4770      	bx	lr
1a00224a:	bf00      	nop
1a00224c:	1a0043fc 	.word	0x1a0043fc

1a002250 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002250:	f110 0f02 	cmn.w	r0, #2
1a002254:	f000 80c7 	beq.w	1a0023e6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002258:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00225c:	f000 80c5 	beq.w	1a0023ea <gpioInit+0x19a>
{
1a002260:	b570      	push	{r4, r5, r6, lr}
1a002262:	b084      	sub	sp, #16
1a002264:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002266:	2300      	movs	r3, #0
1a002268:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00226c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002270:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002274:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002278:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00227c:	f10d 030b 	add.w	r3, sp, #11
1a002280:	9301      	str	r3, [sp, #4]
1a002282:	ab03      	add	r3, sp, #12
1a002284:	9300      	str	r3, [sp, #0]
1a002286:	f10d 030d 	add.w	r3, sp, #13
1a00228a:	f10d 020e 	add.w	r2, sp, #14
1a00228e:	f10d 010f 	add.w	r1, sp, #15
1a002292:	f7ff ffc3 	bl	1a00221c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002296:	2c05      	cmp	r4, #5
1a002298:	f200 80a9 	bhi.w	1a0023ee <gpioInit+0x19e>
1a00229c:	e8df f004 	tbb	[pc, r4]
1a0022a0:	45278109 	.word	0x45278109
1a0022a4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0022a6:	4853      	ldr	r0, [pc, #332]	; (1a0023f4 <gpioInit+0x1a4>)
1a0022a8:	f7ff fa62 	bl	1a001770 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0022ac:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0022ae:	b004      	add	sp, #16
1a0022b0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0022b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022be:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0022c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022c6:	494c      	ldr	r1, [pc, #304]	; (1a0023f8 <gpioInit+0x1a8>)
1a0022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0022cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0022d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022d4:	2001      	movs	r0, #1
1a0022d6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0022da:	4c46      	ldr	r4, [pc, #280]	; (1a0023f4 <gpioInit+0x1a4>)
1a0022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0022e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0022e4:	ea22 0201 	bic.w	r2, r2, r1
1a0022e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0022ec:	e7df      	b.n	1a0022ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0022ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0022fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0022fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002302:	493d      	ldr	r1, [pc, #244]	; (1a0023f8 <gpioInit+0x1a8>)
1a002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002308:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00230c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002310:	2001      	movs	r0, #1
1a002312:	fa00 f102 	lsl.w	r1, r0, r2
1a002316:	4c37      	ldr	r4, [pc, #220]	; (1a0023f4 <gpioInit+0x1a4>)
1a002318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00231c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002320:	ea22 0201 	bic.w	r2, r2, r1
1a002324:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002328:	e7c1      	b.n	1a0022ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00232a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00232e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002332:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002336:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00233a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00233e:	492e      	ldr	r1, [pc, #184]	; (1a0023f8 <gpioInit+0x1a8>)
1a002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002344:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002348:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00234c:	2001      	movs	r0, #1
1a00234e:	fa00 f102 	lsl.w	r1, r0, r2
1a002352:	4c28      	ldr	r4, [pc, #160]	; (1a0023f4 <gpioInit+0x1a4>)
1a002354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002358:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00235c:	ea22 0201 	bic.w	r2, r2, r1
1a002360:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002364:	e7a3      	b.n	1a0022ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002366:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00236a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00236e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002372:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002376:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00237a:	491f      	ldr	r1, [pc, #124]	; (1a0023f8 <gpioInit+0x1a8>)
1a00237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002380:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002384:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002388:	2001      	movs	r0, #1
1a00238a:	fa00 f102 	lsl.w	r1, r0, r2
1a00238e:	4c19      	ldr	r4, [pc, #100]	; (1a0023f4 <gpioInit+0x1a4>)
1a002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002394:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002398:	ea22 0201 	bic.w	r2, r2, r1
1a00239c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0023a0:	e785      	b.n	1a0022ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0023a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0023a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0023aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0023ae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0023b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0023b6:	4910      	ldr	r1, [pc, #64]	; (1a0023f8 <gpioInit+0x1a8>)
1a0023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0023bc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0023c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0023c4:	2001      	movs	r0, #1
1a0023c6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0023ca:	4b0a      	ldr	r3, [pc, #40]	; (1a0023f4 <gpioInit+0x1a4>)
1a0023cc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0023d0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0023d4:	4331      	orrs	r1, r6
1a0023d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0023da:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0023dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0023e0:	2100      	movs	r1, #0
1a0023e2:	5499      	strb	r1, [r3, r2]
1a0023e4:	e763      	b.n	1a0022ae <gpioInit+0x5e>
	  return FALSE;
1a0023e6:	2000      	movs	r0, #0
1a0023e8:	4770      	bx	lr
	  return FALSE;
1a0023ea:	2000      	movs	r0, #0
}
1a0023ec:	4770      	bx	lr
      ret_val = 0;
1a0023ee:	2000      	movs	r0, #0
1a0023f0:	e75d      	b.n	1a0022ae <gpioInit+0x5e>
1a0023f2:	bf00      	nop
1a0023f4:	400f4000 	.word	0x400f4000
1a0023f8:	40086000 	.word	0x40086000

1a0023fc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0023fc:	f110 0f02 	cmn.w	r0, #2
1a002400:	d02d      	beq.n	1a00245e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a002402:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002406:	d02c      	beq.n	1a002462 <gpioWrite+0x66>
{
1a002408:	b510      	push	{r4, lr}
1a00240a:	b084      	sub	sp, #16
1a00240c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00240e:	2300      	movs	r3, #0
1a002410:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002414:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002418:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00241c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002420:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002424:	f10d 030b 	add.w	r3, sp, #11
1a002428:	9301      	str	r3, [sp, #4]
1a00242a:	ab03      	add	r3, sp, #12
1a00242c:	9300      	str	r3, [sp, #0]
1a00242e:	f10d 030d 	add.w	r3, sp, #13
1a002432:	f10d 020e 	add.w	r2, sp, #14
1a002436:	f10d 010f 	add.w	r1, sp, #15
1a00243a:	f7ff feef 	bl	1a00221c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00243e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002442:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002446:	1c21      	adds	r1, r4, #0
1a002448:	bf18      	it	ne
1a00244a:	2101      	movne	r1, #1
1a00244c:	015b      	lsls	r3, r3, #5
1a00244e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002452:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002456:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002458:	2001      	movs	r0, #1
}
1a00245a:	b004      	add	sp, #16
1a00245c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00245e:	2000      	movs	r0, #0
1a002460:	4770      	bx	lr
	  return FALSE;
1a002462:	2000      	movs	r0, #0
}
1a002464:	4770      	bx	lr
1a002466:	Address 0x000000001a002466 is out of bounds.


1a002468 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002468:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00246a:	4b04      	ldr	r3, [pc, #16]	; (1a00247c <USB0_IRQHandler+0x14>)
1a00246c:	681b      	ldr	r3, [r3, #0]
1a00246e:	681b      	ldr	r3, [r3, #0]
1a002470:	68db      	ldr	r3, [r3, #12]
1a002472:	4a03      	ldr	r2, [pc, #12]	; (1a002480 <USB0_IRQHandler+0x18>)
1a002474:	6810      	ldr	r0, [r2, #0]
1a002476:	4798      	blx	r3
}
1a002478:	bd08      	pop	{r3, pc}
1a00247a:	bf00      	nop
1a00247c:	100001bc 	.word	0x100001bc
1a002480:	100001ac 	.word	0x100001ac

1a002484 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002484:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002486:	f7ff f939 	bl	1a0016fc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00248a:	4b1a      	ldr	r3, [pc, #104]	; (1a0024f4 <boardInit+0x70>)
1a00248c:	6818      	ldr	r0, [r3, #0]
1a00248e:	f7ff fadb 	bl	1a001a48 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a002492:	2001      	movs	r0, #1
1a002494:	2100      	movs	r1, #0
1a002496:	f7ff fcad 	bl	1a001df4 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00249a:	2105      	movs	r1, #5
1a00249c:	2000      	movs	r0, #0
1a00249e:	f7ff fed7 	bl	1a002250 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0024a2:	2100      	movs	r1, #0
1a0024a4:	2024      	movs	r0, #36	; 0x24
1a0024a6:	f7ff fed3 	bl	1a002250 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0024aa:	2100      	movs	r1, #0
1a0024ac:	2025      	movs	r0, #37	; 0x25
1a0024ae:	f7ff fecf 	bl	1a002250 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0024b2:	2100      	movs	r1, #0
1a0024b4:	2026      	movs	r0, #38	; 0x26
1a0024b6:	f7ff fecb 	bl	1a002250 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0024ba:	2100      	movs	r1, #0
1a0024bc:	2027      	movs	r0, #39	; 0x27
1a0024be:	f7ff fec7 	bl	1a002250 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0024c2:	2101      	movs	r1, #1
1a0024c4:	2028      	movs	r0, #40	; 0x28
1a0024c6:	f7ff fec3 	bl	1a002250 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0024ca:	2101      	movs	r1, #1
1a0024cc:	2029      	movs	r0, #41	; 0x29
1a0024ce:	f7ff febf 	bl	1a002250 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0024d2:	2101      	movs	r1, #1
1a0024d4:	202a      	movs	r0, #42	; 0x2a
1a0024d6:	f7ff febb 	bl	1a002250 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0024da:	2101      	movs	r1, #1
1a0024dc:	202b      	movs	r0, #43	; 0x2b
1a0024de:	f7ff feb7 	bl	1a002250 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0024e2:	2101      	movs	r1, #1
1a0024e4:	202c      	movs	r0, #44	; 0x2c
1a0024e6:	f7ff feb3 	bl	1a002250 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0024ea:	2101      	movs	r1, #1
1a0024ec:	202d      	movs	r0, #45	; 0x2d
1a0024ee:	f7ff feaf 	bl	1a002250 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0024f2:	bd08      	pop	{r3, pc}
1a0024f4:	100001b8 	.word	0x100001b8

1a0024f8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0024f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0024fc:	4680      	mov	r8, r0
1a0024fe:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002500:	f7ff fc66 	bl	1a001dd0 <tickRead>
1a002504:	4606      	mov	r6, r0
1a002506:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a002508:	f7ff fc62 	bl	1a001dd0 <tickRead>
1a00250c:	1b84      	subs	r4, r0, r6
1a00250e:	eb61 0507 	sbc.w	r5, r1, r7
1a002512:	4b06      	ldr	r3, [pc, #24]	; (1a00252c <delay+0x34>)
1a002514:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002518:	4640      	mov	r0, r8
1a00251a:	4649      	mov	r1, r9
1a00251c:	f000 f974 	bl	1a002808 <__aeabi_uldivmod>
1a002520:	428d      	cmp	r5, r1
1a002522:	bf08      	it	eq
1a002524:	4284      	cmpeq	r4, r0
1a002526:	d3ef      	bcc.n	1a002508 <delay+0x10>
}
1a002528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00252c:	10000060 	.word	0x10000060

1a002530 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a002530:	b510      	push	{r4, lr}
1a002532:	4604      	mov	r4, r0
1a002534:	4610      	mov	r0, r2
1a002536:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a002538:	4b04      	ldr	r3, [pc, #16]	; (1a00254c <delayInit+0x1c>)
1a00253a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00253e:	f000 f963 	bl	1a002808 <__aeabi_uldivmod>
1a002542:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a002546:	2300      	movs	r3, #0
1a002548:	7423      	strb	r3, [r4, #16]
}
1a00254a:	bd10      	pop	{r4, pc}
1a00254c:	10000060 	.word	0x10000060

1a002550 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002552:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a002554:	7c05      	ldrb	r5, [r0, #16]
1a002556:	b93d      	cbnz	r5, 1a002568 <delayRead+0x18>
      delay->startTime = tickRead();
1a002558:	f7ff fc3a 	bl	1a001dd0 <tickRead>
1a00255c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002560:	2301      	movs	r3, #1
1a002562:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a002564:	4628      	mov	r0, r5
1a002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002568:	f7ff fc32 	bl	1a001dd0 <tickRead>
1a00256c:	6823      	ldr	r3, [r4, #0]
1a00256e:	6862      	ldr	r2, [r4, #4]
1a002570:	1ac6      	subs	r6, r0, r3
1a002572:	eb61 0702 	sbc.w	r7, r1, r2
1a002576:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a00257a:	429f      	cmp	r7, r3
1a00257c:	bf08      	it	eq
1a00257e:	4296      	cmpeq	r6, r2
1a002580:	d303      	bcc.n	1a00258a <delayRead+0x3a>
         delay->running = 0;
1a002582:	2300      	movs	r3, #0
1a002584:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a002586:	2501      	movs	r5, #1
1a002588:	e7ec      	b.n	1a002564 <delayRead+0x14>
   bool_t timeArrived = 0;
1a00258a:	2500      	movs	r5, #0
1a00258c:	e7ea      	b.n	1a002564 <delayRead+0x14>
1a00258e:	Address 0x000000001a00258e is out of bounds.


1a002590 <enableGPIOIrq>:

   Chip_PININT_Init(LPC_GPIO_PIN_INT);
}

static void enableGPIOIrq(uint8_t irqChannel, uint8_t port, uint8_t pin, uint8_t edge)
{
1a002590:	b4f0      	push	{r4, r5, r6, r7}
	int32_t of = (PortSel & 3) << 3;
1a002592:	00c4      	lsls	r4, r0, #3
1a002594:	f004 0418 	and.w	r4, r4, #24
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
1a002598:	0149      	lsls	r1, r1, #5
1a00259a:	b2c9      	uxtb	r1, r1
1a00259c:	f002 021f 	and.w	r2, r2, #31
1a0025a0:	4311      	orrs	r1, r2
1a0025a2:	40a1      	lsls	r1, r4
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0025a4:	0882      	lsrs	r2, r0, #2
1a0025a6:	4f1e      	ldr	r7, [pc, #120]	; (1a002620 <enableGPIOIrq+0x90>)
1a0025a8:	f502 7260 	add.w	r2, r2, #896	; 0x380
1a0025ac:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
1a0025b0:	26ff      	movs	r6, #255	; 0xff
1a0025b2:	fa06 f404 	lsl.w	r4, r6, r4
1a0025b6:	ea25 0404 	bic.w	r4, r5, r4
1a0025ba:	4321      	orrs	r1, r4
1a0025bc:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    * Select irq channel to handle a GPIO interrupt, using its port and pin to specify it
    * From EduCiaa pin out spec: GPIO1[9] -> port 1 and pin 9
    */
   Chip_SCU_GPIOIntPinSel(irqChannel , port, pin);
   /* Clear actual configured interrupt status */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
1a0025c0:	2201      	movs	r2, #1
1a0025c2:	4082      	lsls	r2, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0025c4:	4917      	ldr	r1, [pc, #92]	; (1a002624 <enableGPIOIrq+0x94>)
1a0025c6:	624a      	str	r2, [r1, #36]	; 0x24
	pPININT->ISEL &= ~pins;
1a0025c8:	680c      	ldr	r4, [r1, #0]
1a0025ca:	ea24 0402 	bic.w	r4, r4, r2
1a0025ce:	600c      	str	r4, [r1, #0]
   /* Set edge interrupt mode */
   Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH(irqChannel));

   if ( edge == RAISING_EDGE) {
1a0025d0:	b9e3      	cbnz	r3, 1a00260c <enableGPIOIrq+0x7c>
	pPININT->SIENR = pins;
1a0025d2:	4b14      	ldr	r3, [pc, #80]	; (1a002624 <enableGPIOIrq+0x94>)
1a0025d4:	609a      	str	r2, [r3, #8]
      Chip_PININT_EnableIntHigh(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
      Chip_PININT_EnableIntLow(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
   }

   /* Clear pending irq channel interrupts */
   NVIC_ClearPendingIRQ(PIN_INT0_IRQn + irqChannel);
1a0025d6:	3020      	adds	r0, #32
1a0025d8:	b2c0      	uxtb	r0, r0
1a0025da:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
1a0025dc:	2b00      	cmp	r3, #0
1a0025de:	db08      	blt.n	1a0025f2 <enableGPIOIrq+0x62>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0025e0:	f000 041f 	and.w	r4, r0, #31
1a0025e4:	095a      	lsrs	r2, r3, #5
1a0025e6:	2101      	movs	r1, #1
1a0025e8:	40a1      	lsls	r1, r4
1a0025ea:	3260      	adds	r2, #96	; 0x60
1a0025ec:	4c0e      	ldr	r4, [pc, #56]	; (1a002628 <enableGPIOIrq+0x98>)
1a0025ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
1a0025f2:	2b00      	cmp	r3, #0
1a0025f4:	db08      	blt.n	1a002608 <enableGPIOIrq+0x78>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0025f6:	f000 001f 	and.w	r0, r0, #31
1a0025fa:	095b      	lsrs	r3, r3, #5
1a0025fc:	2201      	movs	r2, #1
1a0025fe:	fa02 f000 	lsl.w	r0, r2, r0
1a002602:	4a09      	ldr	r2, [pc, #36]	; (1a002628 <enableGPIOIrq+0x98>)
1a002604:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   /* Enable irqChannel interrupt */
   NVIC_EnableIRQ(PIN_INT0_IRQn + irqChannel);
}
1a002608:	bcf0      	pop	{r4, r5, r6, r7}
1a00260a:	4770      	bx	lr
   } else if ( edge == FALLING_EDGE) {
1a00260c:	2b01      	cmp	r3, #1
1a00260e:	d003      	beq.n	1a002618 <enableGPIOIrq+0x88>
1a002610:	4b04      	ldr	r3, [pc, #16]	; (1a002624 <enableGPIOIrq+0x94>)
1a002612:	609a      	str	r2, [r3, #8]
	pPININT->SIENF = pins;
1a002614:	615a      	str	r2, [r3, #20]
1a002616:	e7de      	b.n	1a0025d6 <enableGPIOIrq+0x46>
1a002618:	4b02      	ldr	r3, [pc, #8]	; (1a002624 <enableGPIOIrq+0x94>)
1a00261a:	615a      	str	r2, [r3, #20]
1a00261c:	e7db      	b.n	1a0025d6 <enableGPIOIrq+0x46>
1a00261e:	bf00      	nop
1a002620:	40086000 	.word	0x40086000
1a002624:	40087000 	.word	0x40087000
1a002628:	e000e100 	.word	0xe000e100

1a00262c <disableGPIOIrq>:

static void disableGPIOIrq(uint8_t irqChannel)
{
1a00262c:	b410      	push	{r4}
   /* Clear pending irq channel interrupts */
   NVIC_ClearPendingIRQ(PIN_INT0_IRQn + irqChannel);
1a00262e:	3020      	adds	r0, #32
1a002630:	b2c0      	uxtb	r0, r0
1a002632:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
1a002634:	2b00      	cmp	r3, #0
1a002636:	db08      	blt.n	1a00264a <disableGPIOIrq+0x1e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002638:	f000 041f 	and.w	r4, r0, #31
1a00263c:	095a      	lsrs	r2, r3, #5
1a00263e:	2101      	movs	r1, #1
1a002640:	40a1      	lsls	r1, r4
1a002642:	3260      	adds	r2, #96	; 0x60
1a002644:	4c0a      	ldr	r4, [pc, #40]	; (1a002670 <disableGPIOIrq+0x44>)
1a002646:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
1a00264a:	2b00      	cmp	r3, #0
1a00264c:	db0d      	blt.n	1a00266a <disableGPIOIrq+0x3e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00264e:	f000 001f 	and.w	r0, r0, #31
1a002652:	095b      	lsrs	r3, r3, #5
1a002654:	2201      	movs	r2, #1
1a002656:	fa02 f000 	lsl.w	r0, r2, r0
1a00265a:	3320      	adds	r3, #32
1a00265c:	4a04      	ldr	r2, [pc, #16]	; (1a002670 <disableGPIOIrq+0x44>)
1a00265e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a002662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a002666:	f3bf 8f6f 	isb	sy
   /* Disable irqChannel interrupt */
   NVIC_DisableIRQ(PIN_INT0_IRQn + irqChannel);
}
1a00266a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00266e:	4770      	bx	lr
1a002670:	e000e100 	.word	0xe000e100

1a002674 <clearInterrupt>:

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002674:	2301      	movs	r3, #1
1a002676:	fa03 f000 	lsl.w	r0, r3, r0
	pPININT->IST = pins;
1a00267a:	4b01      	ldr	r3, [pc, #4]	; (1a002680 <clearInterrupt+0xc>)
1a00267c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00267e:	4770      	bx	lr
1a002680:	40087000 	.word	0x40087000

1a002684 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002686:	4b12      	ldr	r3, [pc, #72]	; (1a0026d0 <serveInterrupt+0x4c>)
1a002688:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00268a:	4b12      	ldr	r3, [pc, #72]	; (1a0026d4 <serveInterrupt+0x50>)
1a00268c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00268e:	2301      	movs	r3, #1
1a002690:	4083      	lsls	r3, r0
1a002692:	420b      	tst	r3, r1
1a002694:	d00c      	beq.n	1a0026b0 <serveInterrupt+0x2c>
	return pTMR->TC;
1a002696:	4910      	ldr	r1, [pc, #64]	; (1a0026d8 <serveInterrupt+0x54>)
1a002698:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00269a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00269e:	00d1      	lsls	r1, r2, #3
1a0026a0:	4a0e      	ldr	r2, [pc, #56]	; (1a0026dc <serveInterrupt+0x58>)
1a0026a2:	440a      	add	r2, r1
1a0026a4:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0026a6:	4a0b      	ldr	r2, [pc, #44]	; (1a0026d4 <serveInterrupt+0x50>)
1a0026a8:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0026aa:	f7ff ffe3 	bl	1a002674 <clearInterrupt>
}
1a0026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0026b0:	4909      	ldr	r1, [pc, #36]	; (1a0026d8 <serveInterrupt+0x54>)
1a0026b2:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0026b4:	4d09      	ldr	r5, [pc, #36]	; (1a0026dc <serveInterrupt+0x58>)
1a0026b6:	0051      	lsls	r1, r2, #1
1a0026b8:	188f      	adds	r7, r1, r2
1a0026ba:	00fc      	lsls	r4, r7, #3
1a0026bc:	4627      	mov	r7, r4
1a0026be:	442c      	add	r4, r5
1a0026c0:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0026c2:	6864      	ldr	r4, [r4, #4]
1a0026c4:	1b36      	subs	r6, r6, r4
1a0026c6:	443d      	add	r5, r7
1a0026c8:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0026ca:	4a02      	ldr	r2, [pc, #8]	; (1a0026d4 <serveInterrupt+0x50>)
1a0026cc:	6213      	str	r3, [r2, #32]
1a0026ce:	e7ec      	b.n	1a0026aa <serveInterrupt+0x26>
1a0026d0:	1a0044e4 	.word	0x1a0044e4
1a0026d4:	40087000 	.word	0x40087000
1a0026d8:	40084000 	.word	0x40084000
1a0026dc:	100000ac 	.word	0x100000ac

1a0026e0 <triggerExpired>:
/*
 * When trigger time expires (TIMER0 reachs TIMECOMPAREMATCH1),
 * ULTRASONIC_SENSOR_TRIGGER_GPIO is off
 */
static void triggerExpired()
{
1a0026e0:	b508      	push	{r3, lr}
   gpioWrite(ULTRASONIC_SENSOR_TRIGGER_GPIO,OFF);
1a0026e2:	2100      	movs	r1, #0
1a0026e4:	2020      	movs	r0, #32
1a0026e6:	f7ff fe89 	bl	1a0023fc <gpioWrite>
}
1a0026ea:	bd08      	pop	{r3, pc}

1a0026ec <timerExpired>:
{
1a0026ec:	b508      	push	{r3, lr}
   gpioWrite(ULTRASONIC_SENSOR_TRIGGER_GPIO,ON);
1a0026ee:	2101      	movs	r1, #1
1a0026f0:	2020      	movs	r0, #32
1a0026f2:	f7ff fe83 	bl	1a0023fc <gpioWrite>
}
1a0026f6:	bd08      	pop	{r3, pc}

1a0026f8 <ultrasonicSensorInit>:
 * @param   aSensor:   sensor number (0 to 2)
 * @param   aConfig:   enable or disable sensor
 * @return   nothing
 */
void ultrasonicSensorInit(ultrasonicSensorMap_t aSensor, ultrasonicSensorInit_t aConfig)
{
1a0026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026fc:	4604      	mov	r4, r0
   static uint8_t firstTime = 1;

   if ( aConfig == ULTRASONIC_SENSOR_ENABLE ) {
1a0026fe:	460f      	mov	r7, r1
1a002700:	2900      	cmp	r1, #0
1a002702:	d13d      	bne.n	1a002780 <ultrasonicSensorInit+0x88>

      /* If first time, trigger GPIO is set as output */
      if ( firstTime ) {
1a002704:	4b23      	ldr	r3, [pc, #140]	; (1a002794 <ultrasonicSensorInit+0x9c>)
1a002706:	781b      	ldrb	r3, [r3, #0]
1a002708:	b9fb      	cbnz	r3, 1a00274a <ultrasonicSensorInit+0x52>
         gpioInit(ULTRASONIC_SENSOR_TRIGGER_GPIO, GPIO_OUTPUT);
         initGPIOIrqs();
      }

      /* Enable sensor echo GPIO pin as INPUT */
      gpioInit(ultrasonicSensors[aSensor].echoGpio, GPIO_INPUT);
1a00270a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1a002798 <ultrasonicSensorInit+0xa0>
1a00270e:	0066      	lsls	r6, r4, #1
1a002710:	1933      	adds	r3, r6, r4
1a002712:	00dd      	lsls	r5, r3, #3
1a002714:	4445      	add	r5, r8
1a002716:	2100      	movs	r1, #0
1a002718:	f995 0010 	ldrsb.w	r0, [r5, #16]
1a00271c:	f7ff fd98 	bl	1a002250 <gpioInit>

      /* IRQ Enable to capture sensor echo pulse edges */
      enableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel,
                    ultrasonicSensors[aSensor].irqConfig.gpioInit.port,
1a002720:	f995 1013 	ldrsb.w	r1, [r5, #19]
                    ultrasonicSensors[aSensor].irqConfig.gpioInit.pin,
1a002724:	f995 2014 	ldrsb.w	r2, [r5, #20]
      enableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel,
1a002728:	2302      	movs	r3, #2
1a00272a:	b2d2      	uxtb	r2, r2
1a00272c:	b2c9      	uxtb	r1, r1
1a00272e:	7ca8      	ldrb	r0, [r5, #18]
1a002730:	f7ff ff2e 	bl	1a002590 <enableGPIOIrq>
                    BOTH_EDGES);

      /* If first time, TIMER0 is set to cycle sensor trigger ever SENSOR_SAMPLING_RATE */
      if ( firstTime ) {
1a002734:	4b17      	ldr	r3, [pc, #92]	; (1a002794 <ultrasonicSensorInit+0x9c>)
1a002736:	781b      	ldrb	r3, [r3, #0]
1a002738:	b963      	cbnz	r3, 1a002754 <ultrasonicSensorInit+0x5c>

   } else {
      disableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel);
   }

   ultrasonicSensors[aSensor].enabled = aConfig;
1a00273a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00273e:	00e2      	lsls	r2, r4, #3
1a002740:	4b15      	ldr	r3, [pc, #84]	; (1a002798 <ultrasonicSensorInit+0xa0>)
1a002742:	4413      	add	r3, r2
1a002744:	745f      	strb	r7, [r3, #17]

}
1a002746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         gpioInit(ULTRASONIC_SENSOR_TRIGGER_GPIO, GPIO_OUTPUT);
1a00274a:	2101      	movs	r1, #1
1a00274c:	2020      	movs	r0, #32
1a00274e:	f7ff fd7f 	bl	1a002250 <gpioInit>
         initGPIOIrqs();
1a002752:	e7da      	b.n	1a00270a <ultrasonicSensorInit+0x12>
         Timer_Init(TIMER0,Timer_microsecondsToTicks(SENSOR_SAMPLING_RATE),timerExpired);
1a002754:	f64e 2060 	movw	r0, #60000	; 0xea60
1a002758:	f7ff fc32 	bl	1a001fc0 <Timer_microsecondsToTicks>
1a00275c:	4a0f      	ldr	r2, [pc, #60]	; (1a00279c <ultrasonicSensorInit+0xa4>)
1a00275e:	4601      	mov	r1, r0
1a002760:	2000      	movs	r0, #0
1a002762:	f7ff fb9d 	bl	1a001ea0 <Timer_Init>
         Timer_EnableCompareMatch(TIMER0,TIMERCOMPAREMATCH1, Timer_microsecondsToTicks(SENSOR_TRIGGER_PULSE_WIDTH), triggerExpired);
1a002766:	200a      	movs	r0, #10
1a002768:	f7ff fc2a 	bl	1a001fc0 <Timer_microsecondsToTicks>
1a00276c:	4b0c      	ldr	r3, [pc, #48]	; (1a0027a0 <ultrasonicSensorInit+0xa8>)
1a00276e:	4602      	mov	r2, r0
1a002770:	2101      	movs	r1, #1
1a002772:	2000      	movs	r0, #0
1a002774:	f7ff fc28 	bl	1a001fc8 <Timer_EnableCompareMatch>
         firstTime = 0;
1a002778:	4b06      	ldr	r3, [pc, #24]	; (1a002794 <ultrasonicSensorInit+0x9c>)
1a00277a:	2200      	movs	r2, #0
1a00277c:	701a      	strb	r2, [r3, #0]
1a00277e:	e7dc      	b.n	1a00273a <ultrasonicSensorInit+0x42>
      disableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel);
1a002780:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002784:	00da      	lsls	r2, r3, #3
1a002786:	4b04      	ldr	r3, [pc, #16]	; (1a002798 <ultrasonicSensorInit+0xa0>)
1a002788:	4413      	add	r3, r2
1a00278a:	7c98      	ldrb	r0, [r3, #18]
1a00278c:	f7ff ff4e 	bl	1a00262c <disableGPIOIrq>
1a002790:	e7d3      	b.n	1a00273a <ultrasonicSensorInit+0x42>
1a002792:	bf00      	nop
1a002794:	100000a8 	.word	0x100000a8
1a002798:	100000ac 	.word	0x100000ac
1a00279c:	1a0026ed 	.word	0x1a0026ed
1a0027a0:	1a0026e1 	.word	0x1a0026e1

1a0027a4 <ultrasonicSensorGetDistance>:
float ultrasonicSensorGetDistance(ultrasonicSensorMap_t aSensor, unitMap_t anUnit)
{
   float result;

   /* Convert pulse width in timer ticks to microseconds */
   result = (float)((ultrasonicSensors[aSensor].lastEchoWidth/TICKS_TO_US_FACTOR));
1a0027a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0027a8:	00c2      	lsls	r2, r0, #3
1a0027aa:	4b0b      	ldr	r3, [pc, #44]	; (1a0027d8 <ultrasonicSensorGetDistance+0x34>)
1a0027ac:	4413      	add	r3, r2
1a0027ae:	68db      	ldr	r3, [r3, #12]
1a0027b0:	4a0a      	ldr	r2, [pc, #40]	; (1a0027dc <ultrasonicSensorGetDistance+0x38>)
1a0027b2:	fba2 2303 	umull	r2, r3, r2, r3
1a0027b6:	09db      	lsrs	r3, r3, #7
1a0027b8:	ee07 3a90 	vmov	s15, r3
1a0027bc:	eef8 7a67 	vcvt.f32.u32	s15, s15

   /* If CM requested */
   if ( anUnit == CM )
1a0027c0:	b921      	cbnz	r1, 1a0027cc <ultrasonicSensorGetDistance+0x28>
      /* Convert time in microseconds to distance in centimeters (from formula distance = pulse width time in us * velocity (340 m/s) / 2 )*/
      result = result / US_TO_CMS_FACTOR;
1a0027c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1a0027e0 <ultrasonicSensorGetDistance+0x3c>
1a0027c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
1a0027ca:	4770      	bx	lr
   else
      /* Convert time in microseconds to distance in inchs (from formula distance = pulse width time in us * velocity (340 m/s) / 2 )*/
      result = result / US_TO_INCHS_FACTOR;
1a0027cc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a0027e4 <ultrasonicSensorGetDistance+0x40>
1a0027d0:	ee87 0a87 	vdiv.f32	s0, s15, s14

   return(result);
}
1a0027d4:	4770      	bx	lr
1a0027d6:	bf00      	nop
1a0027d8:	100000ac 	.word	0x100000ac
1a0027dc:	a0a0a0a1 	.word	0xa0a0a0a1
1a0027e0:	42680000 	.word	0x42680000
1a0027e4:	43140000 	.word	0x43140000

1a0027e8 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0027e8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0027ea:	2000      	movs	r0, #0
1a0027ec:	f7ff ff4a 	bl	1a002684 <serveInterrupt>
}
1a0027f0:	bd08      	pop	{r3, pc}

1a0027f2 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0027f2:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0027f4:	2001      	movs	r0, #1
1a0027f6:	f7ff ff45 	bl	1a002684 <serveInterrupt>
}
1a0027fa:	bd08      	pop	{r3, pc}

1a0027fc <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0027fc:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0027fe:	2002      	movs	r0, #2
1a002800:	f7ff ff40 	bl	1a002684 <serveInterrupt>
}
1a002804:	bd08      	pop	{r3, pc}
1a002806:	Address 0x000000001a002806 is out of bounds.


1a002808 <__aeabi_uldivmod>:
1a002808:	b953      	cbnz	r3, 1a002820 <__aeabi_uldivmod+0x18>
1a00280a:	b94a      	cbnz	r2, 1a002820 <__aeabi_uldivmod+0x18>
1a00280c:	2900      	cmp	r1, #0
1a00280e:	bf08      	it	eq
1a002810:	2800      	cmpeq	r0, #0
1a002812:	bf1c      	itt	ne
1a002814:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002818:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00281c:	f000 b974 	b.w	1a002b08 <__aeabi_idiv0>
1a002820:	f1ad 0c08 	sub.w	ip, sp, #8
1a002824:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002828:	f000 f806 	bl	1a002838 <__udivmoddi4>
1a00282c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002834:	b004      	add	sp, #16
1a002836:	4770      	bx	lr

1a002838 <__udivmoddi4>:
1a002838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00283c:	9e08      	ldr	r6, [sp, #32]
1a00283e:	4604      	mov	r4, r0
1a002840:	4688      	mov	r8, r1
1a002842:	2b00      	cmp	r3, #0
1a002844:	f040 8085 	bne.w	1a002952 <__udivmoddi4+0x11a>
1a002848:	428a      	cmp	r2, r1
1a00284a:	4615      	mov	r5, r2
1a00284c:	d948      	bls.n	1a0028e0 <__udivmoddi4+0xa8>
1a00284e:	fab2 f282 	clz	r2, r2
1a002852:	b14a      	cbz	r2, 1a002868 <__udivmoddi4+0x30>
1a002854:	f1c2 0720 	rsb	r7, r2, #32
1a002858:	fa01 f302 	lsl.w	r3, r1, r2
1a00285c:	fa20 f707 	lsr.w	r7, r0, r7
1a002860:	4095      	lsls	r5, r2
1a002862:	ea47 0803 	orr.w	r8, r7, r3
1a002866:	4094      	lsls	r4, r2
1a002868:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00286c:	0c23      	lsrs	r3, r4, #16
1a00286e:	fbb8 f7fe 	udiv	r7, r8, lr
1a002872:	fa1f fc85 	uxth.w	ip, r5
1a002876:	fb0e 8817 	mls	r8, lr, r7, r8
1a00287a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00287e:	fb07 f10c 	mul.w	r1, r7, ip
1a002882:	4299      	cmp	r1, r3
1a002884:	d909      	bls.n	1a00289a <__udivmoddi4+0x62>
1a002886:	18eb      	adds	r3, r5, r3
1a002888:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00288c:	f080 80e3 	bcs.w	1a002a56 <__udivmoddi4+0x21e>
1a002890:	4299      	cmp	r1, r3
1a002892:	f240 80e0 	bls.w	1a002a56 <__udivmoddi4+0x21e>
1a002896:	3f02      	subs	r7, #2
1a002898:	442b      	add	r3, r5
1a00289a:	1a5b      	subs	r3, r3, r1
1a00289c:	b2a4      	uxth	r4, r4
1a00289e:	fbb3 f0fe 	udiv	r0, r3, lr
1a0028a2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0028a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0028aa:	fb00 fc0c 	mul.w	ip, r0, ip
1a0028ae:	45a4      	cmp	ip, r4
1a0028b0:	d909      	bls.n	1a0028c6 <__udivmoddi4+0x8e>
1a0028b2:	192c      	adds	r4, r5, r4
1a0028b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0028b8:	f080 80cb 	bcs.w	1a002a52 <__udivmoddi4+0x21a>
1a0028bc:	45a4      	cmp	ip, r4
1a0028be:	f240 80c8 	bls.w	1a002a52 <__udivmoddi4+0x21a>
1a0028c2:	3802      	subs	r0, #2
1a0028c4:	442c      	add	r4, r5
1a0028c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0028ca:	eba4 040c 	sub.w	r4, r4, ip
1a0028ce:	2700      	movs	r7, #0
1a0028d0:	b11e      	cbz	r6, 1a0028da <__udivmoddi4+0xa2>
1a0028d2:	40d4      	lsrs	r4, r2
1a0028d4:	2300      	movs	r3, #0
1a0028d6:	e9c6 4300 	strd	r4, r3, [r6]
1a0028da:	4639      	mov	r1, r7
1a0028dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0028e0:	2a00      	cmp	r2, #0
1a0028e2:	d053      	beq.n	1a00298c <__udivmoddi4+0x154>
1a0028e4:	fab2 f282 	clz	r2, r2
1a0028e8:	2a00      	cmp	r2, #0
1a0028ea:	f040 80b6 	bne.w	1a002a5a <__udivmoddi4+0x222>
1a0028ee:	1b49      	subs	r1, r1, r5
1a0028f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0028f4:	fa1f f885 	uxth.w	r8, r5
1a0028f8:	2701      	movs	r7, #1
1a0028fa:	fbb1 fcfe 	udiv	ip, r1, lr
1a0028fe:	0c23      	lsrs	r3, r4, #16
1a002900:	fb0e 111c 	mls	r1, lr, ip, r1
1a002904:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002908:	fb08 f10c 	mul.w	r1, r8, ip
1a00290c:	4299      	cmp	r1, r3
1a00290e:	d907      	bls.n	1a002920 <__udivmoddi4+0xe8>
1a002910:	18eb      	adds	r3, r5, r3
1a002912:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002916:	d202      	bcs.n	1a00291e <__udivmoddi4+0xe6>
1a002918:	4299      	cmp	r1, r3
1a00291a:	f200 80ec 	bhi.w	1a002af6 <__udivmoddi4+0x2be>
1a00291e:	4684      	mov	ip, r0
1a002920:	1a59      	subs	r1, r3, r1
1a002922:	b2a3      	uxth	r3, r4
1a002924:	fbb1 f0fe 	udiv	r0, r1, lr
1a002928:	fb0e 1410 	mls	r4, lr, r0, r1
1a00292c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002930:	fb08 f800 	mul.w	r8, r8, r0
1a002934:	45a0      	cmp	r8, r4
1a002936:	d907      	bls.n	1a002948 <__udivmoddi4+0x110>
1a002938:	192c      	adds	r4, r5, r4
1a00293a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00293e:	d202      	bcs.n	1a002946 <__udivmoddi4+0x10e>
1a002940:	45a0      	cmp	r8, r4
1a002942:	f200 80dc 	bhi.w	1a002afe <__udivmoddi4+0x2c6>
1a002946:	4618      	mov	r0, r3
1a002948:	eba4 0408 	sub.w	r4, r4, r8
1a00294c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002950:	e7be      	b.n	1a0028d0 <__udivmoddi4+0x98>
1a002952:	428b      	cmp	r3, r1
1a002954:	d908      	bls.n	1a002968 <__udivmoddi4+0x130>
1a002956:	2e00      	cmp	r6, #0
1a002958:	d078      	beq.n	1a002a4c <__udivmoddi4+0x214>
1a00295a:	2700      	movs	r7, #0
1a00295c:	e9c6 0100 	strd	r0, r1, [r6]
1a002960:	4638      	mov	r0, r7
1a002962:	4639      	mov	r1, r7
1a002964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002968:	fab3 f783 	clz	r7, r3
1a00296c:	b97f      	cbnz	r7, 1a00298e <__udivmoddi4+0x156>
1a00296e:	428b      	cmp	r3, r1
1a002970:	d302      	bcc.n	1a002978 <__udivmoddi4+0x140>
1a002972:	4282      	cmp	r2, r0
1a002974:	f200 80bd 	bhi.w	1a002af2 <__udivmoddi4+0x2ba>
1a002978:	1a84      	subs	r4, r0, r2
1a00297a:	eb61 0303 	sbc.w	r3, r1, r3
1a00297e:	2001      	movs	r0, #1
1a002980:	4698      	mov	r8, r3
1a002982:	2e00      	cmp	r6, #0
1a002984:	d0a9      	beq.n	1a0028da <__udivmoddi4+0xa2>
1a002986:	e9c6 4800 	strd	r4, r8, [r6]
1a00298a:	e7a6      	b.n	1a0028da <__udivmoddi4+0xa2>
1a00298c:	deff      	udf	#255	; 0xff
1a00298e:	f1c7 0520 	rsb	r5, r7, #32
1a002992:	40bb      	lsls	r3, r7
1a002994:	fa22 fc05 	lsr.w	ip, r2, r5
1a002998:	ea4c 0c03 	orr.w	ip, ip, r3
1a00299c:	fa01 f407 	lsl.w	r4, r1, r7
1a0029a0:	fa20 f805 	lsr.w	r8, r0, r5
1a0029a4:	fa21 f305 	lsr.w	r3, r1, r5
1a0029a8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0029ac:	ea48 0404 	orr.w	r4, r8, r4
1a0029b0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0029b4:	0c21      	lsrs	r1, r4, #16
1a0029b6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0029ba:	fa1f f88c 	uxth.w	r8, ip
1a0029be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0029c2:	fb09 fa08 	mul.w	sl, r9, r8
1a0029c6:	459a      	cmp	sl, r3
1a0029c8:	fa02 f207 	lsl.w	r2, r2, r7
1a0029cc:	fa00 f107 	lsl.w	r1, r0, r7
1a0029d0:	d90b      	bls.n	1a0029ea <__udivmoddi4+0x1b2>
1a0029d2:	eb1c 0303 	adds.w	r3, ip, r3
1a0029d6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0029da:	f080 8088 	bcs.w	1a002aee <__udivmoddi4+0x2b6>
1a0029de:	459a      	cmp	sl, r3
1a0029e0:	f240 8085 	bls.w	1a002aee <__udivmoddi4+0x2b6>
1a0029e4:	f1a9 0902 	sub.w	r9, r9, #2
1a0029e8:	4463      	add	r3, ip
1a0029ea:	eba3 030a 	sub.w	r3, r3, sl
1a0029ee:	b2a4      	uxth	r4, r4
1a0029f0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0029f4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0029f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0029fc:	fb00 f808 	mul.w	r8, r0, r8
1a002a00:	45a0      	cmp	r8, r4
1a002a02:	d908      	bls.n	1a002a16 <__udivmoddi4+0x1de>
1a002a04:	eb1c 0404 	adds.w	r4, ip, r4
1a002a08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002a0c:	d26b      	bcs.n	1a002ae6 <__udivmoddi4+0x2ae>
1a002a0e:	45a0      	cmp	r8, r4
1a002a10:	d969      	bls.n	1a002ae6 <__udivmoddi4+0x2ae>
1a002a12:	3802      	subs	r0, #2
1a002a14:	4464      	add	r4, ip
1a002a16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002a1a:	eba4 0408 	sub.w	r4, r4, r8
1a002a1e:	fba0 8902 	umull	r8, r9, r0, r2
1a002a22:	454c      	cmp	r4, r9
1a002a24:	46c6      	mov	lr, r8
1a002a26:	464b      	mov	r3, r9
1a002a28:	d354      	bcc.n	1a002ad4 <__udivmoddi4+0x29c>
1a002a2a:	d051      	beq.n	1a002ad0 <__udivmoddi4+0x298>
1a002a2c:	2e00      	cmp	r6, #0
1a002a2e:	d069      	beq.n	1a002b04 <__udivmoddi4+0x2cc>
1a002a30:	ebb1 020e 	subs.w	r2, r1, lr
1a002a34:	eb64 0403 	sbc.w	r4, r4, r3
1a002a38:	fa04 f505 	lsl.w	r5, r4, r5
1a002a3c:	fa22 f307 	lsr.w	r3, r2, r7
1a002a40:	40fc      	lsrs	r4, r7
1a002a42:	431d      	orrs	r5, r3
1a002a44:	e9c6 5400 	strd	r5, r4, [r6]
1a002a48:	2700      	movs	r7, #0
1a002a4a:	e746      	b.n	1a0028da <__udivmoddi4+0xa2>
1a002a4c:	4637      	mov	r7, r6
1a002a4e:	4630      	mov	r0, r6
1a002a50:	e743      	b.n	1a0028da <__udivmoddi4+0xa2>
1a002a52:	4618      	mov	r0, r3
1a002a54:	e737      	b.n	1a0028c6 <__udivmoddi4+0x8e>
1a002a56:	4607      	mov	r7, r0
1a002a58:	e71f      	b.n	1a00289a <__udivmoddi4+0x62>
1a002a5a:	f1c2 0320 	rsb	r3, r2, #32
1a002a5e:	fa20 f703 	lsr.w	r7, r0, r3
1a002a62:	4095      	lsls	r5, r2
1a002a64:	fa01 f002 	lsl.w	r0, r1, r2
1a002a68:	fa21 f303 	lsr.w	r3, r1, r3
1a002a6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a70:	4338      	orrs	r0, r7
1a002a72:	0c01      	lsrs	r1, r0, #16
1a002a74:	fbb3 f7fe 	udiv	r7, r3, lr
1a002a78:	fa1f f885 	uxth.w	r8, r5
1a002a7c:	fb0e 3317 	mls	r3, lr, r7, r3
1a002a80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002a84:	fb07 f308 	mul.w	r3, r7, r8
1a002a88:	428b      	cmp	r3, r1
1a002a8a:	fa04 f402 	lsl.w	r4, r4, r2
1a002a8e:	d907      	bls.n	1a002aa0 <__udivmoddi4+0x268>
1a002a90:	1869      	adds	r1, r5, r1
1a002a92:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002a96:	d228      	bcs.n	1a002aea <__udivmoddi4+0x2b2>
1a002a98:	428b      	cmp	r3, r1
1a002a9a:	d926      	bls.n	1a002aea <__udivmoddi4+0x2b2>
1a002a9c:	3f02      	subs	r7, #2
1a002a9e:	4429      	add	r1, r5
1a002aa0:	1acb      	subs	r3, r1, r3
1a002aa2:	b281      	uxth	r1, r0
1a002aa4:	fbb3 f0fe 	udiv	r0, r3, lr
1a002aa8:	fb0e 3310 	mls	r3, lr, r0, r3
1a002aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002ab0:	fb00 f308 	mul.w	r3, r0, r8
1a002ab4:	428b      	cmp	r3, r1
1a002ab6:	d907      	bls.n	1a002ac8 <__udivmoddi4+0x290>
1a002ab8:	1869      	adds	r1, r5, r1
1a002aba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002abe:	d210      	bcs.n	1a002ae2 <__udivmoddi4+0x2aa>
1a002ac0:	428b      	cmp	r3, r1
1a002ac2:	d90e      	bls.n	1a002ae2 <__udivmoddi4+0x2aa>
1a002ac4:	3802      	subs	r0, #2
1a002ac6:	4429      	add	r1, r5
1a002ac8:	1ac9      	subs	r1, r1, r3
1a002aca:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002ace:	e714      	b.n	1a0028fa <__udivmoddi4+0xc2>
1a002ad0:	4541      	cmp	r1, r8
1a002ad2:	d2ab      	bcs.n	1a002a2c <__udivmoddi4+0x1f4>
1a002ad4:	ebb8 0e02 	subs.w	lr, r8, r2
1a002ad8:	eb69 020c 	sbc.w	r2, r9, ip
1a002adc:	3801      	subs	r0, #1
1a002ade:	4613      	mov	r3, r2
1a002ae0:	e7a4      	b.n	1a002a2c <__udivmoddi4+0x1f4>
1a002ae2:	4660      	mov	r0, ip
1a002ae4:	e7f0      	b.n	1a002ac8 <__udivmoddi4+0x290>
1a002ae6:	4618      	mov	r0, r3
1a002ae8:	e795      	b.n	1a002a16 <__udivmoddi4+0x1de>
1a002aea:	4667      	mov	r7, ip
1a002aec:	e7d8      	b.n	1a002aa0 <__udivmoddi4+0x268>
1a002aee:	4681      	mov	r9, r0
1a002af0:	e77b      	b.n	1a0029ea <__udivmoddi4+0x1b2>
1a002af2:	4638      	mov	r0, r7
1a002af4:	e745      	b.n	1a002982 <__udivmoddi4+0x14a>
1a002af6:	f1ac 0c02 	sub.w	ip, ip, #2
1a002afa:	442b      	add	r3, r5
1a002afc:	e710      	b.n	1a002920 <__udivmoddi4+0xe8>
1a002afe:	3802      	subs	r0, #2
1a002b00:	442c      	add	r4, r5
1a002b02:	e721      	b.n	1a002948 <__udivmoddi4+0x110>
1a002b04:	4637      	mov	r7, r6
1a002b06:	e6e8      	b.n	1a0028da <__udivmoddi4+0xa2>

1a002b08 <__aeabi_idiv0>:
1a002b08:	4770      	bx	lr
1a002b0a:	bf00      	nop

1a002b0c <__libc_init_array>:
1a002b0c:	b570      	push	{r4, r5, r6, lr}
1a002b0e:	4d0d      	ldr	r5, [pc, #52]	; (1a002b44 <__libc_init_array+0x38>)
1a002b10:	4c0d      	ldr	r4, [pc, #52]	; (1a002b48 <__libc_init_array+0x3c>)
1a002b12:	1b64      	subs	r4, r4, r5
1a002b14:	10a4      	asrs	r4, r4, #2
1a002b16:	2600      	movs	r6, #0
1a002b18:	42a6      	cmp	r6, r4
1a002b1a:	d109      	bne.n	1a002b30 <__libc_init_array+0x24>
1a002b1c:	4d0b      	ldr	r5, [pc, #44]	; (1a002b4c <__libc_init_array+0x40>)
1a002b1e:	4c0c      	ldr	r4, [pc, #48]	; (1a002b50 <__libc_init_array+0x44>)
1a002b20:	f7fd ff4b 	bl	1a0009ba <_init>
1a002b24:	1b64      	subs	r4, r4, r5
1a002b26:	10a4      	asrs	r4, r4, #2
1a002b28:	2600      	movs	r6, #0
1a002b2a:	42a6      	cmp	r6, r4
1a002b2c:	d105      	bne.n	1a002b3a <__libc_init_array+0x2e>
1a002b2e:	bd70      	pop	{r4, r5, r6, pc}
1a002b30:	f855 3b04 	ldr.w	r3, [r5], #4
1a002b34:	4798      	blx	r3
1a002b36:	3601      	adds	r6, #1
1a002b38:	e7ee      	b.n	1a002b18 <__libc_init_array+0xc>
1a002b3a:	f855 3b04 	ldr.w	r3, [r5], #4
1a002b3e:	4798      	blx	r3
1a002b40:	3601      	adds	r6, #1
1a002b42:	e7f2      	b.n	1a002b2a <__libc_init_array+0x1e>
1a002b44:	1a0045a4 	.word	0x1a0045a4
1a002b48:	1a0045a4 	.word	0x1a0045a4
1a002b4c:	1a0045a4 	.word	0x1a0045a4
1a002b50:	1a0045a8 	.word	0x1a0045a8

1a002b54 <__itoa>:
1a002b54:	1e93      	subs	r3, r2, #2
1a002b56:	2b22      	cmp	r3, #34	; 0x22
1a002b58:	b510      	push	{r4, lr}
1a002b5a:	460c      	mov	r4, r1
1a002b5c:	d904      	bls.n	1a002b68 <__itoa+0x14>
1a002b5e:	2300      	movs	r3, #0
1a002b60:	700b      	strb	r3, [r1, #0]
1a002b62:	461c      	mov	r4, r3
1a002b64:	4620      	mov	r0, r4
1a002b66:	bd10      	pop	{r4, pc}
1a002b68:	2a0a      	cmp	r2, #10
1a002b6a:	d109      	bne.n	1a002b80 <__itoa+0x2c>
1a002b6c:	2800      	cmp	r0, #0
1a002b6e:	da07      	bge.n	1a002b80 <__itoa+0x2c>
1a002b70:	232d      	movs	r3, #45	; 0x2d
1a002b72:	700b      	strb	r3, [r1, #0]
1a002b74:	4240      	negs	r0, r0
1a002b76:	2101      	movs	r1, #1
1a002b78:	4421      	add	r1, r4
1a002b7a:	f000 f89b 	bl	1a002cb4 <__utoa>
1a002b7e:	e7f1      	b.n	1a002b64 <__itoa+0x10>
1a002b80:	2100      	movs	r1, #0
1a002b82:	e7f9      	b.n	1a002b78 <__itoa+0x24>

1a002b84 <itoa>:
1a002b84:	f7ff bfe6 	b.w	1a002b54 <__itoa>

1a002b88 <memset>:
1a002b88:	4402      	add	r2, r0
1a002b8a:	4603      	mov	r3, r0
1a002b8c:	4293      	cmp	r3, r2
1a002b8e:	d100      	bne.n	1a002b92 <memset+0xa>
1a002b90:	4770      	bx	lr
1a002b92:	f803 1b01 	strb.w	r1, [r3], #1
1a002b96:	e7f9      	b.n	1a002b8c <memset+0x4>

1a002b98 <iprintf>:
1a002b98:	b40f      	push	{r0, r1, r2, r3}
1a002b9a:	4b0a      	ldr	r3, [pc, #40]	; (1a002bc4 <iprintf+0x2c>)
1a002b9c:	b513      	push	{r0, r1, r4, lr}
1a002b9e:	681c      	ldr	r4, [r3, #0]
1a002ba0:	b124      	cbz	r4, 1a002bac <iprintf+0x14>
1a002ba2:	69a3      	ldr	r3, [r4, #24]
1a002ba4:	b913      	cbnz	r3, 1a002bac <iprintf+0x14>
1a002ba6:	4620      	mov	r0, r4
1a002ba8:	f000 fa9e 	bl	1a0030e8 <__sinit>
1a002bac:	ab05      	add	r3, sp, #20
1a002bae:	9a04      	ldr	r2, [sp, #16]
1a002bb0:	68a1      	ldr	r1, [r4, #8]
1a002bb2:	9301      	str	r3, [sp, #4]
1a002bb4:	4620      	mov	r0, r4
1a002bb6:	f000 fc6d 	bl	1a003494 <_vfiprintf_r>
1a002bba:	b002      	add	sp, #8
1a002bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002bc0:	b004      	add	sp, #16
1a002bc2:	4770      	bx	lr
1a002bc4:	100000f4 	.word	0x100000f4

1a002bc8 <_puts_r>:
1a002bc8:	b570      	push	{r4, r5, r6, lr}
1a002bca:	460e      	mov	r6, r1
1a002bcc:	4605      	mov	r5, r0
1a002bce:	b118      	cbz	r0, 1a002bd8 <_puts_r+0x10>
1a002bd0:	6983      	ldr	r3, [r0, #24]
1a002bd2:	b90b      	cbnz	r3, 1a002bd8 <_puts_r+0x10>
1a002bd4:	f000 fa88 	bl	1a0030e8 <__sinit>
1a002bd8:	69ab      	ldr	r3, [r5, #24]
1a002bda:	68ac      	ldr	r4, [r5, #8]
1a002bdc:	b913      	cbnz	r3, 1a002be4 <_puts_r+0x1c>
1a002bde:	4628      	mov	r0, r5
1a002be0:	f000 fa82 	bl	1a0030e8 <__sinit>
1a002be4:	4b2c      	ldr	r3, [pc, #176]	; (1a002c98 <_puts_r+0xd0>)
1a002be6:	429c      	cmp	r4, r3
1a002be8:	d120      	bne.n	1a002c2c <_puts_r+0x64>
1a002bea:	686c      	ldr	r4, [r5, #4]
1a002bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002bee:	07db      	lsls	r3, r3, #31
1a002bf0:	d405      	bmi.n	1a002bfe <_puts_r+0x36>
1a002bf2:	89a3      	ldrh	r3, [r4, #12]
1a002bf4:	0598      	lsls	r0, r3, #22
1a002bf6:	d402      	bmi.n	1a002bfe <_puts_r+0x36>
1a002bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002bfa:	f000 fb12 	bl	1a003222 <__retarget_lock_acquire_recursive>
1a002bfe:	89a3      	ldrh	r3, [r4, #12]
1a002c00:	0719      	lsls	r1, r3, #28
1a002c02:	d51d      	bpl.n	1a002c40 <_puts_r+0x78>
1a002c04:	6923      	ldr	r3, [r4, #16]
1a002c06:	b1db      	cbz	r3, 1a002c40 <_puts_r+0x78>
1a002c08:	3e01      	subs	r6, #1
1a002c0a:	68a3      	ldr	r3, [r4, #8]
1a002c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a002c10:	3b01      	subs	r3, #1
1a002c12:	60a3      	str	r3, [r4, #8]
1a002c14:	bb39      	cbnz	r1, 1a002c66 <_puts_r+0x9e>
1a002c16:	2b00      	cmp	r3, #0
1a002c18:	da38      	bge.n	1a002c8c <_puts_r+0xc4>
1a002c1a:	4622      	mov	r2, r4
1a002c1c:	210a      	movs	r1, #10
1a002c1e:	4628      	mov	r0, r5
1a002c20:	f000 f888 	bl	1a002d34 <__swbuf_r>
1a002c24:	3001      	adds	r0, #1
1a002c26:	d011      	beq.n	1a002c4c <_puts_r+0x84>
1a002c28:	250a      	movs	r5, #10
1a002c2a:	e011      	b.n	1a002c50 <_puts_r+0x88>
1a002c2c:	4b1b      	ldr	r3, [pc, #108]	; (1a002c9c <_puts_r+0xd4>)
1a002c2e:	429c      	cmp	r4, r3
1a002c30:	d101      	bne.n	1a002c36 <_puts_r+0x6e>
1a002c32:	68ac      	ldr	r4, [r5, #8]
1a002c34:	e7da      	b.n	1a002bec <_puts_r+0x24>
1a002c36:	4b1a      	ldr	r3, [pc, #104]	; (1a002ca0 <_puts_r+0xd8>)
1a002c38:	429c      	cmp	r4, r3
1a002c3a:	bf08      	it	eq
1a002c3c:	68ec      	ldreq	r4, [r5, #12]
1a002c3e:	e7d5      	b.n	1a002bec <_puts_r+0x24>
1a002c40:	4621      	mov	r1, r4
1a002c42:	4628      	mov	r0, r5
1a002c44:	f000 f8c8 	bl	1a002dd8 <__swsetup_r>
1a002c48:	2800      	cmp	r0, #0
1a002c4a:	d0dd      	beq.n	1a002c08 <_puts_r+0x40>
1a002c4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a002c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002c52:	07da      	lsls	r2, r3, #31
1a002c54:	d405      	bmi.n	1a002c62 <_puts_r+0x9a>
1a002c56:	89a3      	ldrh	r3, [r4, #12]
1a002c58:	059b      	lsls	r3, r3, #22
1a002c5a:	d402      	bmi.n	1a002c62 <_puts_r+0x9a>
1a002c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002c5e:	f000 fae1 	bl	1a003224 <__retarget_lock_release_recursive>
1a002c62:	4628      	mov	r0, r5
1a002c64:	bd70      	pop	{r4, r5, r6, pc}
1a002c66:	2b00      	cmp	r3, #0
1a002c68:	da04      	bge.n	1a002c74 <_puts_r+0xac>
1a002c6a:	69a2      	ldr	r2, [r4, #24]
1a002c6c:	429a      	cmp	r2, r3
1a002c6e:	dc06      	bgt.n	1a002c7e <_puts_r+0xb6>
1a002c70:	290a      	cmp	r1, #10
1a002c72:	d004      	beq.n	1a002c7e <_puts_r+0xb6>
1a002c74:	6823      	ldr	r3, [r4, #0]
1a002c76:	1c5a      	adds	r2, r3, #1
1a002c78:	6022      	str	r2, [r4, #0]
1a002c7a:	7019      	strb	r1, [r3, #0]
1a002c7c:	e7c5      	b.n	1a002c0a <_puts_r+0x42>
1a002c7e:	4622      	mov	r2, r4
1a002c80:	4628      	mov	r0, r5
1a002c82:	f000 f857 	bl	1a002d34 <__swbuf_r>
1a002c86:	3001      	adds	r0, #1
1a002c88:	d1bf      	bne.n	1a002c0a <_puts_r+0x42>
1a002c8a:	e7df      	b.n	1a002c4c <_puts_r+0x84>
1a002c8c:	6823      	ldr	r3, [r4, #0]
1a002c8e:	250a      	movs	r5, #10
1a002c90:	1c5a      	adds	r2, r3, #1
1a002c92:	6022      	str	r2, [r4, #0]
1a002c94:	701d      	strb	r5, [r3, #0]
1a002c96:	e7db      	b.n	1a002c50 <_puts_r+0x88>
1a002c98:	1a00452c 	.word	0x1a00452c
1a002c9c:	1a00454c 	.word	0x1a00454c
1a002ca0:	1a00450c 	.word	0x1a00450c

1a002ca4 <puts>:
1a002ca4:	4b02      	ldr	r3, [pc, #8]	; (1a002cb0 <puts+0xc>)
1a002ca6:	4601      	mov	r1, r0
1a002ca8:	6818      	ldr	r0, [r3, #0]
1a002caa:	f7ff bf8d 	b.w	1a002bc8 <_puts_r>
1a002cae:	bf00      	nop
1a002cb0:	100000f4 	.word	0x100000f4

1a002cb4 <__utoa>:
1a002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002cb6:	4b1e      	ldr	r3, [pc, #120]	; (1a002d30 <__utoa+0x7c>)
1a002cb8:	b08b      	sub	sp, #44	; 0x2c
1a002cba:	4607      	mov	r7, r0
1a002cbc:	460c      	mov	r4, r1
1a002cbe:	466d      	mov	r5, sp
1a002cc0:	f103 0c20 	add.w	ip, r3, #32
1a002cc4:	6818      	ldr	r0, [r3, #0]
1a002cc6:	6859      	ldr	r1, [r3, #4]
1a002cc8:	462e      	mov	r6, r5
1a002cca:	c603      	stmia	r6!, {r0, r1}
1a002ccc:	3308      	adds	r3, #8
1a002cce:	4563      	cmp	r3, ip
1a002cd0:	4635      	mov	r5, r6
1a002cd2:	d1f7      	bne.n	1a002cc4 <__utoa+0x10>
1a002cd4:	6818      	ldr	r0, [r3, #0]
1a002cd6:	791b      	ldrb	r3, [r3, #4]
1a002cd8:	7133      	strb	r3, [r6, #4]
1a002cda:	1e93      	subs	r3, r2, #2
1a002cdc:	2b22      	cmp	r3, #34	; 0x22
1a002cde:	6030      	str	r0, [r6, #0]
1a002ce0:	f04f 0100 	mov.w	r1, #0
1a002ce4:	d904      	bls.n	1a002cf0 <__utoa+0x3c>
1a002ce6:	7021      	strb	r1, [r4, #0]
1a002ce8:	460c      	mov	r4, r1
1a002cea:	4620      	mov	r0, r4
1a002cec:	b00b      	add	sp, #44	; 0x2c
1a002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002cf0:	1e65      	subs	r5, r4, #1
1a002cf2:	fbb7 f6f2 	udiv	r6, r7, r2
1a002cf6:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
1a002cfa:	fb02 7316 	mls	r3, r2, r6, r7
1a002cfe:	4463      	add	r3, ip
1a002d00:	42ba      	cmp	r2, r7
1a002d02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
1a002d06:	f805 3f01 	strb.w	r3, [r5, #1]!
1a002d0a:	f101 0001 	add.w	r0, r1, #1
1a002d0e:	d90c      	bls.n	1a002d2a <__utoa+0x76>
1a002d10:	2300      	movs	r3, #0
1a002d12:	5423      	strb	r3, [r4, r0]
1a002d14:	1862      	adds	r2, r4, r1
1a002d16:	1ac8      	subs	r0, r1, r3
1a002d18:	4283      	cmp	r3, r0
1a002d1a:	dae6      	bge.n	1a002cea <__utoa+0x36>
1a002d1c:	5ce0      	ldrb	r0, [r4, r3]
1a002d1e:	7815      	ldrb	r5, [r2, #0]
1a002d20:	54e5      	strb	r5, [r4, r3]
1a002d22:	f802 0901 	strb.w	r0, [r2], #-1
1a002d26:	3301      	adds	r3, #1
1a002d28:	e7f5      	b.n	1a002d16 <__utoa+0x62>
1a002d2a:	4601      	mov	r1, r0
1a002d2c:	4637      	mov	r7, r6
1a002d2e:	e7e0      	b.n	1a002cf2 <__utoa+0x3e>
1a002d30:	1a0044e7 	.word	0x1a0044e7

1a002d34 <__swbuf_r>:
1a002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002d36:	460e      	mov	r6, r1
1a002d38:	4614      	mov	r4, r2
1a002d3a:	4605      	mov	r5, r0
1a002d3c:	b118      	cbz	r0, 1a002d46 <__swbuf_r+0x12>
1a002d3e:	6983      	ldr	r3, [r0, #24]
1a002d40:	b90b      	cbnz	r3, 1a002d46 <__swbuf_r+0x12>
1a002d42:	f000 f9d1 	bl	1a0030e8 <__sinit>
1a002d46:	4b21      	ldr	r3, [pc, #132]	; (1a002dcc <__swbuf_r+0x98>)
1a002d48:	429c      	cmp	r4, r3
1a002d4a:	d12b      	bne.n	1a002da4 <__swbuf_r+0x70>
1a002d4c:	686c      	ldr	r4, [r5, #4]
1a002d4e:	69a3      	ldr	r3, [r4, #24]
1a002d50:	60a3      	str	r3, [r4, #8]
1a002d52:	89a3      	ldrh	r3, [r4, #12]
1a002d54:	071a      	lsls	r2, r3, #28
1a002d56:	d52f      	bpl.n	1a002db8 <__swbuf_r+0x84>
1a002d58:	6923      	ldr	r3, [r4, #16]
1a002d5a:	b36b      	cbz	r3, 1a002db8 <__swbuf_r+0x84>
1a002d5c:	6923      	ldr	r3, [r4, #16]
1a002d5e:	6820      	ldr	r0, [r4, #0]
1a002d60:	1ac0      	subs	r0, r0, r3
1a002d62:	6963      	ldr	r3, [r4, #20]
1a002d64:	b2f6      	uxtb	r6, r6
1a002d66:	4283      	cmp	r3, r0
1a002d68:	4637      	mov	r7, r6
1a002d6a:	dc04      	bgt.n	1a002d76 <__swbuf_r+0x42>
1a002d6c:	4621      	mov	r1, r4
1a002d6e:	4628      	mov	r0, r5
1a002d70:	f000 f926 	bl	1a002fc0 <_fflush_r>
1a002d74:	bb30      	cbnz	r0, 1a002dc4 <__swbuf_r+0x90>
1a002d76:	68a3      	ldr	r3, [r4, #8]
1a002d78:	3b01      	subs	r3, #1
1a002d7a:	60a3      	str	r3, [r4, #8]
1a002d7c:	6823      	ldr	r3, [r4, #0]
1a002d7e:	1c5a      	adds	r2, r3, #1
1a002d80:	6022      	str	r2, [r4, #0]
1a002d82:	701e      	strb	r6, [r3, #0]
1a002d84:	6963      	ldr	r3, [r4, #20]
1a002d86:	3001      	adds	r0, #1
1a002d88:	4283      	cmp	r3, r0
1a002d8a:	d004      	beq.n	1a002d96 <__swbuf_r+0x62>
1a002d8c:	89a3      	ldrh	r3, [r4, #12]
1a002d8e:	07db      	lsls	r3, r3, #31
1a002d90:	d506      	bpl.n	1a002da0 <__swbuf_r+0x6c>
1a002d92:	2e0a      	cmp	r6, #10
1a002d94:	d104      	bne.n	1a002da0 <__swbuf_r+0x6c>
1a002d96:	4621      	mov	r1, r4
1a002d98:	4628      	mov	r0, r5
1a002d9a:	f000 f911 	bl	1a002fc0 <_fflush_r>
1a002d9e:	b988      	cbnz	r0, 1a002dc4 <__swbuf_r+0x90>
1a002da0:	4638      	mov	r0, r7
1a002da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002da4:	4b0a      	ldr	r3, [pc, #40]	; (1a002dd0 <__swbuf_r+0x9c>)
1a002da6:	429c      	cmp	r4, r3
1a002da8:	d101      	bne.n	1a002dae <__swbuf_r+0x7a>
1a002daa:	68ac      	ldr	r4, [r5, #8]
1a002dac:	e7cf      	b.n	1a002d4e <__swbuf_r+0x1a>
1a002dae:	4b09      	ldr	r3, [pc, #36]	; (1a002dd4 <__swbuf_r+0xa0>)
1a002db0:	429c      	cmp	r4, r3
1a002db2:	bf08      	it	eq
1a002db4:	68ec      	ldreq	r4, [r5, #12]
1a002db6:	e7ca      	b.n	1a002d4e <__swbuf_r+0x1a>
1a002db8:	4621      	mov	r1, r4
1a002dba:	4628      	mov	r0, r5
1a002dbc:	f000 f80c 	bl	1a002dd8 <__swsetup_r>
1a002dc0:	2800      	cmp	r0, #0
1a002dc2:	d0cb      	beq.n	1a002d5c <__swbuf_r+0x28>
1a002dc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a002dc8:	e7ea      	b.n	1a002da0 <__swbuf_r+0x6c>
1a002dca:	bf00      	nop
1a002dcc:	1a00452c 	.word	0x1a00452c
1a002dd0:	1a00454c 	.word	0x1a00454c
1a002dd4:	1a00450c 	.word	0x1a00450c

1a002dd8 <__swsetup_r>:
1a002dd8:	4b32      	ldr	r3, [pc, #200]	; (1a002ea4 <__swsetup_r+0xcc>)
1a002dda:	b570      	push	{r4, r5, r6, lr}
1a002ddc:	681d      	ldr	r5, [r3, #0]
1a002dde:	4606      	mov	r6, r0
1a002de0:	460c      	mov	r4, r1
1a002de2:	b125      	cbz	r5, 1a002dee <__swsetup_r+0x16>
1a002de4:	69ab      	ldr	r3, [r5, #24]
1a002de6:	b913      	cbnz	r3, 1a002dee <__swsetup_r+0x16>
1a002de8:	4628      	mov	r0, r5
1a002dea:	f000 f97d 	bl	1a0030e8 <__sinit>
1a002dee:	4b2e      	ldr	r3, [pc, #184]	; (1a002ea8 <__swsetup_r+0xd0>)
1a002df0:	429c      	cmp	r4, r3
1a002df2:	d10f      	bne.n	1a002e14 <__swsetup_r+0x3c>
1a002df4:	686c      	ldr	r4, [r5, #4]
1a002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002dfa:	b29a      	uxth	r2, r3
1a002dfc:	0715      	lsls	r5, r2, #28
1a002dfe:	d42c      	bmi.n	1a002e5a <__swsetup_r+0x82>
1a002e00:	06d0      	lsls	r0, r2, #27
1a002e02:	d411      	bmi.n	1a002e28 <__swsetup_r+0x50>
1a002e04:	2209      	movs	r2, #9
1a002e06:	6032      	str	r2, [r6, #0]
1a002e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e0c:	81a3      	strh	r3, [r4, #12]
1a002e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e12:	e03e      	b.n	1a002e92 <__swsetup_r+0xba>
1a002e14:	4b25      	ldr	r3, [pc, #148]	; (1a002eac <__swsetup_r+0xd4>)
1a002e16:	429c      	cmp	r4, r3
1a002e18:	d101      	bne.n	1a002e1e <__swsetup_r+0x46>
1a002e1a:	68ac      	ldr	r4, [r5, #8]
1a002e1c:	e7eb      	b.n	1a002df6 <__swsetup_r+0x1e>
1a002e1e:	4b24      	ldr	r3, [pc, #144]	; (1a002eb0 <__swsetup_r+0xd8>)
1a002e20:	429c      	cmp	r4, r3
1a002e22:	bf08      	it	eq
1a002e24:	68ec      	ldreq	r4, [r5, #12]
1a002e26:	e7e6      	b.n	1a002df6 <__swsetup_r+0x1e>
1a002e28:	0751      	lsls	r1, r2, #29
1a002e2a:	d512      	bpl.n	1a002e52 <__swsetup_r+0x7a>
1a002e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002e2e:	b141      	cbz	r1, 1a002e42 <__swsetup_r+0x6a>
1a002e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002e34:	4299      	cmp	r1, r3
1a002e36:	d002      	beq.n	1a002e3e <__swsetup_r+0x66>
1a002e38:	4630      	mov	r0, r6
1a002e3a:	f000 fa59 	bl	1a0032f0 <_free_r>
1a002e3e:	2300      	movs	r3, #0
1a002e40:	6363      	str	r3, [r4, #52]	; 0x34
1a002e42:	89a3      	ldrh	r3, [r4, #12]
1a002e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a002e48:	81a3      	strh	r3, [r4, #12]
1a002e4a:	2300      	movs	r3, #0
1a002e4c:	6063      	str	r3, [r4, #4]
1a002e4e:	6923      	ldr	r3, [r4, #16]
1a002e50:	6023      	str	r3, [r4, #0]
1a002e52:	89a3      	ldrh	r3, [r4, #12]
1a002e54:	f043 0308 	orr.w	r3, r3, #8
1a002e58:	81a3      	strh	r3, [r4, #12]
1a002e5a:	6923      	ldr	r3, [r4, #16]
1a002e5c:	b94b      	cbnz	r3, 1a002e72 <__swsetup_r+0x9a>
1a002e5e:	89a3      	ldrh	r3, [r4, #12]
1a002e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002e68:	d003      	beq.n	1a002e72 <__swsetup_r+0x9a>
1a002e6a:	4621      	mov	r1, r4
1a002e6c:	4630      	mov	r0, r6
1a002e6e:	f000 f9ff 	bl	1a003270 <__smakebuf_r>
1a002e72:	89a2      	ldrh	r2, [r4, #12]
1a002e74:	f012 0301 	ands.w	r3, r2, #1
1a002e78:	d00c      	beq.n	1a002e94 <__swsetup_r+0xbc>
1a002e7a:	2300      	movs	r3, #0
1a002e7c:	60a3      	str	r3, [r4, #8]
1a002e7e:	6963      	ldr	r3, [r4, #20]
1a002e80:	425b      	negs	r3, r3
1a002e82:	61a3      	str	r3, [r4, #24]
1a002e84:	6923      	ldr	r3, [r4, #16]
1a002e86:	b953      	cbnz	r3, 1a002e9e <__swsetup_r+0xc6>
1a002e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002e8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a002e90:	d1ba      	bne.n	1a002e08 <__swsetup_r+0x30>
1a002e92:	bd70      	pop	{r4, r5, r6, pc}
1a002e94:	0792      	lsls	r2, r2, #30
1a002e96:	bf58      	it	pl
1a002e98:	6963      	ldrpl	r3, [r4, #20]
1a002e9a:	60a3      	str	r3, [r4, #8]
1a002e9c:	e7f2      	b.n	1a002e84 <__swsetup_r+0xac>
1a002e9e:	2000      	movs	r0, #0
1a002ea0:	e7f7      	b.n	1a002e92 <__swsetup_r+0xba>
1a002ea2:	bf00      	nop
1a002ea4:	100000f4 	.word	0x100000f4
1a002ea8:	1a00452c 	.word	0x1a00452c
1a002eac:	1a00454c 	.word	0x1a00454c
1a002eb0:	1a00450c 	.word	0x1a00450c

1a002eb4 <__sflush_r>:
1a002eb4:	898a      	ldrh	r2, [r1, #12]
1a002eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002eba:	4605      	mov	r5, r0
1a002ebc:	0710      	lsls	r0, r2, #28
1a002ebe:	460c      	mov	r4, r1
1a002ec0:	d458      	bmi.n	1a002f74 <__sflush_r+0xc0>
1a002ec2:	684b      	ldr	r3, [r1, #4]
1a002ec4:	2b00      	cmp	r3, #0
1a002ec6:	dc05      	bgt.n	1a002ed4 <__sflush_r+0x20>
1a002ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002eca:	2b00      	cmp	r3, #0
1a002ecc:	dc02      	bgt.n	1a002ed4 <__sflush_r+0x20>
1a002ece:	2000      	movs	r0, #0
1a002ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002ed6:	2e00      	cmp	r6, #0
1a002ed8:	d0f9      	beq.n	1a002ece <__sflush_r+0x1a>
1a002eda:	2300      	movs	r3, #0
1a002edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a002ee0:	682f      	ldr	r7, [r5, #0]
1a002ee2:	602b      	str	r3, [r5, #0]
1a002ee4:	d032      	beq.n	1a002f4c <__sflush_r+0x98>
1a002ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002ee8:	89a3      	ldrh	r3, [r4, #12]
1a002eea:	075a      	lsls	r2, r3, #29
1a002eec:	d505      	bpl.n	1a002efa <__sflush_r+0x46>
1a002eee:	6863      	ldr	r3, [r4, #4]
1a002ef0:	1ac0      	subs	r0, r0, r3
1a002ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002ef4:	b10b      	cbz	r3, 1a002efa <__sflush_r+0x46>
1a002ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002ef8:	1ac0      	subs	r0, r0, r3
1a002efa:	2300      	movs	r3, #0
1a002efc:	4602      	mov	r2, r0
1a002efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002f00:	6a21      	ldr	r1, [r4, #32]
1a002f02:	4628      	mov	r0, r5
1a002f04:	47b0      	blx	r6
1a002f06:	1c43      	adds	r3, r0, #1
1a002f08:	89a3      	ldrh	r3, [r4, #12]
1a002f0a:	d106      	bne.n	1a002f1a <__sflush_r+0x66>
1a002f0c:	6829      	ldr	r1, [r5, #0]
1a002f0e:	291d      	cmp	r1, #29
1a002f10:	d849      	bhi.n	1a002fa6 <__sflush_r+0xf2>
1a002f12:	4a2a      	ldr	r2, [pc, #168]	; (1a002fbc <__sflush_r+0x108>)
1a002f14:	40ca      	lsrs	r2, r1
1a002f16:	07d6      	lsls	r6, r2, #31
1a002f18:	d545      	bpl.n	1a002fa6 <__sflush_r+0xf2>
1a002f1a:	2200      	movs	r2, #0
1a002f1c:	6062      	str	r2, [r4, #4]
1a002f1e:	04d9      	lsls	r1, r3, #19
1a002f20:	6922      	ldr	r2, [r4, #16]
1a002f22:	6022      	str	r2, [r4, #0]
1a002f24:	d504      	bpl.n	1a002f30 <__sflush_r+0x7c>
1a002f26:	1c42      	adds	r2, r0, #1
1a002f28:	d101      	bne.n	1a002f2e <__sflush_r+0x7a>
1a002f2a:	682b      	ldr	r3, [r5, #0]
1a002f2c:	b903      	cbnz	r3, 1a002f30 <__sflush_r+0x7c>
1a002f2e:	6560      	str	r0, [r4, #84]	; 0x54
1a002f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002f32:	602f      	str	r7, [r5, #0]
1a002f34:	2900      	cmp	r1, #0
1a002f36:	d0ca      	beq.n	1a002ece <__sflush_r+0x1a>
1a002f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002f3c:	4299      	cmp	r1, r3
1a002f3e:	d002      	beq.n	1a002f46 <__sflush_r+0x92>
1a002f40:	4628      	mov	r0, r5
1a002f42:	f000 f9d5 	bl	1a0032f0 <_free_r>
1a002f46:	2000      	movs	r0, #0
1a002f48:	6360      	str	r0, [r4, #52]	; 0x34
1a002f4a:	e7c1      	b.n	1a002ed0 <__sflush_r+0x1c>
1a002f4c:	6a21      	ldr	r1, [r4, #32]
1a002f4e:	2301      	movs	r3, #1
1a002f50:	4628      	mov	r0, r5
1a002f52:	47b0      	blx	r6
1a002f54:	1c41      	adds	r1, r0, #1
1a002f56:	d1c7      	bne.n	1a002ee8 <__sflush_r+0x34>
1a002f58:	682b      	ldr	r3, [r5, #0]
1a002f5a:	2b00      	cmp	r3, #0
1a002f5c:	d0c4      	beq.n	1a002ee8 <__sflush_r+0x34>
1a002f5e:	2b1d      	cmp	r3, #29
1a002f60:	d001      	beq.n	1a002f66 <__sflush_r+0xb2>
1a002f62:	2b16      	cmp	r3, #22
1a002f64:	d101      	bne.n	1a002f6a <__sflush_r+0xb6>
1a002f66:	602f      	str	r7, [r5, #0]
1a002f68:	e7b1      	b.n	1a002ece <__sflush_r+0x1a>
1a002f6a:	89a3      	ldrh	r3, [r4, #12]
1a002f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002f70:	81a3      	strh	r3, [r4, #12]
1a002f72:	e7ad      	b.n	1a002ed0 <__sflush_r+0x1c>
1a002f74:	690f      	ldr	r7, [r1, #16]
1a002f76:	2f00      	cmp	r7, #0
1a002f78:	d0a9      	beq.n	1a002ece <__sflush_r+0x1a>
1a002f7a:	0793      	lsls	r3, r2, #30
1a002f7c:	680e      	ldr	r6, [r1, #0]
1a002f7e:	bf08      	it	eq
1a002f80:	694b      	ldreq	r3, [r1, #20]
1a002f82:	600f      	str	r7, [r1, #0]
1a002f84:	bf18      	it	ne
1a002f86:	2300      	movne	r3, #0
1a002f88:	eba6 0807 	sub.w	r8, r6, r7
1a002f8c:	608b      	str	r3, [r1, #8]
1a002f8e:	f1b8 0f00 	cmp.w	r8, #0
1a002f92:	dd9c      	ble.n	1a002ece <__sflush_r+0x1a>
1a002f94:	4643      	mov	r3, r8
1a002f96:	463a      	mov	r2, r7
1a002f98:	6a21      	ldr	r1, [r4, #32]
1a002f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002f9c:	4628      	mov	r0, r5
1a002f9e:	47b0      	blx	r6
1a002fa0:	2800      	cmp	r0, #0
1a002fa2:	dc06      	bgt.n	1a002fb2 <__sflush_r+0xfe>
1a002fa4:	89a3      	ldrh	r3, [r4, #12]
1a002fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002faa:	81a3      	strh	r3, [r4, #12]
1a002fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002fb0:	e78e      	b.n	1a002ed0 <__sflush_r+0x1c>
1a002fb2:	4407      	add	r7, r0
1a002fb4:	eba8 0800 	sub.w	r8, r8, r0
1a002fb8:	e7e9      	b.n	1a002f8e <__sflush_r+0xda>
1a002fba:	bf00      	nop
1a002fbc:	20400001 	.word	0x20400001

1a002fc0 <_fflush_r>:
1a002fc0:	b538      	push	{r3, r4, r5, lr}
1a002fc2:	690b      	ldr	r3, [r1, #16]
1a002fc4:	4605      	mov	r5, r0
1a002fc6:	460c      	mov	r4, r1
1a002fc8:	b913      	cbnz	r3, 1a002fd0 <_fflush_r+0x10>
1a002fca:	2500      	movs	r5, #0
1a002fcc:	4628      	mov	r0, r5
1a002fce:	bd38      	pop	{r3, r4, r5, pc}
1a002fd0:	b118      	cbz	r0, 1a002fda <_fflush_r+0x1a>
1a002fd2:	6983      	ldr	r3, [r0, #24]
1a002fd4:	b90b      	cbnz	r3, 1a002fda <_fflush_r+0x1a>
1a002fd6:	f000 f887 	bl	1a0030e8 <__sinit>
1a002fda:	4b14      	ldr	r3, [pc, #80]	; (1a00302c <_fflush_r+0x6c>)
1a002fdc:	429c      	cmp	r4, r3
1a002fde:	d11b      	bne.n	1a003018 <_fflush_r+0x58>
1a002fe0:	686c      	ldr	r4, [r5, #4]
1a002fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002fe6:	2b00      	cmp	r3, #0
1a002fe8:	d0ef      	beq.n	1a002fca <_fflush_r+0xa>
1a002fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002fec:	07d0      	lsls	r0, r2, #31
1a002fee:	d404      	bmi.n	1a002ffa <_fflush_r+0x3a>
1a002ff0:	0599      	lsls	r1, r3, #22
1a002ff2:	d402      	bmi.n	1a002ffa <_fflush_r+0x3a>
1a002ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002ff6:	f000 f914 	bl	1a003222 <__retarget_lock_acquire_recursive>
1a002ffa:	4628      	mov	r0, r5
1a002ffc:	4621      	mov	r1, r4
1a002ffe:	f7ff ff59 	bl	1a002eb4 <__sflush_r>
1a003002:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003004:	07da      	lsls	r2, r3, #31
1a003006:	4605      	mov	r5, r0
1a003008:	d4e0      	bmi.n	1a002fcc <_fflush_r+0xc>
1a00300a:	89a3      	ldrh	r3, [r4, #12]
1a00300c:	059b      	lsls	r3, r3, #22
1a00300e:	d4dd      	bmi.n	1a002fcc <_fflush_r+0xc>
1a003010:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003012:	f000 f907 	bl	1a003224 <__retarget_lock_release_recursive>
1a003016:	e7d9      	b.n	1a002fcc <_fflush_r+0xc>
1a003018:	4b05      	ldr	r3, [pc, #20]	; (1a003030 <_fflush_r+0x70>)
1a00301a:	429c      	cmp	r4, r3
1a00301c:	d101      	bne.n	1a003022 <_fflush_r+0x62>
1a00301e:	68ac      	ldr	r4, [r5, #8]
1a003020:	e7df      	b.n	1a002fe2 <_fflush_r+0x22>
1a003022:	4b04      	ldr	r3, [pc, #16]	; (1a003034 <_fflush_r+0x74>)
1a003024:	429c      	cmp	r4, r3
1a003026:	bf08      	it	eq
1a003028:	68ec      	ldreq	r4, [r5, #12]
1a00302a:	e7da      	b.n	1a002fe2 <_fflush_r+0x22>
1a00302c:	1a00452c 	.word	0x1a00452c
1a003030:	1a00454c 	.word	0x1a00454c
1a003034:	1a00450c 	.word	0x1a00450c

1a003038 <std>:
1a003038:	2300      	movs	r3, #0
1a00303a:	b510      	push	{r4, lr}
1a00303c:	4604      	mov	r4, r0
1a00303e:	e9c0 3300 	strd	r3, r3, [r0]
1a003042:	6083      	str	r3, [r0, #8]
1a003044:	8181      	strh	r1, [r0, #12]
1a003046:	6643      	str	r3, [r0, #100]	; 0x64
1a003048:	81c2      	strh	r2, [r0, #14]
1a00304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00304e:	6183      	str	r3, [r0, #24]
1a003050:	4619      	mov	r1, r3
1a003052:	2208      	movs	r2, #8
1a003054:	305c      	adds	r0, #92	; 0x5c
1a003056:	f7ff fd97 	bl	1a002b88 <memset>
1a00305a:	4b05      	ldr	r3, [pc, #20]	; (1a003070 <std+0x38>)
1a00305c:	6263      	str	r3, [r4, #36]	; 0x24
1a00305e:	4b05      	ldr	r3, [pc, #20]	; (1a003074 <std+0x3c>)
1a003060:	62a3      	str	r3, [r4, #40]	; 0x28
1a003062:	4b05      	ldr	r3, [pc, #20]	; (1a003078 <std+0x40>)
1a003064:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003066:	4b05      	ldr	r3, [pc, #20]	; (1a00307c <std+0x44>)
1a003068:	6224      	str	r4, [r4, #32]
1a00306a:	6323      	str	r3, [r4, #48]	; 0x30
1a00306c:	bd10      	pop	{r4, pc}
1a00306e:	bf00      	nop
1a003070:	1a0039f9 	.word	0x1a0039f9
1a003074:	1a003a1b 	.word	0x1a003a1b
1a003078:	1a003a53 	.word	0x1a003a53
1a00307c:	1a003a77 	.word	0x1a003a77

1a003080 <_cleanup_r>:
1a003080:	4901      	ldr	r1, [pc, #4]	; (1a003088 <_cleanup_r+0x8>)
1a003082:	f000 b8af 	b.w	1a0031e4 <_fwalk_reent>
1a003086:	bf00      	nop
1a003088:	1a002fc1 	.word	0x1a002fc1

1a00308c <__sfmoreglue>:
1a00308c:	b570      	push	{r4, r5, r6, lr}
1a00308e:	1e4a      	subs	r2, r1, #1
1a003090:	2568      	movs	r5, #104	; 0x68
1a003092:	4355      	muls	r5, r2
1a003094:	460e      	mov	r6, r1
1a003096:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00309a:	f000 f977 	bl	1a00338c <_malloc_r>
1a00309e:	4604      	mov	r4, r0
1a0030a0:	b140      	cbz	r0, 1a0030b4 <__sfmoreglue+0x28>
1a0030a2:	2100      	movs	r1, #0
1a0030a4:	e9c0 1600 	strd	r1, r6, [r0]
1a0030a8:	300c      	adds	r0, #12
1a0030aa:	60a0      	str	r0, [r4, #8]
1a0030ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0030b0:	f7ff fd6a 	bl	1a002b88 <memset>
1a0030b4:	4620      	mov	r0, r4
1a0030b6:	bd70      	pop	{r4, r5, r6, pc}

1a0030b8 <__sfp_lock_acquire>:
1a0030b8:	4801      	ldr	r0, [pc, #4]	; (1a0030c0 <__sfp_lock_acquire+0x8>)
1a0030ba:	f000 b8b2 	b.w	1a003222 <__retarget_lock_acquire_recursive>
1a0030be:	bf00      	nop
1a0030c0:	100001c8 	.word	0x100001c8

1a0030c4 <__sfp_lock_release>:
1a0030c4:	4801      	ldr	r0, [pc, #4]	; (1a0030cc <__sfp_lock_release+0x8>)
1a0030c6:	f000 b8ad 	b.w	1a003224 <__retarget_lock_release_recursive>
1a0030ca:	bf00      	nop
1a0030cc:	100001c8 	.word	0x100001c8

1a0030d0 <__sinit_lock_acquire>:
1a0030d0:	4801      	ldr	r0, [pc, #4]	; (1a0030d8 <__sinit_lock_acquire+0x8>)
1a0030d2:	f000 b8a6 	b.w	1a003222 <__retarget_lock_acquire_recursive>
1a0030d6:	bf00      	nop
1a0030d8:	100001c3 	.word	0x100001c3

1a0030dc <__sinit_lock_release>:
1a0030dc:	4801      	ldr	r0, [pc, #4]	; (1a0030e4 <__sinit_lock_release+0x8>)
1a0030de:	f000 b8a1 	b.w	1a003224 <__retarget_lock_release_recursive>
1a0030e2:	bf00      	nop
1a0030e4:	100001c3 	.word	0x100001c3

1a0030e8 <__sinit>:
1a0030e8:	b510      	push	{r4, lr}
1a0030ea:	4604      	mov	r4, r0
1a0030ec:	f7ff fff0 	bl	1a0030d0 <__sinit_lock_acquire>
1a0030f0:	69a3      	ldr	r3, [r4, #24]
1a0030f2:	b11b      	cbz	r3, 1a0030fc <__sinit+0x14>
1a0030f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0030f8:	f7ff bff0 	b.w	1a0030dc <__sinit_lock_release>
1a0030fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003100:	6523      	str	r3, [r4, #80]	; 0x50
1a003102:	4b13      	ldr	r3, [pc, #76]	; (1a003150 <__sinit+0x68>)
1a003104:	4a13      	ldr	r2, [pc, #76]	; (1a003154 <__sinit+0x6c>)
1a003106:	681b      	ldr	r3, [r3, #0]
1a003108:	62a2      	str	r2, [r4, #40]	; 0x28
1a00310a:	42a3      	cmp	r3, r4
1a00310c:	bf04      	itt	eq
1a00310e:	2301      	moveq	r3, #1
1a003110:	61a3      	streq	r3, [r4, #24]
1a003112:	4620      	mov	r0, r4
1a003114:	f000 f820 	bl	1a003158 <__sfp>
1a003118:	6060      	str	r0, [r4, #4]
1a00311a:	4620      	mov	r0, r4
1a00311c:	f000 f81c 	bl	1a003158 <__sfp>
1a003120:	60a0      	str	r0, [r4, #8]
1a003122:	4620      	mov	r0, r4
1a003124:	f000 f818 	bl	1a003158 <__sfp>
1a003128:	2200      	movs	r2, #0
1a00312a:	60e0      	str	r0, [r4, #12]
1a00312c:	2104      	movs	r1, #4
1a00312e:	6860      	ldr	r0, [r4, #4]
1a003130:	f7ff ff82 	bl	1a003038 <std>
1a003134:	2201      	movs	r2, #1
1a003136:	2109      	movs	r1, #9
1a003138:	68a0      	ldr	r0, [r4, #8]
1a00313a:	f7ff ff7d 	bl	1a003038 <std>
1a00313e:	2202      	movs	r2, #2
1a003140:	2112      	movs	r1, #18
1a003142:	68e0      	ldr	r0, [r4, #12]
1a003144:	f7ff ff78 	bl	1a003038 <std>
1a003148:	2301      	movs	r3, #1
1a00314a:	61a3      	str	r3, [r4, #24]
1a00314c:	e7d2      	b.n	1a0030f4 <__sinit+0xc>
1a00314e:	bf00      	nop
1a003150:	1a00456c 	.word	0x1a00456c
1a003154:	1a003081 	.word	0x1a003081

1a003158 <__sfp>:
1a003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00315a:	4607      	mov	r7, r0
1a00315c:	f7ff ffac 	bl	1a0030b8 <__sfp_lock_acquire>
1a003160:	4b1e      	ldr	r3, [pc, #120]	; (1a0031dc <__sfp+0x84>)
1a003162:	681e      	ldr	r6, [r3, #0]
1a003164:	69b3      	ldr	r3, [r6, #24]
1a003166:	b913      	cbnz	r3, 1a00316e <__sfp+0x16>
1a003168:	4630      	mov	r0, r6
1a00316a:	f7ff ffbd 	bl	1a0030e8 <__sinit>
1a00316e:	3648      	adds	r6, #72	; 0x48
1a003170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003174:	3b01      	subs	r3, #1
1a003176:	d503      	bpl.n	1a003180 <__sfp+0x28>
1a003178:	6833      	ldr	r3, [r6, #0]
1a00317a:	b30b      	cbz	r3, 1a0031c0 <__sfp+0x68>
1a00317c:	6836      	ldr	r6, [r6, #0]
1a00317e:	e7f7      	b.n	1a003170 <__sfp+0x18>
1a003180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003184:	b9d5      	cbnz	r5, 1a0031bc <__sfp+0x64>
1a003186:	4b16      	ldr	r3, [pc, #88]	; (1a0031e0 <__sfp+0x88>)
1a003188:	60e3      	str	r3, [r4, #12]
1a00318a:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00318e:	6665      	str	r5, [r4, #100]	; 0x64
1a003190:	f000 f846 	bl	1a003220 <__retarget_lock_init_recursive>
1a003194:	f7ff ff96 	bl	1a0030c4 <__sfp_lock_release>
1a003198:	6025      	str	r5, [r4, #0]
1a00319a:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00319e:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0031a2:	61a5      	str	r5, [r4, #24]
1a0031a4:	2208      	movs	r2, #8
1a0031a6:	4629      	mov	r1, r5
1a0031a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0031ac:	f7ff fcec 	bl	1a002b88 <memset>
1a0031b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0031b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0031b8:	4620      	mov	r0, r4
1a0031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0031bc:	3468      	adds	r4, #104	; 0x68
1a0031be:	e7d9      	b.n	1a003174 <__sfp+0x1c>
1a0031c0:	2104      	movs	r1, #4
1a0031c2:	4638      	mov	r0, r7
1a0031c4:	f7ff ff62 	bl	1a00308c <__sfmoreglue>
1a0031c8:	4604      	mov	r4, r0
1a0031ca:	6030      	str	r0, [r6, #0]
1a0031cc:	2800      	cmp	r0, #0
1a0031ce:	d1d5      	bne.n	1a00317c <__sfp+0x24>
1a0031d0:	f7ff ff78 	bl	1a0030c4 <__sfp_lock_release>
1a0031d4:	230c      	movs	r3, #12
1a0031d6:	603b      	str	r3, [r7, #0]
1a0031d8:	e7ee      	b.n	1a0031b8 <__sfp+0x60>
1a0031da:	bf00      	nop
1a0031dc:	1a00456c 	.word	0x1a00456c
1a0031e0:	ffff0001 	.word	0xffff0001

1a0031e4 <_fwalk_reent>:
1a0031e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0031e8:	4680      	mov	r8, r0
1a0031ea:	4689      	mov	r9, r1
1a0031ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0031f0:	2600      	movs	r6, #0
1a0031f2:	b914      	cbnz	r4, 1a0031fa <_fwalk_reent+0x16>
1a0031f4:	4630      	mov	r0, r6
1a0031f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0031fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0031fe:	3f01      	subs	r7, #1
1a003200:	d501      	bpl.n	1a003206 <_fwalk_reent+0x22>
1a003202:	6824      	ldr	r4, [r4, #0]
1a003204:	e7f5      	b.n	1a0031f2 <_fwalk_reent+0xe>
1a003206:	89ab      	ldrh	r3, [r5, #12]
1a003208:	2b01      	cmp	r3, #1
1a00320a:	d907      	bls.n	1a00321c <_fwalk_reent+0x38>
1a00320c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003210:	3301      	adds	r3, #1
1a003212:	d003      	beq.n	1a00321c <_fwalk_reent+0x38>
1a003214:	4629      	mov	r1, r5
1a003216:	4640      	mov	r0, r8
1a003218:	47c8      	blx	r9
1a00321a:	4306      	orrs	r6, r0
1a00321c:	3568      	adds	r5, #104	; 0x68
1a00321e:	e7ee      	b.n	1a0031fe <_fwalk_reent+0x1a>

1a003220 <__retarget_lock_init_recursive>:
1a003220:	4770      	bx	lr

1a003222 <__retarget_lock_acquire_recursive>:
1a003222:	4770      	bx	lr

1a003224 <__retarget_lock_release_recursive>:
1a003224:	4770      	bx	lr

1a003226 <__swhatbuf_r>:
1a003226:	b570      	push	{r4, r5, r6, lr}
1a003228:	460e      	mov	r6, r1
1a00322a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00322e:	2900      	cmp	r1, #0
1a003230:	b096      	sub	sp, #88	; 0x58
1a003232:	4614      	mov	r4, r2
1a003234:	461d      	mov	r5, r3
1a003236:	da07      	bge.n	1a003248 <__swhatbuf_r+0x22>
1a003238:	2300      	movs	r3, #0
1a00323a:	602b      	str	r3, [r5, #0]
1a00323c:	89b3      	ldrh	r3, [r6, #12]
1a00323e:	061a      	lsls	r2, r3, #24
1a003240:	d410      	bmi.n	1a003264 <__swhatbuf_r+0x3e>
1a003242:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003246:	e00e      	b.n	1a003266 <__swhatbuf_r+0x40>
1a003248:	466a      	mov	r2, sp
1a00324a:	f7fd fbbc 	bl	1a0009c6 <_fstat_r>
1a00324e:	2800      	cmp	r0, #0
1a003250:	dbf2      	blt.n	1a003238 <__swhatbuf_r+0x12>
1a003252:	9a01      	ldr	r2, [sp, #4]
1a003254:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003258:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00325c:	425a      	negs	r2, r3
1a00325e:	415a      	adcs	r2, r3
1a003260:	602a      	str	r2, [r5, #0]
1a003262:	e7ee      	b.n	1a003242 <__swhatbuf_r+0x1c>
1a003264:	2340      	movs	r3, #64	; 0x40
1a003266:	2000      	movs	r0, #0
1a003268:	6023      	str	r3, [r4, #0]
1a00326a:	b016      	add	sp, #88	; 0x58
1a00326c:	bd70      	pop	{r4, r5, r6, pc}
1a00326e:	Address 0x000000001a00326e is out of bounds.


1a003270 <__smakebuf_r>:
1a003270:	898b      	ldrh	r3, [r1, #12]
1a003272:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a003274:	079d      	lsls	r5, r3, #30
1a003276:	4606      	mov	r6, r0
1a003278:	460c      	mov	r4, r1
1a00327a:	d507      	bpl.n	1a00328c <__smakebuf_r+0x1c>
1a00327c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003280:	6023      	str	r3, [r4, #0]
1a003282:	6123      	str	r3, [r4, #16]
1a003284:	2301      	movs	r3, #1
1a003286:	6163      	str	r3, [r4, #20]
1a003288:	b002      	add	sp, #8
1a00328a:	bd70      	pop	{r4, r5, r6, pc}
1a00328c:	ab01      	add	r3, sp, #4
1a00328e:	466a      	mov	r2, sp
1a003290:	f7ff ffc9 	bl	1a003226 <__swhatbuf_r>
1a003294:	9900      	ldr	r1, [sp, #0]
1a003296:	4605      	mov	r5, r0
1a003298:	4630      	mov	r0, r6
1a00329a:	f000 f877 	bl	1a00338c <_malloc_r>
1a00329e:	b948      	cbnz	r0, 1a0032b4 <__smakebuf_r+0x44>
1a0032a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0032a4:	059a      	lsls	r2, r3, #22
1a0032a6:	d4ef      	bmi.n	1a003288 <__smakebuf_r+0x18>
1a0032a8:	f023 0303 	bic.w	r3, r3, #3
1a0032ac:	f043 0302 	orr.w	r3, r3, #2
1a0032b0:	81a3      	strh	r3, [r4, #12]
1a0032b2:	e7e3      	b.n	1a00327c <__smakebuf_r+0xc>
1a0032b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0032ec <__smakebuf_r+0x7c>)
1a0032b6:	62b3      	str	r3, [r6, #40]	; 0x28
1a0032b8:	89a3      	ldrh	r3, [r4, #12]
1a0032ba:	6020      	str	r0, [r4, #0]
1a0032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0032c0:	81a3      	strh	r3, [r4, #12]
1a0032c2:	9b00      	ldr	r3, [sp, #0]
1a0032c4:	6163      	str	r3, [r4, #20]
1a0032c6:	9b01      	ldr	r3, [sp, #4]
1a0032c8:	6120      	str	r0, [r4, #16]
1a0032ca:	b15b      	cbz	r3, 1a0032e4 <__smakebuf_r+0x74>
1a0032cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0032d0:	4630      	mov	r0, r6
1a0032d2:	f7fd fb7d 	bl	1a0009d0 <_isatty_r>
1a0032d6:	b128      	cbz	r0, 1a0032e4 <__smakebuf_r+0x74>
1a0032d8:	89a3      	ldrh	r3, [r4, #12]
1a0032da:	f023 0303 	bic.w	r3, r3, #3
1a0032de:	f043 0301 	orr.w	r3, r3, #1
1a0032e2:	81a3      	strh	r3, [r4, #12]
1a0032e4:	89a3      	ldrh	r3, [r4, #12]
1a0032e6:	431d      	orrs	r5, r3
1a0032e8:	81a5      	strh	r5, [r4, #12]
1a0032ea:	e7cd      	b.n	1a003288 <__smakebuf_r+0x18>
1a0032ec:	1a003081 	.word	0x1a003081

1a0032f0 <_free_r>:
1a0032f0:	b538      	push	{r3, r4, r5, lr}
1a0032f2:	4605      	mov	r5, r0
1a0032f4:	2900      	cmp	r1, #0
1a0032f6:	d045      	beq.n	1a003384 <_free_r+0x94>
1a0032f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0032fc:	1f0c      	subs	r4, r1, #4
1a0032fe:	2b00      	cmp	r3, #0
1a003300:	bfb8      	it	lt
1a003302:	18e4      	addlt	r4, r4, r3
1a003304:	f000 fc0c 	bl	1a003b20 <__malloc_lock>
1a003308:	4a1f      	ldr	r2, [pc, #124]	; (1a003388 <_free_r+0x98>)
1a00330a:	6813      	ldr	r3, [r2, #0]
1a00330c:	4610      	mov	r0, r2
1a00330e:	b933      	cbnz	r3, 1a00331e <_free_r+0x2e>
1a003310:	6063      	str	r3, [r4, #4]
1a003312:	6014      	str	r4, [r2, #0]
1a003314:	4628      	mov	r0, r5
1a003316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00331a:	f000 bc07 	b.w	1a003b2c <__malloc_unlock>
1a00331e:	42a3      	cmp	r3, r4
1a003320:	d90c      	bls.n	1a00333c <_free_r+0x4c>
1a003322:	6821      	ldr	r1, [r4, #0]
1a003324:	1862      	adds	r2, r4, r1
1a003326:	4293      	cmp	r3, r2
1a003328:	bf04      	itt	eq
1a00332a:	681a      	ldreq	r2, [r3, #0]
1a00332c:	685b      	ldreq	r3, [r3, #4]
1a00332e:	6063      	str	r3, [r4, #4]
1a003330:	bf04      	itt	eq
1a003332:	1852      	addeq	r2, r2, r1
1a003334:	6022      	streq	r2, [r4, #0]
1a003336:	6004      	str	r4, [r0, #0]
1a003338:	e7ec      	b.n	1a003314 <_free_r+0x24>
1a00333a:	4613      	mov	r3, r2
1a00333c:	685a      	ldr	r2, [r3, #4]
1a00333e:	b10a      	cbz	r2, 1a003344 <_free_r+0x54>
1a003340:	42a2      	cmp	r2, r4
1a003342:	d9fa      	bls.n	1a00333a <_free_r+0x4a>
1a003344:	6819      	ldr	r1, [r3, #0]
1a003346:	1858      	adds	r0, r3, r1
1a003348:	42a0      	cmp	r0, r4
1a00334a:	d10b      	bne.n	1a003364 <_free_r+0x74>
1a00334c:	6820      	ldr	r0, [r4, #0]
1a00334e:	4401      	add	r1, r0
1a003350:	1858      	adds	r0, r3, r1
1a003352:	4282      	cmp	r2, r0
1a003354:	6019      	str	r1, [r3, #0]
1a003356:	d1dd      	bne.n	1a003314 <_free_r+0x24>
1a003358:	6810      	ldr	r0, [r2, #0]
1a00335a:	6852      	ldr	r2, [r2, #4]
1a00335c:	605a      	str	r2, [r3, #4]
1a00335e:	4401      	add	r1, r0
1a003360:	6019      	str	r1, [r3, #0]
1a003362:	e7d7      	b.n	1a003314 <_free_r+0x24>
1a003364:	d902      	bls.n	1a00336c <_free_r+0x7c>
1a003366:	230c      	movs	r3, #12
1a003368:	602b      	str	r3, [r5, #0]
1a00336a:	e7d3      	b.n	1a003314 <_free_r+0x24>
1a00336c:	6820      	ldr	r0, [r4, #0]
1a00336e:	1821      	adds	r1, r4, r0
1a003370:	428a      	cmp	r2, r1
1a003372:	bf04      	itt	eq
1a003374:	6811      	ldreq	r1, [r2, #0]
1a003376:	6852      	ldreq	r2, [r2, #4]
1a003378:	6062      	str	r2, [r4, #4]
1a00337a:	bf04      	itt	eq
1a00337c:	1809      	addeq	r1, r1, r0
1a00337e:	6021      	streq	r1, [r4, #0]
1a003380:	605c      	str	r4, [r3, #4]
1a003382:	e7c7      	b.n	1a003314 <_free_r+0x24>
1a003384:	bd38      	pop	{r3, r4, r5, pc}
1a003386:	bf00      	nop
1a003388:	100001b0 	.word	0x100001b0

1a00338c <_malloc_r>:
1a00338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00338e:	1ccd      	adds	r5, r1, #3
1a003390:	f025 0503 	bic.w	r5, r5, #3
1a003394:	3508      	adds	r5, #8
1a003396:	2d0c      	cmp	r5, #12
1a003398:	bf38      	it	cc
1a00339a:	250c      	movcc	r5, #12
1a00339c:	2d00      	cmp	r5, #0
1a00339e:	4606      	mov	r6, r0
1a0033a0:	db01      	blt.n	1a0033a6 <_malloc_r+0x1a>
1a0033a2:	42a9      	cmp	r1, r5
1a0033a4:	d903      	bls.n	1a0033ae <_malloc_r+0x22>
1a0033a6:	230c      	movs	r3, #12
1a0033a8:	6033      	str	r3, [r6, #0]
1a0033aa:	2000      	movs	r0, #0
1a0033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0033ae:	f000 fbb7 	bl	1a003b20 <__malloc_lock>
1a0033b2:	4921      	ldr	r1, [pc, #132]	; (1a003438 <_malloc_r+0xac>)
1a0033b4:	680a      	ldr	r2, [r1, #0]
1a0033b6:	4614      	mov	r4, r2
1a0033b8:	b99c      	cbnz	r4, 1a0033e2 <_malloc_r+0x56>
1a0033ba:	4f20      	ldr	r7, [pc, #128]	; (1a00343c <_malloc_r+0xb0>)
1a0033bc:	683b      	ldr	r3, [r7, #0]
1a0033be:	b923      	cbnz	r3, 1a0033ca <_malloc_r+0x3e>
1a0033c0:	4621      	mov	r1, r4
1a0033c2:	4630      	mov	r0, r6
1a0033c4:	f7fd fb4e 	bl	1a000a64 <_sbrk_r>
1a0033c8:	6038      	str	r0, [r7, #0]
1a0033ca:	4629      	mov	r1, r5
1a0033cc:	4630      	mov	r0, r6
1a0033ce:	f7fd fb49 	bl	1a000a64 <_sbrk_r>
1a0033d2:	1c43      	adds	r3, r0, #1
1a0033d4:	d123      	bne.n	1a00341e <_malloc_r+0x92>
1a0033d6:	230c      	movs	r3, #12
1a0033d8:	6033      	str	r3, [r6, #0]
1a0033da:	4630      	mov	r0, r6
1a0033dc:	f000 fba6 	bl	1a003b2c <__malloc_unlock>
1a0033e0:	e7e3      	b.n	1a0033aa <_malloc_r+0x1e>
1a0033e2:	6823      	ldr	r3, [r4, #0]
1a0033e4:	1b5b      	subs	r3, r3, r5
1a0033e6:	d417      	bmi.n	1a003418 <_malloc_r+0x8c>
1a0033e8:	2b0b      	cmp	r3, #11
1a0033ea:	d903      	bls.n	1a0033f4 <_malloc_r+0x68>
1a0033ec:	6023      	str	r3, [r4, #0]
1a0033ee:	441c      	add	r4, r3
1a0033f0:	6025      	str	r5, [r4, #0]
1a0033f2:	e004      	b.n	1a0033fe <_malloc_r+0x72>
1a0033f4:	6863      	ldr	r3, [r4, #4]
1a0033f6:	42a2      	cmp	r2, r4
1a0033f8:	bf0c      	ite	eq
1a0033fa:	600b      	streq	r3, [r1, #0]
1a0033fc:	6053      	strne	r3, [r2, #4]
1a0033fe:	4630      	mov	r0, r6
1a003400:	f000 fb94 	bl	1a003b2c <__malloc_unlock>
1a003404:	f104 000b 	add.w	r0, r4, #11
1a003408:	1d23      	adds	r3, r4, #4
1a00340a:	f020 0007 	bic.w	r0, r0, #7
1a00340e:	1ac2      	subs	r2, r0, r3
1a003410:	d0cc      	beq.n	1a0033ac <_malloc_r+0x20>
1a003412:	1a1b      	subs	r3, r3, r0
1a003414:	50a3      	str	r3, [r4, r2]
1a003416:	e7c9      	b.n	1a0033ac <_malloc_r+0x20>
1a003418:	4622      	mov	r2, r4
1a00341a:	6864      	ldr	r4, [r4, #4]
1a00341c:	e7cc      	b.n	1a0033b8 <_malloc_r+0x2c>
1a00341e:	1cc4      	adds	r4, r0, #3
1a003420:	f024 0403 	bic.w	r4, r4, #3
1a003424:	42a0      	cmp	r0, r4
1a003426:	d0e3      	beq.n	1a0033f0 <_malloc_r+0x64>
1a003428:	1a21      	subs	r1, r4, r0
1a00342a:	4630      	mov	r0, r6
1a00342c:	f7fd fb1a 	bl	1a000a64 <_sbrk_r>
1a003430:	3001      	adds	r0, #1
1a003432:	d1dd      	bne.n	1a0033f0 <_malloc_r+0x64>
1a003434:	e7cf      	b.n	1a0033d6 <_malloc_r+0x4a>
1a003436:	bf00      	nop
1a003438:	100001b0 	.word	0x100001b0
1a00343c:	100001b4 	.word	0x100001b4

1a003440 <__sfputc_r>:
1a003440:	6893      	ldr	r3, [r2, #8]
1a003442:	3b01      	subs	r3, #1
1a003444:	2b00      	cmp	r3, #0
1a003446:	b410      	push	{r4}
1a003448:	6093      	str	r3, [r2, #8]
1a00344a:	da08      	bge.n	1a00345e <__sfputc_r+0x1e>
1a00344c:	6994      	ldr	r4, [r2, #24]
1a00344e:	42a3      	cmp	r3, r4
1a003450:	db01      	blt.n	1a003456 <__sfputc_r+0x16>
1a003452:	290a      	cmp	r1, #10
1a003454:	d103      	bne.n	1a00345e <__sfputc_r+0x1e>
1a003456:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00345a:	f7ff bc6b 	b.w	1a002d34 <__swbuf_r>
1a00345e:	6813      	ldr	r3, [r2, #0]
1a003460:	1c58      	adds	r0, r3, #1
1a003462:	6010      	str	r0, [r2, #0]
1a003464:	7019      	strb	r1, [r3, #0]
1a003466:	4608      	mov	r0, r1
1a003468:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00346c:	4770      	bx	lr

1a00346e <__sfputs_r>:
1a00346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003470:	4606      	mov	r6, r0
1a003472:	460f      	mov	r7, r1
1a003474:	4614      	mov	r4, r2
1a003476:	18d5      	adds	r5, r2, r3
1a003478:	42ac      	cmp	r4, r5
1a00347a:	d101      	bne.n	1a003480 <__sfputs_r+0x12>
1a00347c:	2000      	movs	r0, #0
1a00347e:	e007      	b.n	1a003490 <__sfputs_r+0x22>
1a003480:	463a      	mov	r2, r7
1a003482:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003486:	4630      	mov	r0, r6
1a003488:	f7ff ffda 	bl	1a003440 <__sfputc_r>
1a00348c:	1c43      	adds	r3, r0, #1
1a00348e:	d1f3      	bne.n	1a003478 <__sfputs_r+0xa>
1a003490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003492:	Address 0x000000001a003492 is out of bounds.


1a003494 <_vfiprintf_r>:
1a003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003498:	460d      	mov	r5, r1
1a00349a:	b09d      	sub	sp, #116	; 0x74
1a00349c:	4614      	mov	r4, r2
1a00349e:	461e      	mov	r6, r3
1a0034a0:	4607      	mov	r7, r0
1a0034a2:	b118      	cbz	r0, 1a0034ac <_vfiprintf_r+0x18>
1a0034a4:	6983      	ldr	r3, [r0, #24]
1a0034a6:	b90b      	cbnz	r3, 1a0034ac <_vfiprintf_r+0x18>
1a0034a8:	f7ff fe1e 	bl	1a0030e8 <__sinit>
1a0034ac:	4b85      	ldr	r3, [pc, #532]	; (1a0036c4 <_vfiprintf_r+0x230>)
1a0034ae:	429d      	cmp	r5, r3
1a0034b0:	d11b      	bne.n	1a0034ea <_vfiprintf_r+0x56>
1a0034b2:	687d      	ldr	r5, [r7, #4]
1a0034b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0034b6:	07d9      	lsls	r1, r3, #31
1a0034b8:	d405      	bmi.n	1a0034c6 <_vfiprintf_r+0x32>
1a0034ba:	89ab      	ldrh	r3, [r5, #12]
1a0034bc:	059a      	lsls	r2, r3, #22
1a0034be:	d402      	bmi.n	1a0034c6 <_vfiprintf_r+0x32>
1a0034c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0034c2:	f7ff feae 	bl	1a003222 <__retarget_lock_acquire_recursive>
1a0034c6:	89ab      	ldrh	r3, [r5, #12]
1a0034c8:	071b      	lsls	r3, r3, #28
1a0034ca:	d501      	bpl.n	1a0034d0 <_vfiprintf_r+0x3c>
1a0034cc:	692b      	ldr	r3, [r5, #16]
1a0034ce:	b9eb      	cbnz	r3, 1a00350c <_vfiprintf_r+0x78>
1a0034d0:	4629      	mov	r1, r5
1a0034d2:	4638      	mov	r0, r7
1a0034d4:	f7ff fc80 	bl	1a002dd8 <__swsetup_r>
1a0034d8:	b1c0      	cbz	r0, 1a00350c <_vfiprintf_r+0x78>
1a0034da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0034dc:	07d8      	lsls	r0, r3, #31
1a0034de:	d50e      	bpl.n	1a0034fe <_vfiprintf_r+0x6a>
1a0034e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0034e4:	b01d      	add	sp, #116	; 0x74
1a0034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0034ea:	4b77      	ldr	r3, [pc, #476]	; (1a0036c8 <_vfiprintf_r+0x234>)
1a0034ec:	429d      	cmp	r5, r3
1a0034ee:	d101      	bne.n	1a0034f4 <_vfiprintf_r+0x60>
1a0034f0:	68bd      	ldr	r5, [r7, #8]
1a0034f2:	e7df      	b.n	1a0034b4 <_vfiprintf_r+0x20>
1a0034f4:	4b75      	ldr	r3, [pc, #468]	; (1a0036cc <_vfiprintf_r+0x238>)
1a0034f6:	429d      	cmp	r5, r3
1a0034f8:	bf08      	it	eq
1a0034fa:	68fd      	ldreq	r5, [r7, #12]
1a0034fc:	e7da      	b.n	1a0034b4 <_vfiprintf_r+0x20>
1a0034fe:	89ab      	ldrh	r3, [r5, #12]
1a003500:	0599      	lsls	r1, r3, #22
1a003502:	d4ed      	bmi.n	1a0034e0 <_vfiprintf_r+0x4c>
1a003504:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003506:	f7ff fe8d 	bl	1a003224 <__retarget_lock_release_recursive>
1a00350a:	e7e9      	b.n	1a0034e0 <_vfiprintf_r+0x4c>
1a00350c:	2300      	movs	r3, #0
1a00350e:	9309      	str	r3, [sp, #36]	; 0x24
1a003510:	2320      	movs	r3, #32
1a003512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003516:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a0036d0 <_vfiprintf_r+0x23c>
1a00351a:	9603      	str	r6, [sp, #12]
1a00351c:	2330      	movs	r3, #48	; 0x30
1a00351e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003522:	f04f 0a01 	mov.w	sl, #1
1a003526:	4623      	mov	r3, r4
1a003528:	461e      	mov	r6, r3
1a00352a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00352e:	b10a      	cbz	r2, 1a003534 <_vfiprintf_r+0xa0>
1a003530:	2a25      	cmp	r2, #37	; 0x25
1a003532:	d1f9      	bne.n	1a003528 <_vfiprintf_r+0x94>
1a003534:	ebb6 0b04 	subs.w	fp, r6, r4
1a003538:	d00b      	beq.n	1a003552 <_vfiprintf_r+0xbe>
1a00353a:	465b      	mov	r3, fp
1a00353c:	4622      	mov	r2, r4
1a00353e:	4629      	mov	r1, r5
1a003540:	4638      	mov	r0, r7
1a003542:	f7ff ff94 	bl	1a00346e <__sfputs_r>
1a003546:	3001      	adds	r0, #1
1a003548:	f000 80a3 	beq.w	1a003692 <_vfiprintf_r+0x1fe>
1a00354c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00354e:	445b      	add	r3, fp
1a003550:	9309      	str	r3, [sp, #36]	; 0x24
1a003552:	7833      	ldrb	r3, [r6, #0]
1a003554:	2b00      	cmp	r3, #0
1a003556:	f000 809c 	beq.w	1a003692 <_vfiprintf_r+0x1fe>
1a00355a:	2300      	movs	r3, #0
1a00355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003560:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003564:	3601      	adds	r6, #1
1a003566:	9304      	str	r3, [sp, #16]
1a003568:	9307      	str	r3, [sp, #28]
1a00356a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00356e:	931a      	str	r3, [sp, #104]	; 0x68
1a003570:	4634      	mov	r4, r6
1a003572:	2205      	movs	r2, #5
1a003574:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003578:	4855      	ldr	r0, [pc, #340]	; (1a0036d0 <_vfiprintf_r+0x23c>)
1a00357a:	f000 fa81 	bl	1a003a80 <memchr>
1a00357e:	9b04      	ldr	r3, [sp, #16]
1a003580:	b9c0      	cbnz	r0, 1a0035b4 <_vfiprintf_r+0x120>
1a003582:	06da      	lsls	r2, r3, #27
1a003584:	bf44      	itt	mi
1a003586:	2220      	movmi	r2, #32
1a003588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00358c:	0718      	lsls	r0, r3, #28
1a00358e:	bf44      	itt	mi
1a003590:	222b      	movmi	r2, #43	; 0x2b
1a003592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003596:	7832      	ldrb	r2, [r6, #0]
1a003598:	2a2a      	cmp	r2, #42	; 0x2a
1a00359a:	d013      	beq.n	1a0035c4 <_vfiprintf_r+0x130>
1a00359c:	9a07      	ldr	r2, [sp, #28]
1a00359e:	4634      	mov	r4, r6
1a0035a0:	2000      	movs	r0, #0
1a0035a2:	260a      	movs	r6, #10
1a0035a4:	4621      	mov	r1, r4
1a0035a6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0035aa:	3b30      	subs	r3, #48	; 0x30
1a0035ac:	2b09      	cmp	r3, #9
1a0035ae:	d94b      	bls.n	1a003648 <_vfiprintf_r+0x1b4>
1a0035b0:	b970      	cbnz	r0, 1a0035d0 <_vfiprintf_r+0x13c>
1a0035b2:	e014      	b.n	1a0035de <_vfiprintf_r+0x14a>
1a0035b4:	eba0 0009 	sub.w	r0, r0, r9
1a0035b8:	fa0a f000 	lsl.w	r0, sl, r0
1a0035bc:	4318      	orrs	r0, r3
1a0035be:	9004      	str	r0, [sp, #16]
1a0035c0:	4626      	mov	r6, r4
1a0035c2:	e7d5      	b.n	1a003570 <_vfiprintf_r+0xdc>
1a0035c4:	9a03      	ldr	r2, [sp, #12]
1a0035c6:	1d11      	adds	r1, r2, #4
1a0035c8:	6812      	ldr	r2, [r2, #0]
1a0035ca:	9103      	str	r1, [sp, #12]
1a0035cc:	2a00      	cmp	r2, #0
1a0035ce:	db01      	blt.n	1a0035d4 <_vfiprintf_r+0x140>
1a0035d0:	9207      	str	r2, [sp, #28]
1a0035d2:	e004      	b.n	1a0035de <_vfiprintf_r+0x14a>
1a0035d4:	4252      	negs	r2, r2
1a0035d6:	f043 0302 	orr.w	r3, r3, #2
1a0035da:	9207      	str	r2, [sp, #28]
1a0035dc:	9304      	str	r3, [sp, #16]
1a0035de:	7823      	ldrb	r3, [r4, #0]
1a0035e0:	2b2e      	cmp	r3, #46	; 0x2e
1a0035e2:	d10c      	bne.n	1a0035fe <_vfiprintf_r+0x16a>
1a0035e4:	7863      	ldrb	r3, [r4, #1]
1a0035e6:	2b2a      	cmp	r3, #42	; 0x2a
1a0035e8:	d133      	bne.n	1a003652 <_vfiprintf_r+0x1be>
1a0035ea:	9b03      	ldr	r3, [sp, #12]
1a0035ec:	1d1a      	adds	r2, r3, #4
1a0035ee:	681b      	ldr	r3, [r3, #0]
1a0035f0:	9203      	str	r2, [sp, #12]
1a0035f2:	2b00      	cmp	r3, #0
1a0035f4:	bfb8      	it	lt
1a0035f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0035fa:	3402      	adds	r4, #2
1a0035fc:	9305      	str	r3, [sp, #20]
1a0035fe:	4e35      	ldr	r6, [pc, #212]	; (1a0036d4 <_vfiprintf_r+0x240>)
1a003600:	7821      	ldrb	r1, [r4, #0]
1a003602:	2203      	movs	r2, #3
1a003604:	4630      	mov	r0, r6
1a003606:	f000 fa3b 	bl	1a003a80 <memchr>
1a00360a:	b138      	cbz	r0, 1a00361c <_vfiprintf_r+0x188>
1a00360c:	2340      	movs	r3, #64	; 0x40
1a00360e:	1b80      	subs	r0, r0, r6
1a003610:	fa03 f000 	lsl.w	r0, r3, r0
1a003614:	9b04      	ldr	r3, [sp, #16]
1a003616:	4303      	orrs	r3, r0
1a003618:	3401      	adds	r4, #1
1a00361a:	9304      	str	r3, [sp, #16]
1a00361c:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003620:	482d      	ldr	r0, [pc, #180]	; (1a0036d8 <_vfiprintf_r+0x244>)
1a003622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003626:	2206      	movs	r2, #6
1a003628:	f000 fa2a 	bl	1a003a80 <memchr>
1a00362c:	2800      	cmp	r0, #0
1a00362e:	d03f      	beq.n	1a0036b0 <_vfiprintf_r+0x21c>
1a003630:	4b2a      	ldr	r3, [pc, #168]	; (1a0036dc <_vfiprintf_r+0x248>)
1a003632:	bb13      	cbnz	r3, 1a00367a <_vfiprintf_r+0x1e6>
1a003634:	9b03      	ldr	r3, [sp, #12]
1a003636:	3307      	adds	r3, #7
1a003638:	f023 0307 	bic.w	r3, r3, #7
1a00363c:	3308      	adds	r3, #8
1a00363e:	9303      	str	r3, [sp, #12]
1a003640:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003642:	4443      	add	r3, r8
1a003644:	9309      	str	r3, [sp, #36]	; 0x24
1a003646:	e76e      	b.n	1a003526 <_vfiprintf_r+0x92>
1a003648:	fb06 3202 	mla	r2, r6, r2, r3
1a00364c:	2001      	movs	r0, #1
1a00364e:	460c      	mov	r4, r1
1a003650:	e7a8      	b.n	1a0035a4 <_vfiprintf_r+0x110>
1a003652:	2300      	movs	r3, #0
1a003654:	3401      	adds	r4, #1
1a003656:	9305      	str	r3, [sp, #20]
1a003658:	4619      	mov	r1, r3
1a00365a:	260a      	movs	r6, #10
1a00365c:	4620      	mov	r0, r4
1a00365e:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003662:	3a30      	subs	r2, #48	; 0x30
1a003664:	2a09      	cmp	r2, #9
1a003666:	d903      	bls.n	1a003670 <_vfiprintf_r+0x1dc>
1a003668:	2b00      	cmp	r3, #0
1a00366a:	d0c8      	beq.n	1a0035fe <_vfiprintf_r+0x16a>
1a00366c:	9105      	str	r1, [sp, #20]
1a00366e:	e7c6      	b.n	1a0035fe <_vfiprintf_r+0x16a>
1a003670:	fb06 2101 	mla	r1, r6, r1, r2
1a003674:	2301      	movs	r3, #1
1a003676:	4604      	mov	r4, r0
1a003678:	e7f0      	b.n	1a00365c <_vfiprintf_r+0x1c8>
1a00367a:	ab03      	add	r3, sp, #12
1a00367c:	9300      	str	r3, [sp, #0]
1a00367e:	462a      	mov	r2, r5
1a003680:	4b17      	ldr	r3, [pc, #92]	; (1a0036e0 <_vfiprintf_r+0x24c>)
1a003682:	a904      	add	r1, sp, #16
1a003684:	4638      	mov	r0, r7
1a003686:	f3af 8000 	nop.w
1a00368a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00368e:	4680      	mov	r8, r0
1a003690:	d1d6      	bne.n	1a003640 <_vfiprintf_r+0x1ac>
1a003692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003694:	07d9      	lsls	r1, r3, #31
1a003696:	d405      	bmi.n	1a0036a4 <_vfiprintf_r+0x210>
1a003698:	89ab      	ldrh	r3, [r5, #12]
1a00369a:	059a      	lsls	r2, r3, #22
1a00369c:	d402      	bmi.n	1a0036a4 <_vfiprintf_r+0x210>
1a00369e:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0036a0:	f7ff fdc0 	bl	1a003224 <__retarget_lock_release_recursive>
1a0036a4:	89ab      	ldrh	r3, [r5, #12]
1a0036a6:	065b      	lsls	r3, r3, #25
1a0036a8:	f53f af1a 	bmi.w	1a0034e0 <_vfiprintf_r+0x4c>
1a0036ac:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0036ae:	e719      	b.n	1a0034e4 <_vfiprintf_r+0x50>
1a0036b0:	ab03      	add	r3, sp, #12
1a0036b2:	9300      	str	r3, [sp, #0]
1a0036b4:	462a      	mov	r2, r5
1a0036b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0036e0 <_vfiprintf_r+0x24c>)
1a0036b8:	a904      	add	r1, sp, #16
1a0036ba:	4638      	mov	r0, r7
1a0036bc:	f000 f888 	bl	1a0037d0 <_printf_i>
1a0036c0:	e7e3      	b.n	1a00368a <_vfiprintf_r+0x1f6>
1a0036c2:	bf00      	nop
1a0036c4:	1a00452c 	.word	0x1a00452c
1a0036c8:	1a00454c 	.word	0x1a00454c
1a0036cc:	1a00450c 	.word	0x1a00450c
1a0036d0:	1a004570 	.word	0x1a004570
1a0036d4:	1a004576 	.word	0x1a004576
1a0036d8:	1a00457a 	.word	0x1a00457a
1a0036dc:	00000000 	.word	0x00000000
1a0036e0:	1a00346f 	.word	0x1a00346f

1a0036e4 <_printf_common>:
1a0036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0036e8:	4691      	mov	r9, r2
1a0036ea:	461f      	mov	r7, r3
1a0036ec:	688a      	ldr	r2, [r1, #8]
1a0036ee:	690b      	ldr	r3, [r1, #16]
1a0036f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0036f4:	4293      	cmp	r3, r2
1a0036f6:	bfb8      	it	lt
1a0036f8:	4613      	movlt	r3, r2
1a0036fa:	f8c9 3000 	str.w	r3, [r9]
1a0036fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003702:	4606      	mov	r6, r0
1a003704:	460c      	mov	r4, r1
1a003706:	b112      	cbz	r2, 1a00370e <_printf_common+0x2a>
1a003708:	3301      	adds	r3, #1
1a00370a:	f8c9 3000 	str.w	r3, [r9]
1a00370e:	6823      	ldr	r3, [r4, #0]
1a003710:	0699      	lsls	r1, r3, #26
1a003712:	bf42      	ittt	mi
1a003714:	f8d9 3000 	ldrmi.w	r3, [r9]
1a003718:	3302      	addmi	r3, #2
1a00371a:	f8c9 3000 	strmi.w	r3, [r9]
1a00371e:	6825      	ldr	r5, [r4, #0]
1a003720:	f015 0506 	ands.w	r5, r5, #6
1a003724:	d107      	bne.n	1a003736 <_printf_common+0x52>
1a003726:	f104 0a19 	add.w	sl, r4, #25
1a00372a:	68e3      	ldr	r3, [r4, #12]
1a00372c:	f8d9 2000 	ldr.w	r2, [r9]
1a003730:	1a9b      	subs	r3, r3, r2
1a003732:	42ab      	cmp	r3, r5
1a003734:	dc28      	bgt.n	1a003788 <_printf_common+0xa4>
1a003736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00373a:	6822      	ldr	r2, [r4, #0]
1a00373c:	3300      	adds	r3, #0
1a00373e:	bf18      	it	ne
1a003740:	2301      	movne	r3, #1
1a003742:	0692      	lsls	r2, r2, #26
1a003744:	d42d      	bmi.n	1a0037a2 <_printf_common+0xbe>
1a003746:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00374a:	4639      	mov	r1, r7
1a00374c:	4630      	mov	r0, r6
1a00374e:	47c0      	blx	r8
1a003750:	3001      	adds	r0, #1
1a003752:	d020      	beq.n	1a003796 <_printf_common+0xb2>
1a003754:	6823      	ldr	r3, [r4, #0]
1a003756:	68e5      	ldr	r5, [r4, #12]
1a003758:	f8d9 2000 	ldr.w	r2, [r9]
1a00375c:	f003 0306 	and.w	r3, r3, #6
1a003760:	2b04      	cmp	r3, #4
1a003762:	bf08      	it	eq
1a003764:	1aad      	subeq	r5, r5, r2
1a003766:	68a3      	ldr	r3, [r4, #8]
1a003768:	6922      	ldr	r2, [r4, #16]
1a00376a:	bf0c      	ite	eq
1a00376c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a003770:	2500      	movne	r5, #0
1a003772:	4293      	cmp	r3, r2
1a003774:	bfc4      	itt	gt
1a003776:	1a9b      	subgt	r3, r3, r2
1a003778:	18ed      	addgt	r5, r5, r3
1a00377a:	f04f 0900 	mov.w	r9, #0
1a00377e:	341a      	adds	r4, #26
1a003780:	454d      	cmp	r5, r9
1a003782:	d11a      	bne.n	1a0037ba <_printf_common+0xd6>
1a003784:	2000      	movs	r0, #0
1a003786:	e008      	b.n	1a00379a <_printf_common+0xb6>
1a003788:	2301      	movs	r3, #1
1a00378a:	4652      	mov	r2, sl
1a00378c:	4639      	mov	r1, r7
1a00378e:	4630      	mov	r0, r6
1a003790:	47c0      	blx	r8
1a003792:	3001      	adds	r0, #1
1a003794:	d103      	bne.n	1a00379e <_printf_common+0xba>
1a003796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00379e:	3501      	adds	r5, #1
1a0037a0:	e7c3      	b.n	1a00372a <_printf_common+0x46>
1a0037a2:	18e1      	adds	r1, r4, r3
1a0037a4:	1c5a      	adds	r2, r3, #1
1a0037a6:	2030      	movs	r0, #48	; 0x30
1a0037a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0037ac:	4422      	add	r2, r4
1a0037ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0037b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0037b6:	3302      	adds	r3, #2
1a0037b8:	e7c5      	b.n	1a003746 <_printf_common+0x62>
1a0037ba:	2301      	movs	r3, #1
1a0037bc:	4622      	mov	r2, r4
1a0037be:	4639      	mov	r1, r7
1a0037c0:	4630      	mov	r0, r6
1a0037c2:	47c0      	blx	r8
1a0037c4:	3001      	adds	r0, #1
1a0037c6:	d0e6      	beq.n	1a003796 <_printf_common+0xb2>
1a0037c8:	f109 0901 	add.w	r9, r9, #1
1a0037cc:	e7d8      	b.n	1a003780 <_printf_common+0x9c>
1a0037ce:	Address 0x000000001a0037ce is out of bounds.


1a0037d0 <_printf_i>:
1a0037d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0037d4:	4606      	mov	r6, r0
1a0037d6:	460c      	mov	r4, r1
1a0037d8:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0037dc:	7e09      	ldrb	r1, [r1, #24]
1a0037de:	b085      	sub	sp, #20
1a0037e0:	296e      	cmp	r1, #110	; 0x6e
1a0037e2:	4698      	mov	r8, r3
1a0037e4:	4617      	mov	r7, r2
1a0037e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0037e8:	f000 80ba 	beq.w	1a003960 <_printf_i+0x190>
1a0037ec:	d824      	bhi.n	1a003838 <_printf_i+0x68>
1a0037ee:	2963      	cmp	r1, #99	; 0x63
1a0037f0:	d039      	beq.n	1a003866 <_printf_i+0x96>
1a0037f2:	d80a      	bhi.n	1a00380a <_printf_i+0x3a>
1a0037f4:	2900      	cmp	r1, #0
1a0037f6:	f000 80c3 	beq.w	1a003980 <_printf_i+0x1b0>
1a0037fa:	2958      	cmp	r1, #88	; 0x58
1a0037fc:	f000 8091 	beq.w	1a003922 <_printf_i+0x152>
1a003800:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003804:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a003808:	e035      	b.n	1a003876 <_printf_i+0xa6>
1a00380a:	2964      	cmp	r1, #100	; 0x64
1a00380c:	d001      	beq.n	1a003812 <_printf_i+0x42>
1a00380e:	2969      	cmp	r1, #105	; 0x69
1a003810:	d1f6      	bne.n	1a003800 <_printf_i+0x30>
1a003812:	6825      	ldr	r5, [r4, #0]
1a003814:	681a      	ldr	r2, [r3, #0]
1a003816:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00381a:	f102 0104 	add.w	r1, r2, #4
1a00381e:	d02c      	beq.n	1a00387a <_printf_i+0xaa>
1a003820:	6812      	ldr	r2, [r2, #0]
1a003822:	6019      	str	r1, [r3, #0]
1a003824:	2a00      	cmp	r2, #0
1a003826:	da03      	bge.n	1a003830 <_printf_i+0x60>
1a003828:	232d      	movs	r3, #45	; 0x2d
1a00382a:	4252      	negs	r2, r2
1a00382c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003830:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0039f0 <_printf_i+0x220>
1a003834:	230a      	movs	r3, #10
1a003836:	e03f      	b.n	1a0038b8 <_printf_i+0xe8>
1a003838:	2973      	cmp	r1, #115	; 0x73
1a00383a:	f000 80a5 	beq.w	1a003988 <_printf_i+0x1b8>
1a00383e:	d808      	bhi.n	1a003852 <_printf_i+0x82>
1a003840:	296f      	cmp	r1, #111	; 0x6f
1a003842:	d021      	beq.n	1a003888 <_printf_i+0xb8>
1a003844:	2970      	cmp	r1, #112	; 0x70
1a003846:	d1db      	bne.n	1a003800 <_printf_i+0x30>
1a003848:	6822      	ldr	r2, [r4, #0]
1a00384a:	f042 0220 	orr.w	r2, r2, #32
1a00384e:	6022      	str	r2, [r4, #0]
1a003850:	e003      	b.n	1a00385a <_printf_i+0x8a>
1a003852:	2975      	cmp	r1, #117	; 0x75
1a003854:	d018      	beq.n	1a003888 <_printf_i+0xb8>
1a003856:	2978      	cmp	r1, #120	; 0x78
1a003858:	d1d2      	bne.n	1a003800 <_printf_i+0x30>
1a00385a:	2278      	movs	r2, #120	; 0x78
1a00385c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a003860:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0039f4 <_printf_i+0x224>
1a003864:	e061      	b.n	1a00392a <_printf_i+0x15a>
1a003866:	681a      	ldr	r2, [r3, #0]
1a003868:	1d11      	adds	r1, r2, #4
1a00386a:	6019      	str	r1, [r3, #0]
1a00386c:	6813      	ldr	r3, [r2, #0]
1a00386e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003872:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003876:	2301      	movs	r3, #1
1a003878:	e093      	b.n	1a0039a2 <_printf_i+0x1d2>
1a00387a:	6812      	ldr	r2, [r2, #0]
1a00387c:	6019      	str	r1, [r3, #0]
1a00387e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a003882:	bf18      	it	ne
1a003884:	b212      	sxthne	r2, r2
1a003886:	e7cd      	b.n	1a003824 <_printf_i+0x54>
1a003888:	f8d4 c000 	ldr.w	ip, [r4]
1a00388c:	681a      	ldr	r2, [r3, #0]
1a00388e:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003892:	f102 0504 	add.w	r5, r2, #4
1a003896:	601d      	str	r5, [r3, #0]
1a003898:	d001      	beq.n	1a00389e <_printf_i+0xce>
1a00389a:	6812      	ldr	r2, [r2, #0]
1a00389c:	e003      	b.n	1a0038a6 <_printf_i+0xd6>
1a00389e:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0038a2:	d0fa      	beq.n	1a00389a <_printf_i+0xca>
1a0038a4:	8812      	ldrh	r2, [r2, #0]
1a0038a6:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0039f0 <_printf_i+0x220>
1a0038aa:	296f      	cmp	r1, #111	; 0x6f
1a0038ac:	bf0c      	ite	eq
1a0038ae:	2308      	moveq	r3, #8
1a0038b0:	230a      	movne	r3, #10
1a0038b2:	2100      	movs	r1, #0
1a0038b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0038b8:	6865      	ldr	r5, [r4, #4]
1a0038ba:	60a5      	str	r5, [r4, #8]
1a0038bc:	2d00      	cmp	r5, #0
1a0038be:	bfa2      	ittt	ge
1a0038c0:	6821      	ldrge	r1, [r4, #0]
1a0038c2:	f021 0104 	bicge.w	r1, r1, #4
1a0038c6:	6021      	strge	r1, [r4, #0]
1a0038c8:	b90a      	cbnz	r2, 1a0038ce <_printf_i+0xfe>
1a0038ca:	2d00      	cmp	r5, #0
1a0038cc:	d046      	beq.n	1a00395c <_printf_i+0x18c>
1a0038ce:	4605      	mov	r5, r0
1a0038d0:	fbb2 f1f3 	udiv	r1, r2, r3
1a0038d4:	fb03 2e11 	mls	lr, r3, r1, r2
1a0038d8:	4293      	cmp	r3, r2
1a0038da:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0038de:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0038e2:	d939      	bls.n	1a003958 <_printf_i+0x188>
1a0038e4:	2b08      	cmp	r3, #8
1a0038e6:	d10b      	bne.n	1a003900 <_printf_i+0x130>
1a0038e8:	6823      	ldr	r3, [r4, #0]
1a0038ea:	07da      	lsls	r2, r3, #31
1a0038ec:	d508      	bpl.n	1a003900 <_printf_i+0x130>
1a0038ee:	6923      	ldr	r3, [r4, #16]
1a0038f0:	6862      	ldr	r2, [r4, #4]
1a0038f2:	429a      	cmp	r2, r3
1a0038f4:	bfde      	ittt	le
1a0038f6:	2330      	movle	r3, #48	; 0x30
1a0038f8:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0038fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a003900:	1b40      	subs	r0, r0, r5
1a003902:	6120      	str	r0, [r4, #16]
1a003904:	f8cd 8000 	str.w	r8, [sp]
1a003908:	463b      	mov	r3, r7
1a00390a:	aa03      	add	r2, sp, #12
1a00390c:	4621      	mov	r1, r4
1a00390e:	4630      	mov	r0, r6
1a003910:	f7ff fee8 	bl	1a0036e4 <_printf_common>
1a003914:	3001      	adds	r0, #1
1a003916:	d149      	bne.n	1a0039ac <_printf_i+0x1dc>
1a003918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00391c:	b005      	add	sp, #20
1a00391e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003922:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0039f0 <_printf_i+0x220>
1a003926:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00392a:	681d      	ldr	r5, [r3, #0]
1a00392c:	6821      	ldr	r1, [r4, #0]
1a00392e:	f855 2b04 	ldr.w	r2, [r5], #4
1a003932:	601d      	str	r5, [r3, #0]
1a003934:	060d      	lsls	r5, r1, #24
1a003936:	d50b      	bpl.n	1a003950 <_printf_i+0x180>
1a003938:	07cd      	lsls	r5, r1, #31
1a00393a:	bf44      	itt	mi
1a00393c:	f041 0120 	orrmi.w	r1, r1, #32
1a003940:	6021      	strmi	r1, [r4, #0]
1a003942:	b91a      	cbnz	r2, 1a00394c <_printf_i+0x17c>
1a003944:	6823      	ldr	r3, [r4, #0]
1a003946:	f023 0320 	bic.w	r3, r3, #32
1a00394a:	6023      	str	r3, [r4, #0]
1a00394c:	2310      	movs	r3, #16
1a00394e:	e7b0      	b.n	1a0038b2 <_printf_i+0xe2>
1a003950:	064b      	lsls	r3, r1, #25
1a003952:	bf48      	it	mi
1a003954:	b292      	uxthmi	r2, r2
1a003956:	e7ef      	b.n	1a003938 <_printf_i+0x168>
1a003958:	460a      	mov	r2, r1
1a00395a:	e7b9      	b.n	1a0038d0 <_printf_i+0x100>
1a00395c:	4605      	mov	r5, r0
1a00395e:	e7c1      	b.n	1a0038e4 <_printf_i+0x114>
1a003960:	681a      	ldr	r2, [r3, #0]
1a003962:	f8d4 c000 	ldr.w	ip, [r4]
1a003966:	6961      	ldr	r1, [r4, #20]
1a003968:	1d15      	adds	r5, r2, #4
1a00396a:	601d      	str	r5, [r3, #0]
1a00396c:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003970:	6813      	ldr	r3, [r2, #0]
1a003972:	d001      	beq.n	1a003978 <_printf_i+0x1a8>
1a003974:	6019      	str	r1, [r3, #0]
1a003976:	e003      	b.n	1a003980 <_printf_i+0x1b0>
1a003978:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00397c:	d0fa      	beq.n	1a003974 <_printf_i+0x1a4>
1a00397e:	8019      	strh	r1, [r3, #0]
1a003980:	2300      	movs	r3, #0
1a003982:	6123      	str	r3, [r4, #16]
1a003984:	4605      	mov	r5, r0
1a003986:	e7bd      	b.n	1a003904 <_printf_i+0x134>
1a003988:	681a      	ldr	r2, [r3, #0]
1a00398a:	1d11      	adds	r1, r2, #4
1a00398c:	6019      	str	r1, [r3, #0]
1a00398e:	6815      	ldr	r5, [r2, #0]
1a003990:	6862      	ldr	r2, [r4, #4]
1a003992:	2100      	movs	r1, #0
1a003994:	4628      	mov	r0, r5
1a003996:	f000 f873 	bl	1a003a80 <memchr>
1a00399a:	b108      	cbz	r0, 1a0039a0 <_printf_i+0x1d0>
1a00399c:	1b40      	subs	r0, r0, r5
1a00399e:	6060      	str	r0, [r4, #4]
1a0039a0:	6863      	ldr	r3, [r4, #4]
1a0039a2:	6123      	str	r3, [r4, #16]
1a0039a4:	2300      	movs	r3, #0
1a0039a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0039aa:	e7ab      	b.n	1a003904 <_printf_i+0x134>
1a0039ac:	6923      	ldr	r3, [r4, #16]
1a0039ae:	462a      	mov	r2, r5
1a0039b0:	4639      	mov	r1, r7
1a0039b2:	4630      	mov	r0, r6
1a0039b4:	47c0      	blx	r8
1a0039b6:	3001      	adds	r0, #1
1a0039b8:	d0ae      	beq.n	1a003918 <_printf_i+0x148>
1a0039ba:	6823      	ldr	r3, [r4, #0]
1a0039bc:	079b      	lsls	r3, r3, #30
1a0039be:	d413      	bmi.n	1a0039e8 <_printf_i+0x218>
1a0039c0:	68e0      	ldr	r0, [r4, #12]
1a0039c2:	9b03      	ldr	r3, [sp, #12]
1a0039c4:	4298      	cmp	r0, r3
1a0039c6:	bfb8      	it	lt
1a0039c8:	4618      	movlt	r0, r3
1a0039ca:	e7a7      	b.n	1a00391c <_printf_i+0x14c>
1a0039cc:	2301      	movs	r3, #1
1a0039ce:	464a      	mov	r2, r9
1a0039d0:	4639      	mov	r1, r7
1a0039d2:	4630      	mov	r0, r6
1a0039d4:	47c0      	blx	r8
1a0039d6:	3001      	adds	r0, #1
1a0039d8:	d09e      	beq.n	1a003918 <_printf_i+0x148>
1a0039da:	3501      	adds	r5, #1
1a0039dc:	68e3      	ldr	r3, [r4, #12]
1a0039de:	9a03      	ldr	r2, [sp, #12]
1a0039e0:	1a9b      	subs	r3, r3, r2
1a0039e2:	42ab      	cmp	r3, r5
1a0039e4:	dcf2      	bgt.n	1a0039cc <_printf_i+0x1fc>
1a0039e6:	e7eb      	b.n	1a0039c0 <_printf_i+0x1f0>
1a0039e8:	2500      	movs	r5, #0
1a0039ea:	f104 0919 	add.w	r9, r4, #25
1a0039ee:	e7f5      	b.n	1a0039dc <_printf_i+0x20c>
1a0039f0:	1a004581 	.word	0x1a004581
1a0039f4:	1a004592 	.word	0x1a004592

1a0039f8 <__sread>:
1a0039f8:	b510      	push	{r4, lr}
1a0039fa:	460c      	mov	r4, r1
1a0039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a00:	f7fc fff4 	bl	1a0009ec <_read_r>
1a003a04:	2800      	cmp	r0, #0
1a003a06:	bfab      	itete	ge
1a003a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a003a0a:	89a3      	ldrhlt	r3, [r4, #12]
1a003a0c:	181b      	addge	r3, r3, r0
1a003a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003a12:	bfac      	ite	ge
1a003a14:	6563      	strge	r3, [r4, #84]	; 0x54
1a003a16:	81a3      	strhlt	r3, [r4, #12]
1a003a18:	bd10      	pop	{r4, pc}

1a003a1a <__swrite>:
1a003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a1e:	461f      	mov	r7, r3
1a003a20:	898b      	ldrh	r3, [r1, #12]
1a003a22:	05db      	lsls	r3, r3, #23
1a003a24:	4605      	mov	r5, r0
1a003a26:	460c      	mov	r4, r1
1a003a28:	4616      	mov	r6, r2
1a003a2a:	d505      	bpl.n	1a003a38 <__swrite+0x1e>
1a003a2c:	2302      	movs	r3, #2
1a003a2e:	2200      	movs	r2, #0
1a003a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a34:	f7fc ffd5 	bl	1a0009e2 <_lseek_r>
1a003a38:	89a3      	ldrh	r3, [r4, #12]
1a003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003a42:	81a3      	strh	r3, [r4, #12]
1a003a44:	4632      	mov	r2, r6
1a003a46:	463b      	mov	r3, r7
1a003a48:	4628      	mov	r0, r5
1a003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003a4e:	f7fc bff4 	b.w	1a000a3a <_write_r>

1a003a52 <__sseek>:
1a003a52:	b510      	push	{r4, lr}
1a003a54:	460c      	mov	r4, r1
1a003a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a5a:	f7fc ffc2 	bl	1a0009e2 <_lseek_r>
1a003a5e:	1c43      	adds	r3, r0, #1
1a003a60:	89a3      	ldrh	r3, [r4, #12]
1a003a62:	bf15      	itete	ne
1a003a64:	6560      	strne	r0, [r4, #84]	; 0x54
1a003a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003a6e:	81a3      	strheq	r3, [r4, #12]
1a003a70:	bf18      	it	ne
1a003a72:	81a3      	strhne	r3, [r4, #12]
1a003a74:	bd10      	pop	{r4, pc}

1a003a76 <__sclose>:
1a003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003a7a:	f7fc bf9f 	b.w	1a0009bc <_close_r>
1a003a7e:	Address 0x000000001a003a7e is out of bounds.


1a003a80 <memchr>:
1a003a80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003a84:	2a10      	cmp	r2, #16
1a003a86:	db2b      	blt.n	1a003ae0 <memchr+0x60>
1a003a88:	f010 0f07 	tst.w	r0, #7
1a003a8c:	d008      	beq.n	1a003aa0 <memchr+0x20>
1a003a8e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003a92:	3a01      	subs	r2, #1
1a003a94:	428b      	cmp	r3, r1
1a003a96:	d02d      	beq.n	1a003af4 <memchr+0x74>
1a003a98:	f010 0f07 	tst.w	r0, #7
1a003a9c:	b342      	cbz	r2, 1a003af0 <memchr+0x70>
1a003a9e:	d1f6      	bne.n	1a003a8e <memchr+0xe>
1a003aa0:	b4f0      	push	{r4, r5, r6, r7}
1a003aa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a003aa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a003aaa:	f022 0407 	bic.w	r4, r2, #7
1a003aae:	f07f 0700 	mvns.w	r7, #0
1a003ab2:	2300      	movs	r3, #0
1a003ab4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a003ab8:	3c08      	subs	r4, #8
1a003aba:	ea85 0501 	eor.w	r5, r5, r1
1a003abe:	ea86 0601 	eor.w	r6, r6, r1
1a003ac2:	fa85 f547 	uadd8	r5, r5, r7
1a003ac6:	faa3 f587 	sel	r5, r3, r7
1a003aca:	fa86 f647 	uadd8	r6, r6, r7
1a003ace:	faa5 f687 	sel	r6, r5, r7
1a003ad2:	b98e      	cbnz	r6, 1a003af8 <memchr+0x78>
1a003ad4:	d1ee      	bne.n	1a003ab4 <memchr+0x34>
1a003ad6:	bcf0      	pop	{r4, r5, r6, r7}
1a003ad8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003adc:	f002 0207 	and.w	r2, r2, #7
1a003ae0:	b132      	cbz	r2, 1a003af0 <memchr+0x70>
1a003ae2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003ae6:	3a01      	subs	r2, #1
1a003ae8:	ea83 0301 	eor.w	r3, r3, r1
1a003aec:	b113      	cbz	r3, 1a003af4 <memchr+0x74>
1a003aee:	d1f8      	bne.n	1a003ae2 <memchr+0x62>
1a003af0:	2000      	movs	r0, #0
1a003af2:	4770      	bx	lr
1a003af4:	3801      	subs	r0, #1
1a003af6:	4770      	bx	lr
1a003af8:	2d00      	cmp	r5, #0
1a003afa:	bf06      	itte	eq
1a003afc:	4635      	moveq	r5, r6
1a003afe:	3803      	subeq	r0, #3
1a003b00:	3807      	subne	r0, #7
1a003b02:	f015 0f01 	tst.w	r5, #1
1a003b06:	d107      	bne.n	1a003b18 <memchr+0x98>
1a003b08:	3001      	adds	r0, #1
1a003b0a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a003b0e:	bf02      	ittt	eq
1a003b10:	3001      	addeq	r0, #1
1a003b12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a003b16:	3001      	addeq	r0, #1
1a003b18:	bcf0      	pop	{r4, r5, r6, r7}
1a003b1a:	3801      	subs	r0, #1
1a003b1c:	4770      	bx	lr
1a003b1e:	bf00      	nop

1a003b20 <__malloc_lock>:
1a003b20:	4801      	ldr	r0, [pc, #4]	; (1a003b28 <__malloc_lock+0x8>)
1a003b22:	f7ff bb7e 	b.w	1a003222 <__retarget_lock_acquire_recursive>
1a003b26:	bf00      	nop
1a003b28:	100001c4 	.word	0x100001c4

1a003b2c <__malloc_unlock>:
1a003b2c:	4801      	ldr	r0, [pc, #4]	; (1a003b34 <__malloc_unlock+0x8>)
1a003b2e:	f7ff bb79 	b.w	1a003224 <__retarget_lock_release_recursive>
1a003b32:	bf00      	nop
1a003b34:	100001c4 	.word	0x100001c4
1a003b38:	20657551 	.word	0x20657551
1a003b3c:	65736564 	.word	0x65736564
1a003b40:	6f632061 	.word	0x6f632061
1a003b44:	6769666e 	.word	0x6769666e
1a003b48:	72617275 	.word	0x72617275
1a003b4c:	410a0d3f 	.word	0x410a0d3f
1a003b50:	6550202e 	.word	0x6550202e
1a003b54:	646f6972 	.word	0x646f6972
1a003b58:	64696369 	.word	0x64696369
1a003b5c:	64206461 	.word	0x64206461
1a003b60:	6e692065 	.word	0x6e692065
1a003b64:	6d726f66 	.word	0x6d726f66
1a003b68:	6f696361 	.word	0x6f696361
1a003b6c:	6564206e 	.word	0x6564206e
1a003b70:	7573206c 	.word	0x7573206c
1a003b74:	76726570 	.word	0x76726570
1a003b78:	726f7369 	.word	0x726f7369
1a003b7c:	2e420a0d 	.word	0x2e420a0d
1a003b80:	6e655320 	.word	0x6e655320
1a003b84:	20726f73 	.word	0x20726f73
1a003b88:	72746c75 	.word	0x72746c75
1a003b8c:	6e6f7361 	.word	0x6e6f7361
1a003b90:	0d6f6469 	.word	0x0d6f6469
1a003b94:	202e430a 	.word	0x202e430a
1a003b98:	736e6553 	.word	0x736e6553
1a003b9c:	6420726f 	.word	0x6420726f
1a003ba0:	61622065 	.word	0x61622065
1a003ba4:	69726574 	.word	0x69726574
1a003ba8:	440a0d61 	.word	0x440a0d61
1a003bac:	6552202e 	.word	0x6552202e
1a003bb0:	73657267 	.word	0x73657267
1a003bb4:	76207261 	.word	0x76207261
1a003bb8:	726f6c61 	.word	0x726f6c61
1a003bbc:	70207365 	.word	0x70207365
1a003bc0:	6420726f 	.word	0x6420726f
1a003bc4:	63656665 	.word	0x63656665
1a003bc8:	0a0d6f74 	.word	0x0a0d6f74
1a003bcc:	53202e45 	.word	0x53202e45
1a003bd0:	72696c61 	.word	0x72696c61
1a003bd4:	00000a0d 	.word	0x00000a0d
1a003bd8:	20657551 	.word	0x20657551
1a003bdc:	65736564 	.word	0x65736564
1a003be0:	6f632061 	.word	0x6f632061
1a003be4:	6769666e 	.word	0x6769666e
1a003be8:	72617275 	.word	0x72617275
1a003bec:	410a0d3f 	.word	0x410a0d3f
1a003bf0:	6550202e 	.word	0x6550202e
1a003bf4:	646f6972 	.word	0x646f6972
1a003bf8:	64696369 	.word	0x64696369
1a003bfc:	64206461 	.word	0x64206461
1a003c00:	6e692065 	.word	0x6e692065
1a003c04:	6d726f66 	.word	0x6d726f66
1a003c08:	6f696361 	.word	0x6f696361
1a003c0c:	6564206e 	.word	0x6564206e
1a003c10:	7573206c 	.word	0x7573206c
1a003c14:	76726570 	.word	0x76726570
1a003c18:	726f7369 	.word	0x726f7369
1a003c1c:	2e420a0d 	.word	0x2e420a0d
1a003c20:	6e655320 	.word	0x6e655320
1a003c24:	20726f73 	.word	0x20726f73
1a003c28:	72746c75 	.word	0x72746c75
1a003c2c:	6e6f7361 	.word	0x6e6f7361
1a003c30:	0d6f6469 	.word	0x0d6f6469
1a003c34:	202e430a 	.word	0x202e430a
1a003c38:	736e6553 	.word	0x736e6553
1a003c3c:	6420726f 	.word	0x6420726f
1a003c40:	61622065 	.word	0x61622065
1a003c44:	69726574 	.word	0x69726574
1a003c48:	000a0d61 	.word	0x000a0d61
1a003c4c:	72746e49 	.word	0x72746e49
1a003c50:	7a75646f 	.word	0x7a75646f
1a003c54:	70206163 	.word	0x70206163
1a003c58:	6f697265 	.word	0x6f697265
1a003c5c:	65206f64 	.word	0x65206f64
1a003c60:	6573206e 	.word	0x6573206e
1a003c64:	65642067 	.word	0x65642067
1a003c68:	7573206c 	.word	0x7573206c
1a003c6c:	76726570 	.word	0x76726570
1a003c70:	726f7369 	.word	0x726f7369
1a003c74:	00000a0d 	.word	0x00000a0d
1a003c78:	7665754e 	.word	0x7665754e
1a003c7c:	6974206f 	.word	0x6974206f
1a003c80:	6f70656d 	.word	0x6f70656d
1a003c84:	20656420 	.word	0x20656420
1a003c88:	69726570 	.word	0x69726570
1a003c8c:	206f646f 	.word	0x206f646f
1a003c90:	65206564 	.word	0x65206564
1a003c94:	6f69766e 	.word	0x6f69766e
1a003c98:	20656420 	.word	0x20656420
1a003c9c:	6f746164 	.word	0x6f746164
1a003ca0:	20612073 	.word	0x20612073
1a003ca4:	65732033 	.word	0x65732033
1a003ca8:	000a0d67 	.word	0x000a0d67
1a003cac:	7665754e 	.word	0x7665754e
1a003cb0:	6974206f 	.word	0x6974206f
1a003cb4:	6f70656d 	.word	0x6f70656d
1a003cb8:	20656420 	.word	0x20656420
1a003cbc:	69726570 	.word	0x69726570
1a003cc0:	206f646f 	.word	0x206f646f
1a003cc4:	65206564 	.word	0x65206564
1a003cc8:	6f69766e 	.word	0x6f69766e
1a003ccc:	20656420 	.word	0x20656420
1a003cd0:	6f746164 	.word	0x6f746164
1a003cd4:	20612073 	.word	0x20612073
1a003cd8:	65732034 	.word	0x65732034
1a003cdc:	000a0d67 	.word	0x000a0d67
1a003ce0:	7665754e 	.word	0x7665754e
1a003ce4:	6974206f 	.word	0x6974206f
1a003ce8:	6f70656d 	.word	0x6f70656d
1a003cec:	20656420 	.word	0x20656420
1a003cf0:	69726570 	.word	0x69726570
1a003cf4:	206f646f 	.word	0x206f646f
1a003cf8:	65206564 	.word	0x65206564
1a003cfc:	6f69766e 	.word	0x6f69766e
1a003d00:	20656420 	.word	0x20656420
1a003d04:	6f746164 	.word	0x6f746164
1a003d08:	20612073 	.word	0x20612073
1a003d0c:	65732035 	.word	0x65732035
1a003d10:	000a0d67 	.word	0x000a0d67
1a003d14:	72746e49 	.word	0x72746e49
1a003d18:	7a75646f 	.word	0x7a75646f
1a003d1c:	76206163 	.word	0x76206163
1a003d20:	726f6c61 	.word	0x726f6c61
1a003d24:	6e696d20 	.word	0x6e696d20
1a003d28:	206f6d69 	.word	0x206f6d69
1a003d2c:	63206e65 	.word	0x63206e65
1a003d30:	2061206d 	.word	0x2061206d
1a003d34:	65746564 	.word	0x65746564
1a003d38:	72617463 	.word	0x72617463
1a003d3c:	726f7020 	.word	0x726f7020
1a003d40:	206c6520 	.word	0x206c6520
1a003d44:	736e6573 	.word	0x736e6573
1a003d48:	0a0d726f 	.word	0x0a0d726f
1a003d4c:	00000000 	.word	0x00000000
1a003d50:	7665754e 	.word	0x7665754e
1a003d54:	6176206f 	.word	0x6176206f
1a003d58:	20726f6c 	.word	0x20726f6c
1a003d5c:	696e696d 	.word	0x696e696d
1a003d60:	61206f6d 	.word	0x61206f6d
1a003d64:	74656420 	.word	0x74656420
1a003d68:	72616365 	.word	0x72616365
1a003d6c:	63203420 	.word	0x63203420
1a003d70:	000a0d6d 	.word	0x000a0d6d
1a003d74:	7665754e 	.word	0x7665754e
1a003d78:	6176206f 	.word	0x6176206f
1a003d7c:	20726f6c 	.word	0x20726f6c
1a003d80:	696e696d 	.word	0x696e696d
1a003d84:	61206f6d 	.word	0x61206f6d
1a003d88:	74656420 	.word	0x74656420
1a003d8c:	61746365 	.word	0x61746365
1a003d90:	20342072 	.word	0x20342072
1a003d94:	0a0d6d63 	.word	0x0a0d6d63
1a003d98:	00000000 	.word	0x00000000
1a003d9c:	7665754e 	.word	0x7665754e
1a003da0:	6176206f 	.word	0x6176206f
1a003da4:	20726f6c 	.word	0x20726f6c
1a003da8:	696e696d 	.word	0x696e696d
1a003dac:	61206f6d 	.word	0x61206f6d
1a003db0:	74656420 	.word	0x74656420
1a003db4:	72616365 	.word	0x72616365
1a003db8:	63203720 	.word	0x63203720
1a003dbc:	000a0d6d 	.word	0x000a0d6d
1a003dc0:	7665754e 	.word	0x7665754e
1a003dc4:	6176206f 	.word	0x6176206f
1a003dc8:	20726f6c 	.word	0x20726f6c
1a003dcc:	696e696d 	.word	0x696e696d
1a003dd0:	61206f6d 	.word	0x61206f6d
1a003dd4:	74656420 	.word	0x74656420
1a003dd8:	61746365 	.word	0x61746365
1a003ddc:	20372072 	.word	0x20372072
1a003de0:	0a0d6d63 	.word	0x0a0d6d63
1a003de4:	00000000 	.word	0x00000000
1a003de8:	7665754e 	.word	0x7665754e
1a003dec:	6176206f 	.word	0x6176206f
1a003df0:	20726f6c 	.word	0x20726f6c
1a003df4:	696e696d 	.word	0x696e696d
1a003df8:	61206f6d 	.word	0x61206f6d
1a003dfc:	74656420 	.word	0x74656420
1a003e00:	72616365 	.word	0x72616365
1a003e04:	20303120 	.word	0x20303120
1a003e08:	0a0d6d63 	.word	0x0a0d6d63
1a003e0c:	00000000 	.word	0x00000000
1a003e10:	7665754e 	.word	0x7665754e
1a003e14:	6176206f 	.word	0x6176206f
1a003e18:	20726f6c 	.word	0x20726f6c
1a003e1c:	696e696d 	.word	0x696e696d
1a003e20:	61206f6d 	.word	0x61206f6d
1a003e24:	74656420 	.word	0x74656420
1a003e28:	61746365 	.word	0x61746365
1a003e2c:	30312072 	.word	0x30312072
1a003e30:	0d6d6320 	.word	0x0d6d6320
1a003e34:	0000000a 	.word	0x0000000a
1a003e38:	7665754e 	.word	0x7665754e
1a003e3c:	6176206f 	.word	0x6176206f
1a003e40:	20726f6c 	.word	0x20726f6c
1a003e44:	696e696d 	.word	0x696e696d
1a003e48:	61206f6d 	.word	0x61206f6d
1a003e4c:	74656420 	.word	0x74656420
1a003e50:	72616365 	.word	0x72616365
1a003e54:	20656420 	.word	0x20656420
1a003e58:	0d303032 	.word	0x0d303032
1a003e5c:	0000000a 	.word	0x0000000a
1a003e60:	7665754e 	.word	0x7665754e
1a003e64:	6176206f 	.word	0x6176206f
1a003e68:	20726f6c 	.word	0x20726f6c
1a003e6c:	696e696d 	.word	0x696e696d
1a003e70:	61206f6d 	.word	0x61206f6d
1a003e74:	74656420 	.word	0x74656420
1a003e78:	61746365 	.word	0x61746365
1a003e7c:	65642072 	.word	0x65642072
1a003e80:	30303220 	.word	0x30303220
1a003e84:	00000a0d 	.word	0x00000a0d
1a003e88:	7665754e 	.word	0x7665754e
1a003e8c:	6176206f 	.word	0x6176206f
1a003e90:	20726f6c 	.word	0x20726f6c
1a003e94:	696e696d 	.word	0x696e696d
1a003e98:	61206f6d 	.word	0x61206f6d
1a003e9c:	74656420 	.word	0x74656420
1a003ea0:	72616365 	.word	0x72616365
1a003ea4:	20656420 	.word	0x20656420
1a003ea8:	0d303033 	.word	0x0d303033
1a003eac:	0000000a 	.word	0x0000000a
1a003eb0:	7665754e 	.word	0x7665754e
1a003eb4:	6176206f 	.word	0x6176206f
1a003eb8:	20726f6c 	.word	0x20726f6c
1a003ebc:	696e696d 	.word	0x696e696d
1a003ec0:	61206f6d 	.word	0x61206f6d
1a003ec4:	74656420 	.word	0x74656420
1a003ec8:	61746365 	.word	0x61746365
1a003ecc:	65642072 	.word	0x65642072
1a003ed0:	30303320 	.word	0x30303320
1a003ed4:	00000a0d 	.word	0x00000a0d
1a003ed8:	7665754e 	.word	0x7665754e
1a003edc:	6176206f 	.word	0x6176206f
1a003ee0:	20726f6c 	.word	0x20726f6c
1a003ee4:	696e696d 	.word	0x696e696d
1a003ee8:	61206f6d 	.word	0x61206f6d
1a003eec:	74656420 	.word	0x74656420
1a003ef0:	72616365 	.word	0x72616365
1a003ef4:	20656420 	.word	0x20656420
1a003ef8:	0d303532 	.word	0x0d303532
1a003efc:	0000000a 	.word	0x0000000a
1a003f00:	7665754e 	.word	0x7665754e
1a003f04:	6176206f 	.word	0x6176206f
1a003f08:	20726f6c 	.word	0x20726f6c
1a003f0c:	696e696d 	.word	0x696e696d
1a003f10:	61206f6d 	.word	0x61206f6d
1a003f14:	74656420 	.word	0x74656420
1a003f18:	61746365 	.word	0x61746365
1a003f1c:	65642072 	.word	0x65642072
1a003f20:	30353220 	.word	0x30353220
1a003f24:	00000a0d 	.word	0x00000a0d
1a003f28:	6f6c6156 	.word	0x6f6c6156
1a003f2c:	20736572 	.word	0x20736572
1a003f30:	61666564 	.word	0x61666564
1a003f34:	20646c75 	.word	0x20646c75
1a003f38:	206c6564 	.word	0x206c6564
1a003f3c:	74736973 	.word	0x74736973
1a003f40:	0d616d65 	.word	0x0d616d65
1a003f44:	ffff000a 	.word	0xffff000a
1a003f48:	63696e49 	.word	0x63696e49
1a003f4c:	696c6169 	.word	0x696c6169
1a003f50:	6f64617a 	.word	0x6f64617a
1a003f54:	6e657320 	.word	0x6e657320
1a003f58:	20726f73 	.word	0x20726f73
1a003f5c:	75206564 	.word	0x75206564
1a003f60:	6172746c 	.word	0x6172746c
1a003f64:	696e6f73 	.word	0x696e6f73
1a003f68:	000d6f64 	.word	0x000d6f64
1a003f6c:	63696e49 	.word	0x63696e49
1a003f70:	696c6169 	.word	0x696c6169
1a003f74:	6f64617a 	.word	0x6f64617a
1a003f78:	6e657320 	.word	0x6e657320
1a003f7c:	20726f73 	.word	0x20726f73
1a003f80:	75206564 	.word	0x75206564
1a003f84:	6172746c 	.word	0x6172746c
1a003f88:	696e6f73 	.word	0x696e6f73
1a003f8c:	0a0d6f64 	.word	0x0a0d6f64
1a003f90:	ffffff00 	.word	0xffffff00
1a003f94:	72656c41 	.word	0x72656c41
1a003f98:	6d206174 	.word	0x6d206174
1a003f9c:	6d697861 	.word	0x6d697861
1a003fa0:	000d2061 	.word	0x000d2061
1a003fa4:	72656c41 	.word	0x72656c41
1a003fa8:	6d206174 	.word	0x6d206174
1a003fac:	6d697861 	.word	0x6d697861
1a003fb0:	0a0d2061 	.word	0x0a0d2061
1a003fb4:	00000000 	.word	0x00000000
1a003fb8:	7473624f 	.word	0x7473624f
1a003fbc:	6c756361 	.word	0x6c756361
1a003fc0:	6976206f 	.word	0x6976206f
1a003fc4:	206f7473 	.word	0x206f7473
1a003fc8:	6e752061 	.word	0x6e752061
1a003fcc:	69642061 	.word	0x69642061
1a003fd0:	6e617473 	.word	0x6e617473
1a003fd4:	3a616963 	.word	0x3a616963
1a003fd8:	20642520 	.word	0x20642520
1a003fdc:	79206d63 	.word	0x79206d63
1a003fe0:	6c617620 	.word	0x6c617620
1a003fe4:	6220726f 	.word	0x6220726f
1a003fe8:	206f6a61 	.word	0x206f6a61
1a003fec:	62206564 	.word	0x62206564
1a003ff0:	72657461 	.word	0x72657461
1a003ff4:	203a6169 	.word	0x203a6169
1a003ff8:	0d206425 	.word	0x0d206425
1a003ffc:	0000000a 	.word	0x0000000a
1a004000:	7473624f 	.word	0x7473624f
1a004004:	6c756361 	.word	0x6c756361
1a004008:	6976206f 	.word	0x6976206f
1a00400c:	206f7473 	.word	0x206f7473
1a004010:	6e752061 	.word	0x6e752061
1a004014:	69642061 	.word	0x69642061
1a004018:	6e617473 	.word	0x6e617473
1a00401c:	3a616963 	.word	0x3a616963
1a004020:	00000020 	.word	0x00000020
1a004024:	206d6320 	.word	0x206d6320
1a004028:	6e752079 	.word	0x6e752079
1a00402c:	6c617620 	.word	0x6c617620
1a004030:	6420726f 	.word	0x6420726f
1a004034:	65742065 	.word	0x65742065
1a004038:	6f69736e 	.word	0x6f69736e
1a00403c:	6162206e 	.word	0x6162206e
1a004040:	64206f6a 	.word	0x64206f6a
1a004044:	203a2065 	.word	0x203a2065
1a004048:	00000000 	.word	0x00000000
1a00404c:	72656c41 	.word	0x72656c41
1a004050:	64206174 	.word	0x64206174
1a004054:	626f2065 	.word	0x626f2065
1a004058:	63617473 	.word	0x63617473
1a00405c:	206f6c75 	.word	0x206f6c75
1a004060:	6e752061 	.word	0x6e752061
1a004064:	69642061 	.word	0x69642061
1a004068:	6e617473 	.word	0x6e617473
1a00406c:	3a616963 	.word	0x3a616963
1a004070:	20642520 	.word	0x20642520
1a004074:	0d206d63 	.word	0x0d206d63
1a004078:	0000000a 	.word	0x0000000a
1a00407c:	72656c41 	.word	0x72656c41
1a004080:	64206174 	.word	0x64206174
1a004084:	61622065 	.word	0x61622065
1a004088:	69726574 	.word	0x69726574
1a00408c:	6f632061 	.word	0x6f632061
1a004090:	6e75206e 	.word	0x6e75206e
1a004094:	6c617620 	.word	0x6c617620
1a004098:	203a726f 	.word	0x203a726f
1a00409c:	0d206425 	.word	0x0d206425
1a0040a0:	0000000a 	.word	0x0000000a
1a0040a4:	696c6153 	.word	0x696c6153
1a0040a8:	6f646e65 	.word	0x6f646e65
1a0040ac:	6c656420 	.word	0x6c656420
1a0040b0:	74736520 	.word	0x74736520
1a0040b4:	206f6461 	.word	0x206f6461
1a0040b8:	72656d45 	.word	0x72656d45
1a0040bc:	636e6567 	.word	0x636e6567
1a0040c0:	0d2e6169 	.word	0x0d2e6169
1a0040c4:	00000000 	.word	0x00000000
1a0040c8:	696c6153 	.word	0x696c6153
1a0040cc:	6f646e65 	.word	0x6f646e65
1a0040d0:	6c656420 	.word	0x6c656420
1a0040d4:	74736520 	.word	0x74736520
1a0040d8:	206f6461 	.word	0x206f6461
1a0040dc:	72656d45 	.word	0x72656d45
1a0040e0:	636e6567 	.word	0x636e6567
1a0040e4:	202e6169 	.word	0x202e6169
1a0040e8:	ff000a0d 	.word	0xff000a0d
1a0040ec:	74736944 	.word	0x74736944
1a0040f0:	69636e61 	.word	0x69636e61
1a0040f4:	00203a61 	.word	0x00203a61
1a0040f8:	206d6320 	.word	0x206d6320
1a0040fc:	6e752079 	.word	0x6e752079
1a004100:	6c617620 	.word	0x6c617620
1a004104:	6420726f 	.word	0x6420726f
1a004108:	65742065 	.word	0x65742065
1a00410c:	6f69736e 	.word	0x6f69736e
1a004110:	203a206e 	.word	0x203a206e
1a004114:	00000000 	.word	0x00000000
1a004118:	000a0d20 	.word	0x000a0d20
1a00411c:	74736944 	.word	0x74736944
1a004120:	69636e61 	.word	0x69636e61
1a004124:	25203a61 	.word	0x25203a61
1a004128:	6d632064 	.word	0x6d632064
1a00412c:	76207920 	.word	0x76207920
1a004130:	726f6c61 	.word	0x726f6c61
1a004134:	20656420 	.word	0x20656420
1a004138:	736e6574 	.word	0x736e6574
1a00413c:	3a6e6f69 	.word	0x3a6e6f69
1a004140:	20642520 	.word	0x20642520
1a004144:	00000a0d 	.word	0x00000a0d
1a004148:	6f6c6156 	.word	0x6f6c6156
1a00414c:	61622072 	.word	0x61622072
1a004150:	64206f6a 	.word	0x64206f6a
1a004154:	61622065 	.word	0x61622065
1a004158:	69726574 	.word	0x69726574
1a00415c:	000d2e61 	.word	0x000d2e61
1a004160:	6f6c6156 	.word	0x6f6c6156
1a004164:	61622072 	.word	0x61622072
1a004168:	64206f6a 	.word	0x64206f6a
1a00416c:	61622065 	.word	0x61622065
1a004170:	69726574 	.word	0x69726574
1a004174:	65642061 	.word	0x65642061
1a004178:	0000203a 	.word	0x0000203a
1a00417c:	64206553 	.word	0x64206553
1a004180:	63657465 	.word	0x63657465
1a004184:	75206f74 	.word	0x75206f74
1a004188:	626f206e 	.word	0x626f206e
1a00418c:	63617473 	.word	0x63617473
1a004190:	206f6c75 	.word	0x206f6c75
1a004194:	6e752061 	.word	0x6e752061
1a004198:	69642061 	.word	0x69642061
1a00419c:	6e617473 	.word	0x6e617473
1a0041a0:	3a616963 	.word	0x3a616963
1a0041a4:	20642520 	.word	0x20642520
1a0041a8:	0d2e6d63 	.word	0x0d2e6d63
1a0041ac:	0000000a 	.word	0x0000000a
1a0041b0:	64206553 	.word	0x64206553
1a0041b4:	63657465 	.word	0x63657465
1a0041b8:	75206f74 	.word	0x75206f74
1a0041bc:	626f206e 	.word	0x626f206e
1a0041c0:	63617473 	.word	0x63617473
1a0041c4:	206f6c75 	.word	0x206f6c75
1a0041c8:	6e752061 	.word	0x6e752061
1a0041cc:	69642061 	.word	0x69642061
1a0041d0:	6e617473 	.word	0x6e617473
1a0041d4:	3a616963 	.word	0x3a616963
1a0041d8:	00000020 	.word	0x00000020
1a0041dc:	206d6320 	.word	0x206d6320
1a0041e0:	ff000a0d 	.word	0xff000a0d

1a0041e4 <ExtRateIn>:
1a0041e4:	00000000                                ....

1a0041e8 <GpioButtons>:
1a0041e8:	08000400 09010900                       ........

1a0041f0 <GpioLeds>:
1a0041f0:	01050005 0e000205 0c010b01              ............

1a0041fc <GpioPorts>:
1a0041fc:	03030003 0f050403 05031005 07030603     ................
1a00420c:	ffff0802                                ....

1a004210 <OscRateIn>:
1a004210:	00b71b00                                ....

1a004214 <InitClkStates>:
1a004214:	01010f01                                ....

1a004218 <pinmuxing>:
1a004218:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004228:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004238:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004248:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004258:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004268:	00d50301 00d50401 00160107 00560207     ..............V.
1a004278:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004288:	00570206                                ..W.

1a00428c <UART_BClock>:
1a00428c:	01a201c2 01620182                       ......b.

1a004294 <UART_PClock>:
1a004294:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0042a4:	000000ff                                ....

1a0042a8 <periph_to_base>:
1a0042a8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0042b8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0042c8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0042d8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0042e8:	01820013 00120182 01a201a2 01c20011     ................
1a0042f8:	001001c2 01e201e2 0202000f 000e0202     ................
1a004308:	02220222 0223000d 001c0223              "."...#.#...

1a004314 <InitClkStates>:
1a004314:	00010100 00010909 0001090a 01010701     ................
1a004324:	00010902 00010906 0101090c 0001090d     ................
1a004334:	0001090e 0001090f 00010910 00010911     ................
1a004344:	00010912 00010913 00011114 00011119     ................
1a004354:	0001111a 0001111b                       ........

1a00435c <SCTdataList>:
1a00435c:	01040204 03040a02 0b020c02 0c060506     ................
1a00436c:	04010301 00000501 04070507              ............

1a004378 <lpcUarts>:
1a004378:	40081000 06020406 00180205 40081000     ...@...........@
1a004388:	09070509 00180706 40082000 00000000     ......... .@....
1a004398:	00190000 400c1000 07060107 001a0602     .......@........
1a0043a8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0043b8:	02020302 001b0204                       ........

1a0043c0 <pwmMap>:
1a0043c0:	000a0c01 02070d03 ff060405              ............

1a0043cc <timer_sd>:
1a0043cc:	40084000 00000020 0000000c 40085000     .@.@ ........P.@
1a0043dc:	00000021 0000000d 400c3000 00000022     !........0.@"...
1a0043ec:	0000000e 400c4000 00000023 0000000f     .....@.@#.......

1a0043fc <gpioPinsInit>:
1a0043fc:	02000104 00050701 05010d03 04080100     ................
1a00440c:	02020002 02000304 00000403 04070002     ................
1a00441c:	030c0300 09050402 05040103 04030208     ................
1a00442c:	04020305 06040504 0802000c 03000b06     ................
1a00443c:	00090607 07060503 060f0504 03030004     ................
1a00444c:	02000404 00050404 06040502 04060200     ................
1a00445c:	0c050408 05040a04 0003010e 14010a00     ................
1a00446c:	010f0000 0d000012 00001101 0010010c     ................
1a00447c:	07070300 000f0300 01000001 00000000     ................
1a00448c:	000a0600 08060603 06100504 04030005     ................
1a00449c:	03000106 04090400 04010d05 010b0000     ................
1a0044ac:	0200000f 00000001 00010104 02010800     ................
1a0044bc:	01090000 09010006 05040002 04010200     ................
1a0044cc:	02020105 02020504 0e00000a 01000b02     ................
1a0044dc:	000c020b ffff0c01                       ........

1a0044e4 <ultrasonicSensorsIrqMap>:
1a0044e4:	30020100 34333231 38373635 63626139     ...0123456789abc
1a0044f4:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
1a004504:	77767574 007a7978                       tuvwxyz.

1a00450c <__sf_fake_stderr>:
	...

1a00452c <__sf_fake_stdin>:
	...

1a00454c <__sf_fake_stdout>:
	...

1a00456c <_global_impure_ptr>:
1a00456c:	100000f8 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a00457c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00458c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00459c:	64636261 ff006665                       abcdef..
